
carwasher_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08005908  08005908  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005908  08005908  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000098  080059a8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080059a8  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d23  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec4  00000000  00000000  00031de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00035e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c3  00000000  00000000  00036f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a95  00000000  00000000  000506d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff9c  00000000  00000000  00064168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4104  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  000f4158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08005590 	.word	0x08005590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08005590 	.word	0x08005590

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b4a      	ldr	r3, [pc, #296]	; (800029c <MX_GPIO_Init+0x140>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a49      	ldr	r2, [pc, #292]	; (800029c <MX_GPIO_Init+0x140>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b47      	ldr	r3, [pc, #284]	; (800029c <MX_GPIO_Init+0x140>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b44      	ldr	r3, [pc, #272]	; (800029c <MX_GPIO_Init+0x140>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a43      	ldr	r2, [pc, #268]	; (800029c <MX_GPIO_Init+0x140>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b41      	ldr	r3, [pc, #260]	; (800029c <MX_GPIO_Init+0x140>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b3e      	ldr	r3, [pc, #248]	; (800029c <MX_GPIO_Init+0x140>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3d      	ldr	r2, [pc, #244]	; (800029c <MX_GPIO_Init+0x140>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b3b      	ldr	r3, [pc, #236]	; (800029c <MX_GPIO_Init+0x140>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b38      	ldr	r3, [pc, #224]	; (800029c <MX_GPIO_Init+0x140>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a37      	ldr	r2, [pc, #220]	; (800029c <MX_GPIO_Init+0x140>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b35      	ldr	r3, [pc, #212]	; (800029c <MX_GPIO_Init+0x140>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_6_Pin|MAX7219_CS_Pin
 80001d0:	2200      	movs	r2, #0
 80001d2:	f245 3103 	movw	r1, #21251	; 0x5303
 80001d6:	4832      	ldr	r0, [pc, #200]	; (80002a0 <MX_GPIO_Init+0x144>)
 80001d8:	f002 fba9 	bl	800292e <HAL_GPIO_WritePin>
                          |OUT_4_Pin|OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_3_Pin|ALIVE_LED_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80001e2:	4830      	ldr	r0, [pc, #192]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001e4:	f002 fba3 	bl	800292e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SEL_Pin|MODE_SW_Pin|FRONT_SW_1_Pin|FRONT_SW_2_Pin
 80001e8:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80001ec:	613b      	str	r3, [r7, #16]
                          |FRONT_SW_3_Pin|FRONT_SW_4_Pin|FRONT_SW_5_Pin|CREDIT_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	4829      	ldr	r0, [pc, #164]	; (80002a4 <MX_GPIO_Init+0x148>)
 80001fe:	f002 f9fb 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_6_Pin|MAX7219_CS_Pin
 8000202:	f245 3303 	movw	r3, #21251	; 0x5303
 8000206:	613b      	str	r3, [r7, #16]
                          |OUT_4_Pin|OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2301      	movs	r3, #1
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800020c:	2302      	movs	r3, #2
 800020e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	2302      	movs	r3, #2
 8000212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4821      	ldr	r0, [pc, #132]	; (80002a0 <MX_GPIO_Init+0x144>)
 800021c:	f002 f9ec 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_3_Pin;
 8000220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000226:	2301      	movs	r3, #1
 8000228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022e:	2302      	movs	r3, #2
 8000230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_3_GPIO_Port, &GPIO_InitStruct);
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	4619      	mov	r1, r3
 8000238:	481a      	ldr	r0, [pc, #104]	; (80002a4 <MX_GPIO_Init+0x148>)
 800023a:	f002 f9dd 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALIVE_LED_Pin;
 800023e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALIVE_LED_GPIO_Port, &GPIO_InitStruct);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	4619      	mov	r1, r3
 8000256:	4813      	ldr	r0, [pc, #76]	; (80002a4 <MX_GPIO_Init+0x148>)
 8000258:	f002 f9ce 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = COIN_IT_Pin|BANK_IT_Pin;
 800025c:	2330      	movs	r3, #48	; 0x30
 800025e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_GPIO_Init+0x14c>)
 8000262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	f107 0310 	add.w	r3, r7, #16
 800026c:	4619      	mov	r1, r3
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <MX_GPIO_Init+0x144>)
 8000270:	f002 f9c2 	bl	80025f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2100      	movs	r1, #0
 8000278:	200a      	movs	r0, #10
 800027a:	f002 f96a 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800027e:	200a      	movs	r0, #10
 8000280:	f002 f983 	bl	800258a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000284:	2200      	movs	r2, #0
 8000286:	2100      	movs	r1, #0
 8000288:	2017      	movs	r0, #23
 800028a:	f002 f962 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800028e:	2017      	movs	r0, #23
 8000290:	f002 f97b 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 8000294:	bf00      	nop
 8000296:	3720      	adds	r7, #32
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	40010800 	.word	0x40010800
 80002a8:	10110000 	.word	0x10110000

080002ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002b2:	f001 ffaf 	bl	8002214 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002b6:	f000 f86d 	bl	8000394 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002ba:	f7ff ff4f 	bl	800015c <MX_GPIO_Init>
	MX_RTC_Init();
 80002be:	f001 fca5 	bl	8001c0c <MX_RTC_Init>
	MX_SPI2_Init();
 80002c2:	f001 fd11 	bl	8001ce8 <MX_SPI2_Init>
	MX_TIM2_Init();
 80002c6:	f001 fe33 	bl	8001f30 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80002ca:	f001 fea1 	bl	8002010 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80002ce:	f001 fec9 	bl	8002064 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	disable_exti();
 80002d2:	f000 f8b9 	bl	8000448 <disable_exti>
	reset_all_pins();
 80002d6:	f000 fde9 	bl	8000eac <reset_all_pins>
	read_settings_from_eeprom();
 80002da:	f001 f97b 	bl	80015d4 <read_settings_from_eeprom>
	init_display();
 80002de:	f000 fdd7 	bl	8000e90 <init_display>
	//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
	//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	reset_all_pins();
 80002e2:	f000 fde3 	bl	8000eac <reset_all_pins>
	HAL_TIM_Base_Start_IT(&htim2);
 80002e6:	4825      	ldr	r0, [pc, #148]	; (800037c <main+0xd0>)
 80002e8:	f003 ff84 	bl	80041f4 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 80002ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f0:	f001 fff2 	bl	80022d8 <HAL_Delay>
	enable_exti();
 80002f4:	f000 f8c2 	bl	800047c <enable_exti>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint8_t btn_read = read_button();
 80002f8:	f000 feb8 	bl	800106c <read_button>
 80002fc:	4603      	mov	r3, r0
 80002fe:	71fb      	strb	r3, [r7, #7]
		if(btn_read == 6){ // credit reset is press
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b06      	cmp	r3, #6
 8000304:	d108      	bne.n	8000318 <main+0x6c>
			reset_all_state();
 8000306:	f000 fc45 	bl	8000b94 <reset_all_state>
			store_credit_eeprom(credit); // save last credit value
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <main+0xd4>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	b29b      	uxth	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f9b9 	bl	8000688 <store_credit_eeprom>
			continue;
 8000316:	e030      	b.n	800037a <main+0xce>
		}
		if(btn_read == 7){ // mode button is pressed
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b07      	cmp	r3, #7
 800031c:	d105      	bne.n	800032a <main+0x7e>
			setting_mode = 1;
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <main+0xd8>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
			setting_menu_loop();
 8000324:	f000 f96e 	bl	8000604 <setting_menu_loop>
			continue;
 8000328:	e027      	b.n	800037a <main+0xce>
		}
		if(btn_read != 0){
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d011      	beq.n	8000354 <main+0xa8>
			if(btn_read == pressed_button){
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0xdc>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	79fa      	ldrb	r2, [r7, #7]
 8000338:	429a      	cmp	r2, r3
 800033a:	d103      	bne.n	8000344 <main+0x98>
				pressed_button = 0;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <main+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
 8000342:	e007      	b.n	8000354 <main+0xa8>
			}else{
				if(pressed_button == 0 ){
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <main+0xdc>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d102      	bne.n	8000354 <main+0xa8>
					pressed_button = btn_read;
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <main+0xdc>)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if(is_operation_running){
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <main+0xe0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d005      	beq.n	800036a <main+0xbe>
			is_standby = false;
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <main+0xe4>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
			do_operation();
 8000364:	f000 fe66 	bl	8001034 <do_operation>
 8000368:	e004      	b.n	8000374 <main+0xc8>
		}else{
			pressed_button = 0;
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <main+0xdc>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
			reset_all_pins();
 8000370:	f000 fd9c 	bl	8000eac <reset_all_pins>
		}
		HAL_Delay(120);
 8000374:	2078      	movs	r0, #120	; 0x78
 8000376:	f001 ffaf 	bl	80022d8 <HAL_Delay>
	{
 800037a:	e7bd      	b.n	80002f8 <main+0x4c>
 800037c:	20000158 	.word	0x20000158
 8000380:	200000ce 	.word	0x200000ce
 8000384:	200000d1 	.word	0x200000d1
 8000388:	200000d0 	.word	0x200000d0
 800038c:	200000cc 	.word	0x200000cc
 8000390:	20000000 	.word	0x20000000

08000394 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b094      	sub	sp, #80	; 0x50
 8000398:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f004 fcb2 	bl	8004d0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80003c4:	230a      	movs	r3, #10
 80003c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003cc:	2310      	movs	r3, #16
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003d8:	2300      	movs	r3, #0
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 faf6 	bl	80029d8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80003f2:	f001 fa7d 	bl	80018f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fd60 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800041e:	f001 fa67 	bl	80018f0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000422:	2301      	movs	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800042a:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4618      	mov	r0, r3
 8000430:	f002 feec 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800043a:	f001 fa59 	bl	80018f0 <Error_Handler>
	}
}
 800043e:	bf00      	nop
 8000440:	3750      	adds	r7, #80	; 0x50
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <disable_exti>:

/* USER CODE BEGIN 4 */
void disable_exti(){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	exti_disable = true;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <disable_exti+0x28>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000452:	200a      	movs	r0, #10
 8000454:	f002 f8a7 	bl	80025a6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000458:	2017      	movs	r0, #23
 800045a:	f002 f8a4 	bl	80025a6 <HAL_NVIC_DisableIRQ>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n##### EXTI DISABLED!! ######\r\n", 31,HAL_MAX_DELAY);
 800045e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000462:	221f      	movs	r2, #31
 8000464:	4903      	ldr	r1, [pc, #12]	; (8000474 <disable_exti+0x2c>)
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <disable_exti+0x30>)
 8000468:	f004 fabb 	bl	80049e2 <HAL_UART_Transmit>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000dd 	.word	0x200000dd
 8000474:	080055a8 	.word	0x080055a8
 8000478:	200001e4 	.word	0x200001e4

0800047c <enable_exti>:
void enable_exti(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	exti_disable = false;
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <enable_exti+0x40>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(COIN_IT_Pin);
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <enable_exti+0x44>)
 8000488:	2210      	movs	r2, #16
 800048a:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(BANK_IT_Pin);
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <enable_exti+0x44>)
 800048e:	2220      	movs	r2, #32
 8000490:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000492:	200a      	movs	r0, #10
 8000494:	f002 f8a1 	bl	80025da <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000498:	2017      	movs	r0, #23
 800049a:	f002 f89e 	bl	80025da <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800049e:	200a      	movs	r0, #10
 80004a0:	f002 f873 	bl	800258a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004a4:	2017      	movs	r0, #23
 80004a6:	f002 f870 	bl	800258a <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n##### EXTI ENABLE ######\r\n", 27,HAL_MAX_DELAY);
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ae:	221b      	movs	r2, #27
 80004b0:	4904      	ldr	r1, [pc, #16]	; (80004c4 <enable_exti+0x48>)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <enable_exti+0x4c>)
 80004b4:	f004 fa95 	bl	80049e2 <HAL_UART_Transmit>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000dd 	.word	0x200000dd
 80004c0:	40010400 	.word	0x40010400
 80004c4:	080055c8 	.word	0x080055c8
 80004c8:	200001e4 	.word	0x200001e4

080004cc <send_iot_status>:
void send_iot_status(uint8_t money_event){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)">>>>>>>>> sending iot package\r\n", 31,HAL_MAX_DELAY);
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004da:	221f      	movs	r2, #31
 80004dc:	4916      	ldr	r1, [pc, #88]	; (8000538 <send_iot_status+0x6c>)
 80004de:	4817      	ldr	r0, [pc, #92]	; (800053c <send_iot_status+0x70>)
 80004e0:	f004 fa7f 	bl	80049e2 <HAL_UART_Transmit>
	uint8_t iot_serial_package[8];
	iot_serial_package[0] = 0x02; // STX start flag
 80004e4:	2302      	movs	r3, #2
 80004e6:	723b      	strb	r3, [r7, #8]
	iot_serial_package[1] = credit;  // credit hi bits
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <send_iot_status+0x74>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	727b      	strb	r3, [r7, #9]
	iot_serial_package[2] = 0;  // credit lo bits
 80004f2:	2300      	movs	r3, #0
 80004f4:	72bb      	strb	r3, [r7, #10]
	iot_serial_package[3] = pressed_button;  // mode
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <send_iot_status+0x78>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	72fb      	strb	r3, [r7, #11]
	iot_serial_package[4] = money_event;  // money in event
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	733b      	strb	r3, [r7, #12]
	iot_serial_package[5] = 0x03; // ETX stop flag
 8000502:	2303      	movs	r3, #3
 8000504:	737b      	strb	r3, [r7, #13]
	iot_serial_package[6] = 0x0D; // newline
 8000506:	230d      	movs	r3, #13
 8000508:	73bb      	strb	r3, [r7, #14]
	iot_serial_package[7] = 0x0A; // carriage return
 800050a:	230a      	movs	r3, #10
 800050c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)iot_serial_package, 8, HAL_MAX_DELAY);
 800050e:	f107 0108 	add.w	r1, r7, #8
 8000512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000516:	2208      	movs	r2, #8
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <send_iot_status+0x70>)
 800051a:	f004 fa62 	bl	80049e2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)iot_serial_package, 8, HAL_MAX_DELAY);
 800051e:	f107 0108 	add.w	r1, r7, #8
 8000522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000526:	2208      	movs	r2, #8
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <send_iot_status+0x7c>)
 800052a:	f004 fa5a 	bl	80049e2 <HAL_UART_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	080055e4 	.word	0x080055e4
 800053c:	200001e4 	.word	0x200001e4
 8000540:	200000ce 	.word	0x200000ce
 8000544:	200000d0 	.word	0x200000d0
 8000548:	200001a0 	.word	0x200001a0

0800054c <display_menu>:
void display_menu(uint8_t selected_menu){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	switch (selected_menu) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	3b01      	subs	r3, #1
 800055a:	2b04      	cmp	r3, #4
 800055c:	d843      	bhi.n	80005e6 <display_menu+0x9a>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <display_menu+0x18>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000579 	.word	0x08000579
 8000568:	0800058b 	.word	0x0800058b
 800056c:	0800059d 	.word	0x0800059d
 8000570:	080005b9 	.word	0x080005b9
 8000574:	080005d5 	.word	0x080005d5
	case 1:
		segment_display_function_settings(selected_menu,F1_DURATION);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <display_menu+0xa4>)
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fa20 	bl	80009c8 <segment_display_function_settings>
		break;
 8000588:	e02d      	b.n	80005e6 <display_menu+0x9a>
	case 2:
		segment_display_function_settings(selected_menu,F2_DURATION);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <display_menu+0xa8>)
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fa17 	bl	80009c8 <segment_display_function_settings>
		break;
 800059a:	e024      	b.n	80005e6 <display_menu+0x9a>
	case 3:
		max7219_PrintDigit(DIGIT_3,18,true);
 800059c:	2201      	movs	r2, #1
 800059e:	2112      	movs	r1, #18
 80005a0:	2003      	movs	r0, #3
 80005a2:	f001 fa4f 	bl	8001a44 <max7219_PrintDigit>
		segment_display_function_settings(selected_menu,F3_DURATION);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <display_menu+0xac>)
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fa09 	bl	80009c8 <segment_display_function_settings>
		break;
 80005b6:	e016      	b.n	80005e6 <display_menu+0x9a>
	case 4:
		max7219_PrintDigit(DIGIT_3,19,true);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2113      	movs	r1, #19
 80005bc:	2003      	movs	r0, #3
 80005be:	f001 fa41 	bl	8001a44 <max7219_PrintDigit>
		segment_display_function_settings(selected_menu,F4_DURATION);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <display_menu+0xb0>)
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f9fb 	bl	80009c8 <segment_display_function_settings>
		break;
 80005d2:	e008      	b.n	80005e6 <display_menu+0x9a>
	case 5:
		segment_display_function_settings(selected_menu,F5_DURATION);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <display_menu+0xb4>)
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f9f2 	bl	80009c8 <segment_display_function_settings>
		break;
 80005e4:	bf00      	nop
	}
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000001 	.word	0x20000001
 80005f4:	20000002 	.word	0x20000002
 80005f8:	20000003 	.word	0x20000003
 80005fc:	20000004 	.word	0x20000004
 8000600:	20000005 	.word	0x20000005

08000604 <setting_menu_loop>:
void setting_menu_loop(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	reset_all_state();
 800060a:	f000 fac3 	bl	8000b94 <reset_all_state>
	is_standby = false;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <setting_menu_loop+0x7c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	while(setting_mode != 0){
 8000614:	e02b      	b.n	800066e <setting_menu_loop+0x6a>
		uint8_t btn_read = read_button();
 8000616:	f000 fd29 	bl	800106c <read_button>
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
		if(btn_read == 7){
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d111      	bne.n	8000648 <setting_menu_loop+0x44>
			setting_mode += 1;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <setting_menu_loop+0x80>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <setting_menu_loop+0x80>)
 8000630:	701a      	strb	r2, [r3, #0]
			if(setting_mode >= 6){
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <setting_menu_loop+0x80>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b05      	cmp	r3, #5
 800063a:	d918      	bls.n	800066e <setting_menu_loop+0x6a>
				setting_mode = 0;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <setting_menu_loop+0x80>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
				reset_all_state();
 8000642:	f000 faa7 	bl	8000b94 <reset_all_state>
				return;
 8000646:	e017      	b.n	8000678 <setting_menu_loop+0x74>
			}
			continue;
		}else if(btn_read == 1){
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d106      	bne.n	800065c <setting_menu_loop+0x58>
			set_add_duration_of_function(setting_mode);
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <setting_menu_loop+0x80>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f887 	bl	8000768 <set_add_duration_of_function>
 800065a:	e008      	b.n	800066e <setting_menu_loop+0x6a>
		}else if(btn_read == 2){
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d105      	bne.n	800066e <setting_menu_loop+0x6a>
			set_substract_duration_of_function(setting_mode);
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <setting_menu_loop+0x80>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f915 	bl	8000898 <set_substract_duration_of_function>
	while(setting_mode != 0){
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <setting_menu_loop+0x80>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1ce      	bne.n	8000616 <setting_menu_loop+0x12>
		}
	}
}
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	200000d1 	.word	0x200000d1

08000688 <store_credit_eeprom>:
void store_credit_eeprom(uint16_t store_credit){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	uint8_t hbits=store_credit & 0xff;
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t lbits=(store_credit >> 8);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	b29b      	uxth	r3, r3
 800069c:	73bb      	strb	r3, [r7, #14]
	eeprom_write(CREDIT_HI_BYTE, hbits);
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2006      	movs	r0, #6
 80006a4:	f000 f80a 	bl	80006bc <eeprom_write>
	eeprom_write(CREDIT_LO_BYTE, lbits);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2007      	movs	r0, #7
 80006ae:	f000 f805 	bl	80006bc <eeprom_write>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d842      	bhi.n	800075a <eeprom_write+0x9e>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <eeprom_write+0x20>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006f9 	.word	0x080006f9
 80006e0:	08000707 	.word	0x08000707
 80006e4:	08000715 	.word	0x08000715
 80006e8:	08000723 	.word	0x08000723
 80006ec:	08000731 	.word	0x08000731
 80006f0:	0800073f 	.word	0x0800073f
 80006f4:	0800074d 	.word	0x0800074d
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2101      	movs	r1, #1
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <eeprom_write+0xa8>)
 8000700:	f003 fa8c 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 8000704:	e029      	b.n	800075a <eeprom_write+0x9e>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	461a      	mov	r2, r3
 800070a:	2102      	movs	r1, #2
 800070c:	4815      	ldr	r0, [pc, #84]	; (8000764 <eeprom_write+0xa8>)
 800070e:	f003 fa85 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 8000712:	e022      	b.n	800075a <eeprom_write+0x9e>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	461a      	mov	r2, r3
 8000718:	2103      	movs	r1, #3
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <eeprom_write+0xa8>)
 800071c:	f003 fa7e 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 8000720:	e01b      	b.n	800075a <eeprom_write+0x9e>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	461a      	mov	r2, r3
 8000726:	2104      	movs	r1, #4
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <eeprom_write+0xa8>)
 800072a:	f003 fa77 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 800072e:	e014      	b.n	800075a <eeprom_write+0x9e>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	461a      	mov	r2, r3
 8000734:	2105      	movs	r1, #5
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <eeprom_write+0xa8>)
 8000738:	f003 fa70 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 800073c:	e00d      	b.n	800075a <eeprom_write+0x9e>
	case 0x06:  /// credit hi bit
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	461a      	mov	r2, r3
 8000742:	2106      	movs	r1, #6
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <eeprom_write+0xa8>)
 8000746:	f003 fa69 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 800074a:	e006      	b.n	800075a <eeprom_write+0x9e>
	case 0x07:  /// credit lo bit
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, data);
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	461a      	mov	r2, r3
 8000750:	2107      	movs	r1, #7
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <eeprom_write+0xa8>)
 8000754:	f003 fa62 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		break;
 8000758:	bf00      	nop
	}

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000ec 	.word	0x200000ec

08000768 <set_add_duration_of_function>:
void set_add_duration_of_function(uint8_t _selected_menu){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d075      	beq.n	8000864 <set_add_duration_of_function+0xfc>
		switch (_selected_menu) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b04      	cmp	r3, #4
 800077e:	d87c      	bhi.n	800087a <set_add_duration_of_function+0x112>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <set_add_duration_of_function+0x20>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	0800079d 	.word	0x0800079d
 800078c:	080007c5 	.word	0x080007c5
 8000790:	080007ed 	.word	0x080007ed
 8000794:	08000815 	.word	0x08000815
 8000798:	0800083d 	.word	0x0800083d
		case 1:
			if(F1_DURATION < 99){
 800079c:	4b39      	ldr	r3, [pc, #228]	; (8000884 <set_add_duration_of_function+0x11c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b62      	cmp	r3, #98	; 0x62
 80007a4:	d860      	bhi.n	8000868 <set_add_duration_of_function+0x100>
				F1_DURATION += 1;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <set_add_duration_of_function+0x11c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <set_add_duration_of_function+0x11c>)
 80007b2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <set_add_duration_of_function+0x11c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff7d 	bl	80006bc <eeprom_write>
			}
			break;
 80007c2:	e051      	b.n	8000868 <set_add_duration_of_function+0x100>
		case 2:
			if(F2_DURATION < 99){
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <set_add_duration_of_function+0x120>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b62      	cmp	r3, #98	; 0x62
 80007cc:	d84e      	bhi.n	800086c <set_add_duration_of_function+0x104>
				F2_DURATION += 1;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <set_add_duration_of_function+0x120>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <set_add_duration_of_function+0x120>)
 80007da:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <set_add_duration_of_function+0x120>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff ff69 	bl	80006bc <eeprom_write>
			}
			break;
 80007ea:	e03f      	b.n	800086c <set_add_duration_of_function+0x104>
		case 3:
			if(F3_DURATION < 99){
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <set_add_duration_of_function+0x124>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b62      	cmp	r3, #98	; 0x62
 80007f4:	d83c      	bhi.n	8000870 <set_add_duration_of_function+0x108>
				F3_DURATION += 1;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <set_add_duration_of_function+0x124>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <set_add_duration_of_function+0x124>)
 8000802:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <set_add_duration_of_function+0x124>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4619      	mov	r1, r3
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff ff55 	bl	80006bc <eeprom_write>
			}
			break;
 8000812:	e02d      	b.n	8000870 <set_add_duration_of_function+0x108>
		case 4:
			if(F4_DURATION < 99){
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <set_add_duration_of_function+0x128>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b62      	cmp	r3, #98	; 0x62
 800081c:	d82a      	bhi.n	8000874 <set_add_duration_of_function+0x10c>
				F4_DURATION += 1;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <set_add_duration_of_function+0x128>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <set_add_duration_of_function+0x128>)
 800082a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <set_add_duration_of_function+0x128>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4619      	mov	r1, r3
 8000834:	2004      	movs	r0, #4
 8000836:	f7ff ff41 	bl	80006bc <eeprom_write>
			}
			break;
 800083a:	e01b      	b.n	8000874 <set_add_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION < 99){
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <set_add_duration_of_function+0x12c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b62      	cmp	r3, #98	; 0x62
 8000844:	d818      	bhi.n	8000878 <set_add_duration_of_function+0x110>
				F5_DURATION += 1;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <set_add_duration_of_function+0x12c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <set_add_duration_of_function+0x12c>)
 8000852:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <set_add_duration_of_function+0x12c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	2005      	movs	r0, #5
 800085e:	f7ff ff2d 	bl	80006bc <eeprom_write>
			}
			break;
 8000862:	e009      	b.n	8000878 <set_add_duration_of_function+0x110>
		}
	}
 8000864:	bf00      	nop
 8000866:	e008      	b.n	800087a <set_add_duration_of_function+0x112>
			break;
 8000868:	bf00      	nop
 800086a:	e006      	b.n	800087a <set_add_duration_of_function+0x112>
			break;
 800086c:	bf00      	nop
 800086e:	e004      	b.n	800087a <set_add_duration_of_function+0x112>
			break;
 8000870:	bf00      	nop
 8000872:	e002      	b.n	800087a <set_add_duration_of_function+0x112>
			break;
 8000874:	bf00      	nop
 8000876:	e000      	b.n	800087a <set_add_duration_of_function+0x112>
			break;
 8000878:	bf00      	nop
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000001 	.word	0x20000001
 8000888:	20000002 	.word	0x20000002
 800088c:	20000003 	.word	0x20000003
 8000890:	20000004 	.word	0x20000004
 8000894:	20000005 	.word	0x20000005

08000898 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d075      	beq.n	8000994 <set_substract_duration_of_function+0xfc>
		switch (_selected_menu) {
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d87c      	bhi.n	80009aa <set_substract_duration_of_function+0x112>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <set_substract_duration_of_function+0x20>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008cd 	.word	0x080008cd
 80008bc:	080008f5 	.word	0x080008f5
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	08000945 	.word	0x08000945
 80008c8:	0800096d 	.word	0x0800096d
		case 1:
			if(F1_DURATION >0){
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <set_substract_duration_of_function+0x11c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d060      	beq.n	8000998 <set_substract_duration_of_function+0x100>
				F1_DURATION -= 1;
 80008d6:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <set_substract_duration_of_function+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <set_substract_duration_of_function+0x11c>)
 80008e2:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <set_substract_duration_of_function+0x11c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fee5 	bl	80006bc <eeprom_write>
			}
			break;
 80008f2:	e051      	b.n	8000998 <set_substract_duration_of_function+0x100>
		case 2:
			if(F2_DURATION >0){
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <set_substract_duration_of_function+0x120>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d04e      	beq.n	800099c <set_substract_duration_of_function+0x104>
				F2_DURATION -= 1;
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <set_substract_duration_of_function+0x120>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	3b01      	subs	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <set_substract_duration_of_function+0x120>)
 800090a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <set_substract_duration_of_function+0x120>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fed1 	bl	80006bc <eeprom_write>
			}
			break;
 800091a:	e03f      	b.n	800099c <set_substract_duration_of_function+0x104>
		case 3:
			if(F3_DURATION >0){
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <set_substract_duration_of_function+0x124>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d03c      	beq.n	80009a0 <set_substract_duration_of_function+0x108>
				F3_DURATION -= 1;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <set_substract_duration_of_function+0x124>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3b01      	subs	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <set_substract_duration_of_function+0x124>)
 8000932:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <set_substract_duration_of_function+0x124>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4619      	mov	r1, r3
 800093c:	2003      	movs	r0, #3
 800093e:	f7ff febd 	bl	80006bc <eeprom_write>
			}
			break;
 8000942:	e02d      	b.n	80009a0 <set_substract_duration_of_function+0x108>
		case 4:
			if(F4_DURATION >0){
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <set_substract_duration_of_function+0x128>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d02a      	beq.n	80009a4 <set_substract_duration_of_function+0x10c>
				F4_DURATION -= 1;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <set_substract_duration_of_function+0x128>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	3b01      	subs	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <set_substract_duration_of_function+0x128>)
 800095a:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <set_substract_duration_of_function+0x128>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	2004      	movs	r0, #4
 8000966:	f7ff fea9 	bl	80006bc <eeprom_write>
			}
			break;
 800096a:	e01b      	b.n	80009a4 <set_substract_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION >0){
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <set_substract_duration_of_function+0x12c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d018      	beq.n	80009a8 <set_substract_duration_of_function+0x110>
				F5_DURATION -= 1;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <set_substract_duration_of_function+0x12c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	3b01      	subs	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <set_substract_duration_of_function+0x12c>)
 8000982:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <set_substract_duration_of_function+0x12c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	2005      	movs	r0, #5
 800098e:	f7ff fe95 	bl	80006bc <eeprom_write>
			}
			break;
 8000992:	e009      	b.n	80009a8 <set_substract_duration_of_function+0x110>
		}
	}
 8000994:	bf00      	nop
 8000996:	e008      	b.n	80009aa <set_substract_duration_of_function+0x112>
			break;
 8000998:	bf00      	nop
 800099a:	e006      	b.n	80009aa <set_substract_duration_of_function+0x112>
			break;
 800099c:	bf00      	nop
 800099e:	e004      	b.n	80009aa <set_substract_duration_of_function+0x112>
			break;
 80009a0:	bf00      	nop
 80009a2:	e002      	b.n	80009aa <set_substract_duration_of_function+0x112>
			break;
 80009a4:	bf00      	nop
 80009a6:	e000      	b.n	80009aa <set_substract_duration_of_function+0x112>
			break;
 80009a8:	bf00      	nop
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000001 	.word	0x20000001
 80009b8:	20000002 	.word	0x20000002
 80009bc:	20000003 	.word	0x20000003
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000005 	.word	0x20000005

080009c8 <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 80009d2:	f001 f827 	bl	8001a24 <max7219_Decode_On>
	max7219_Clean ();
 80009d6:	f000 ffc3 	bl	8001960 <max7219_Clean>
	if(value < 10){
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	dc04      	bgt.n	80009ea <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 f888 	bl	8001af8 <max7219_PrintItos>
 80009e8:	e009      	b.n	80009fe <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	2b09      	cmp	r3, #9
 80009ee:	dd06      	ble.n	80009fe <segment_display_function_settings+0x36>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	2b63      	cmp	r3, #99	; 0x63
 80009f4:	dc03      	bgt.n	80009fe <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	2002      	movs	r0, #2
 80009fa:	f001 f87d 	bl	8001af8 <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	2003      	movs	r0, #3
 8000a08:	f001 f81c 	bl	8001a44 <max7219_PrintDigit>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d162      	bne.n	8000aec <HAL_TIM_PeriodElapsedCallback+0xd8>
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"timer2 tick!\r\n", 14,HAL_MAX_DELAY);
		tim2_counter += 1;
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a2e:	6013      	str	r3, [r2, #0]
		tim2_500ms_counter += 1;
 8000a30:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a38:	6013      	str	r3, [r2, #0]
		tim2_300ms_counter += 1;
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a42:	6013      	str	r3, [r2, #0]
		tim2_400ms_counter += 1;
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a4c:	6013      	str	r3, [r2, #0]
		tim2_200ms_counter += 1;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a2b      	ldr	r2, [pc, #172]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a56:	6013      	str	r3, [r2, #0]
		if(tim2_counter % 10 == 0){ /// 100 ms tick
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a5e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a62:	109a      	asrs	r2, r3, #2
 8000a64:	17cb      	asrs	r3, r1, #31
 8000a66:	1ad2      	subs	r2, r2, r3
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	1aca      	subs	r2, r1, r3
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d10d      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x7e>
			//			char tmp_msg[35];
			//			sprintf(tmp_msg,"pressed button : %d \r\n",pressed_button);
			//			HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
			if(setting_mode != 0){
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d008      	beq.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x7e>
				is_standby = false;
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
				display_menu(setting_mode);
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd5d 	bl	800054c <display_menu>
			}
		}

		if(tim2_counter >= 100){
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b63      	cmp	r3, #99	; 0x63
 8000a98:	dd04      	ble.n	8000aa4 <HAL_TIM_PeriodElapsedCallback+0x90>
			tim2_counter = 0;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
			do_1sec_tick();
 8000aa0:	f000 f91c 	bl	8000cdc <do_1sec_tick>
		}
		if(tim2_500ms_counter >= 50){
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b31      	cmp	r3, #49	; 0x31
 8000aaa:	dd04      	ble.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0xa2>
			tim2_500ms_counter = 0;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
			do_500ms_tick();
 8000ab2:	f000 f977 	bl	8000da4 <do_500ms_tick>
		}
		if(tim2_200ms_counter >= 20){
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b13      	cmp	r3, #19
 8000abc:	dd04      	ble.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0xb4>
			tim2_200ms_counter = 0;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
			do_200ms_tick();
 8000ac4:	f000 f974 	bl	8000db0 <do_200ms_tick>
		}
		if(tim2_300ms_counter >= 30){
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b1d      	cmp	r3, #29
 8000ace:	dd04      	ble.n	8000ada <HAL_TIM_PeriodElapsedCallback+0xc6>
			tim2_300ms_counter = 0;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			do_300ms_tick();
 8000ad6:	f000 f98d 	bl	8000df4 <do_300ms_tick>
		}
		if(tim2_400ms_counter >= 40){
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b27      	cmp	r3, #39	; 0x27
 8000ae0:	dd04      	ble.n	8000aec <HAL_TIM_PeriodElapsedCallback+0xd8>
			tim2_400ms_counter = 0;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
			do_400ms_tick();
 8000ae8:	f000 f998 	bl	8000e1c <do_400ms_tick>
		}
	}
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000b4 	.word	0x200000b4
 8000af8:	200000c4 	.word	0x200000c4
 8000afc:	200000b8 	.word	0x200000b8
 8000b00:	200000c0 	.word	0x200000c0
 8000b04:	200000bc 	.word	0x200000bc
 8000b08:	66666667 	.word	0x66666667
 8000b0c:	200000d1 	.word	0x200000d1
 8000b10:	20000000 	.word	0x20000000

08000b14 <get_function_duration>:
uint8_t get_function_duration(uint8_t selected_mode){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t duration_per_1credit = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
	switch(selected_mode){
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d820      	bhi.n	8000b6c <get_function_duration+0x58>
 8000b2a:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <get_function_duration+0x1c>)
 8000b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b30:	08000b45 	.word	0x08000b45
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000b55 	.word	0x08000b55
 8000b3c:	08000b5d 	.word	0x08000b5d
 8000b40:	08000b65 	.word	0x08000b65
	case 1:
		duration_per_1credit = F1_DURATION;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <get_function_duration+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	73fb      	strb	r3, [r7, #15]
		break;
 8000b4a:	e012      	b.n	8000b72 <get_function_duration+0x5e>
	case 2:
		duration_per_1credit = F2_DURATION;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <get_function_duration+0x70>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	73fb      	strb	r3, [r7, #15]
		break;
 8000b52:	e00e      	b.n	8000b72 <get_function_duration+0x5e>
	case 3:
		duration_per_1credit = F3_DURATION;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <get_function_duration+0x74>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	73fb      	strb	r3, [r7, #15]
		break;
 8000b5a:	e00a      	b.n	8000b72 <get_function_duration+0x5e>
	case 4:
		duration_per_1credit = F4_DURATION;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <get_function_duration+0x78>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	73fb      	strb	r3, [r7, #15]
		break;
 8000b62:	e006      	b.n	8000b72 <get_function_duration+0x5e>
	case 5:
		duration_per_1credit = F5_DURATION;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <get_function_duration+0x7c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	73fb      	strb	r3, [r7, #15]
		break;
 8000b6a:	e002      	b.n	8000b72 <get_function_duration+0x5e>
	default:
		duration_per_1credit = 10;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000b70:	bf00      	nop
	}
	return duration_per_1credit;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000001 	.word	0x20000001
 8000b84:	20000002 	.word	0x20000002
 8000b88:	20000003 	.word	0x20000003
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	20000005 	.word	0x20000005

08000b94 <reset_all_state>:
void reset_all_state(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Stop_IT(&htim2);
	//	__HAL_TIM_SET_COUNTER(&htim2, 0);
	//	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
	reset_all_pins();
 8000b98:	f000 f988 	bl	8000eac <reset_all_pins>
	consume_credit = false;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <reset_all_state+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	credit = 0;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <reset_all_state+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	801a      	strh	r2, [r3, #0]
	is_standby = true;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <reset_all_state+0x58>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
	is_operation_running = false;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <reset_all_state+0x5c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	pressed_button = 0;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <reset_all_state+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 8000bba:	f000 ff1f 	bl	80019fc <max7219_Turn_On>
	max7219_Clean();
 8000bbe:	f000 fecf 	bl	8001960 <max7219_Clean>
	tim2_counter = 0;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <reset_all_state+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
	tim2_500ms_counter = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <reset_all_state+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
	tim2_300ms_counter = 0;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <reset_all_state+0x6c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
	tim2_400ms_counter = 0;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <reset_all_state+0x70>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
	tim2_200ms_counter = 0;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <reset_all_state+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
	//	HAL_TIM_Base_Start_IT(&htim2);
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000d4 	.word	0x200000d4
 8000be8:	200000ce 	.word	0x200000ce
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	200000d0 	.word	0x200000d0
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	200000c4 	.word	0x200000c4
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	200000c0 	.word	0x200000c0
 8000c08:	200000bc 	.word	0x200000bc

08000c0c <decrease_credit>:
//void start_acceptors(){
//	HAL_TIM_Base_Start_IT(&htim3);
//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
//}
void decrease_credit(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
	if(consume_credit){
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <decrease_credit+0xb4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d04c      	beq.n	8000cb6 <decrease_credit+0xaa>
		credit_consume_counter += 1;
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <decrease_credit+0xb8>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <decrease_credit+0xb8>)
 8000c28:	701a      	strb	r2, [r3, #0]
		char tmp_msg[35];
		sprintf(tmp_msg,"Consuming counter: %d \r\n",credit_consume_counter);
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <decrease_credit+0xb8>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <decrease_credit+0xbc>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 f870 	bl	8004d1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fa84 	bl	800014c <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	1d39      	adds	r1, r7, #4
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c4e:	481f      	ldr	r0, [pc, #124]	; (8000ccc <decrease_credit+0xc0>)
 8000c50:	f003 fec7 	bl	80049e2 <HAL_UART_Transmit>
		uint8_t duration = get_function_duration(pressed_button);
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <decrease_credit+0xc4>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff5a 	bl	8000b14 <get_function_duration>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(credit_consume_counter >= duration){
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <decrease_credit+0xb8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d81a      	bhi.n	8000caa <decrease_credit+0x9e>
			credit_consume_counter = 0;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <decrease_credit+0xb8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"Consuming 1 credit\r\n", 20,HAL_MAX_DELAY);
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	2214      	movs	r2, #20
 8000c80:	4914      	ldr	r1, [pc, #80]	; (8000cd4 <decrease_credit+0xc8>)
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <decrease_credit+0xc0>)
 8000c84:	f003 fead 	bl	80049e2 <HAL_UART_Transmit>
			credit -= 1; // decrease money
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <decrease_credit+0xcc>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <decrease_credit+0xcc>)
 8000c94:	801a      	strh	r2, [r3, #0]
			if(credit <= 0){
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <decrease_credit+0xcc>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <decrease_credit+0x9e>
				credit = 0;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <decrease_credit+0xcc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
				reset_all_state();
 8000ca6:	f7ff ff75 	bl	8000b94 <reset_all_state>
			}
		}
		store_credit_eeprom(credit);
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <decrease_credit+0xcc>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fce9 	bl	8000688 <store_credit_eeprom>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000d4 	.word	0x200000d4
 8000cc4:	200000da 	.word	0x200000da
 8000cc8:	08005604 	.word	0x08005604
 8000ccc:	200001e4 	.word	0x200001e4
 8000cd0:	200000d0 	.word	0x200000d0
 8000cd4:	08005620 	.word	0x08005620
 8000cd8:	200000ce 	.word	0x200000ce

08000cdc <do_1sec_tick>:
void do_1sec_tick(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart1, (uint8_t*)"1sec tick\r\n", 11,HAL_MAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce6:	220b      	movs	r2, #11
 8000ce8:	4926      	ldr	r1, [pc, #152]	; (8000d84 <do_1sec_tick+0xa8>)
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <do_1sec_tick+0xac>)
 8000cec:	f003 fe79 	bl	80049e2 <HAL_UART_Transmit>
	char tmp_msg[35];
	sprintf(tmp_msg,"#### current credit: %d, mode: %d\r\n",credit,pressed_button);
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <do_1sec_tick+0xb0>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <do_1sec_tick+0xb4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	1d38      	adds	r0, r7, #4
 8000d00:	4924      	ldr	r1, [pc, #144]	; (8000d94 <do_1sec_tick+0xb8>)
 8000d02:	f004 f80b 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa1f 	bl	800014c <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	1d39      	adds	r1, r7, #4
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d18:	481b      	ldr	r0, [pc, #108]	; (8000d88 <do_1sec_tick+0xac>)
 8000d1a:	f003 fe62 	bl	80049e2 <HAL_UART_Transmit>
	decrease_credit(); // logic runner funtion
 8000d1e:	f7ff ff75 	bl	8000c0c <decrease_credit>
	iot_round_counter += 1;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <do_1sec_tick+0xbc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <do_1sec_tick+0xbc>)
 8000d2a:	6013      	str	r3, [r2, #0]
	if(iot_round_counter >= IOT_SEND_INTERVAL){
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <do_1sec_tick+0xbc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	dd23      	ble.n	8000d7c <do_1sec_tick+0xa0>
		max7219_DisableDisplayTest(); /// keep disable display test to prevent 888
 8000d34:	f000 fe0c 	bl	8001950 <max7219_DisableDisplayTest>
		iot_round_counter = 0;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <do_1sec_tick+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
		send_iot_status(0);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fbc4 	bl	80004cc <send_iot_status>
		if(last_coin_money != 0){
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <do_1sec_tick+0xc0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <do_1sec_tick+0x84>
			send_iot_status(last_coin_money);
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <do_1sec_tick+0xc0>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fbb9 	bl	80004cc <send_iot_status>
			last_coin_money = 0;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <do_1sec_tick+0xc0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		}
		if(last_note_money != 0){
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <do_1sec_tick+0xc4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <do_1sec_tick+0xa0>
			send_iot_status(last_note_money);
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <do_1sec_tick+0xc4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fbab 	bl	80004cc <send_iot_status>
			last_note_money = 0;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <do_1sec_tick+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08005638 	.word	0x08005638
 8000d88:	200001e4 	.word	0x200001e4
 8000d8c:	200000ce 	.word	0x200000ce
 8000d90:	200000d0 	.word	0x200000d0
 8000d94:	08005644 	.word	0x08005644
 8000d98:	200000c8 	.word	0x200000c8
 8000d9c:	200000dc 	.word	0x200000dc
 8000da0:	200000db 	.word	0x200000db

08000da4 <do_500ms_tick>:

void do_500ms_tick(){
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <do_200ms_tick>:
void do_200ms_tick(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(front_button_reset_credit_press){
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <do_200ms_tick+0x38>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <do_200ms_tick+0x1e>
		front_button_reset_credit_counter += 1;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <do_200ms_tick+0x3c>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <do_200ms_tick+0x3c>)
 8000dca:	801a      	strh	r2, [r3, #0]
 8000dcc:	e002      	b.n	8000dd4 <do_200ms_tick+0x24>
	}else{
		front_button_reset_credit_counter = 0;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <do_200ms_tick+0x3c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	801a      	strh	r2, [r3, #0]
	}
	//	char tmp_msg[35];
	//	sprintf(tmp_msg,"===== front button counter: %d\r\n",front_button_reset_credit_counter);
	//	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
	if(is_standby){
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <do_200ms_tick+0x40>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <do_200ms_tick+0x32>
		segment_display_standby();
 8000dde:	f000 fa59 	bl	8001294 <segment_display_standby>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000d6 	.word	0x200000d6
 8000dec:	200000d8 	.word	0x200000d8
 8000df0:	20000000 	.word	0x20000000

08000df4 <do_300ms_tick>:
void do_300ms_tick(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	store_credit_eeprom(credit);
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <do_300ms_tick+0x20>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fc42 	bl	8000688 <store_credit_eeprom>
	HAL_GPIO_TogglePin(ALIVE_LED_GPIO_Port, ALIVE_LED_Pin);
 8000e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <do_300ms_tick+0x24>)
 8000e0a:	f001 fda8 	bl	800295e <HAL_GPIO_TogglePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000ce 	.word	0x200000ce
 8000e18:	40010800 	.word	0x40010800

08000e1c <do_400ms_tick>:

void do_400ms_tick(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	if(is_operation_running){
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <do_400ms_tick+0x64>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d025      	beq.n	8000e76 <do_400ms_tick+0x5a>
		display_binking = !display_binking;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <do_400ms_tick+0x68>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <do_400ms_tick+0x68>)
 8000e48:	701a      	strb	r2, [r3, #0]
		if(display_binking && (current_out_port != 0)){
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <do_400ms_tick+0x68>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <do_400ms_tick+0x48>
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <do_400ms_tick+0x6c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <do_400ms_tick+0x48>
			max7219_Turn_Off();
 8000e5e:	f000 fdd7 	bl	8001a10 <max7219_Turn_Off>
		}

	}else{
		max7219_Turn_On();
	}
}
 8000e62:	e00a      	b.n	8000e7a <do_400ms_tick+0x5e>
			max7219_Turn_On();
 8000e64:	f000 fdca 	bl	80019fc <max7219_Turn_On>
			segment_display_int(credit);
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <do_400ms_tick+0x70>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f9e6 	bl	8001240 <segment_display_int>
}
 8000e74:	e001      	b.n	8000e7a <do_400ms_tick+0x5e>
		max7219_Turn_On();
 8000e76:	f000 fdc1 	bl	80019fc <max7219_Turn_On>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000cc 	.word	0x200000cc
 8000e84:	200000d5 	.word	0x200000d5
 8000e88:	200000d2 	.word	0x200000d2
 8000e8c:	200000ce 	.word	0x200000ce

08000e90 <init_display>:

void init_display(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8000e94:	f000 fd5c 	bl	8001950 <max7219_DisableDisplayTest>
	HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f001 fa1d 	bl	80022d8 <HAL_Delay>
	max7219_Init ( 5 );
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 fd2b 	bl	80018fa <max7219_Init>
	max7219_Decode_On ();
 8000ea4:	f000 fdbe 	bl	8001a24 <max7219_Decode_On>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <reset_all_pins>:
void reset_all_pins(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, GPIO_PIN_RESET); // pin b0 --> out 1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <reset_all_pins+0x58>)
 8000eb6:	f001 fd3a 	bl	800292e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, GPIO_PIN_RESET); // pin b1 --> out 2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <reset_all_pins+0x58>)
 8000ec0:	f001 fd35 	bl	800292e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, GPIO_PIN_RESET); // pin a8 --> out 3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <reset_all_pins+0x5c>)
 8000ecc:	f001 fd2f 	bl	800292e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, GPIO_PIN_RESET); // pin b8 --> out 4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <reset_all_pins+0x58>)
 8000ed8:	f001 fd29 	bl	800292e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_5_GPIO_Port, OUT_5_Pin, GPIO_PIN_RESET); // pin b9 --> out 5
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <reset_all_pins+0x58>)
 8000ee4:	f001 fd23 	bl	800292e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_6_GPIO_Port, OUT_6_Pin, GPIO_PIN_RESET); // pin b12 --> out 6
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <reset_all_pins+0x58>)
 8000ef0:	f001 fd1d 	bl	800292e <HAL_GPIO_WritePin>
	current_out_port = 0;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <reset_all_pins+0x60>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	enable_exti();
 8000efa:	f7ff fabf 	bl	800047c <enable_exti>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	200000d2 	.word	0x200000d2

08000f10 <set_output_to>:

void set_output_to(uint8_t pin){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(current_out_port == pin){
 8000f1a:	4b40      	ldr	r3, [pc, #256]	; (800101c <set_output_to+0x10c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d076      	beq.n	8001014 <set_output_to+0x104>
		return;
	}
	reset_all_pins();
 8000f26:	f7ff ffc1 	bl	8000eac <reset_all_pins>
	disable_exti();  //// to prevent noise from relay
 8000f2a:	f7ff fa8d 	bl	8000448 <disable_exti>
	char tmp_msg[50];
	sprintf(tmp_msg, ">>>>>>>> SET OUTPUT => %d \r\n", (int)pin);
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	493a      	ldr	r1, [pc, #232]	; (8001020 <set_output_to+0x110>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 fef0 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f903 	bl	800014c <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f107 0108 	add.w	r1, r7, #8
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f52:	4834      	ldr	r0, [pc, #208]	; (8001024 <set_output_to+0x114>)
 8000f54:	f003 fd45 	bl	80049e2 <HAL_UART_Transmit>
	switch(pin){
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d843      	bhi.n	8000fe8 <set_output_to+0xd8>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <set_output_to+0x58>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000f8f 	.word	0x08000f8f
 8000f70:	08000fa1 	.word	0x08000fa1
 8000f74:	08000fb5 	.word	0x08000fb5
 8000f78:	08000fd5 	.word	0x08000fd5
	case 1:
		HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, GPIO_PIN_SET); // pin b0 --> out 1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <set_output_to+0x118>)
 8000f82:	f001 fcd4 	bl	800292e <HAL_GPIO_WritePin>
		current_out_port = 1;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <set_output_to+0x10c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT1\r\n", 21,HAL_MAX_DELAY);
		break;
 8000f8c:	e032      	b.n	8000ff4 <set_output_to+0xe4>
	case 2:
		HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, GPIO_PIN_SET); // pin b1 --> out 2
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2102      	movs	r1, #2
 8000f92:	4825      	ldr	r0, [pc, #148]	; (8001028 <set_output_to+0x118>)
 8000f94:	f001 fccb 	bl	800292e <HAL_GPIO_WritePin>
		current_out_port = 2;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <set_output_to+0x10c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT2\r\n", 21,HAL_MAX_DELAY);
		break;
 8000f9e:	e029      	b.n	8000ff4 <set_output_to+0xe4>
	case 3:
		HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, GPIO_PIN_SET); // pin a8 --> out 3
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <set_output_to+0x11c>)
 8000fa8:	f001 fcc1 	bl	800292e <HAL_GPIO_WritePin>
		current_out_port = 3;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <set_output_to+0x10c>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT3\r\n", 21,HAL_MAX_DELAY);
		break;
 8000fb2:	e01f      	b.n	8000ff4 <set_output_to+0xe4>
	case 4:
		HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, GPIO_PIN_SET); // pin b8 --> out 4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <set_output_to+0x118>)
 8000fbc:	f001 fcb7 	bl	800292e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_6_GPIO_Port, OUT_6_Pin, GPIO_PIN_SET); // pin b12 --> out 6
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4818      	ldr	r0, [pc, #96]	; (8001028 <set_output_to+0x118>)
 8000fc8:	f001 fcb1 	bl	800292e <HAL_GPIO_WritePin>
		current_out_port = 4;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <set_output_to+0x10c>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT4\r\n", 21,HAL_MAX_DELAY);
		break;
 8000fd2:	e00f      	b.n	8000ff4 <set_output_to+0xe4>
	case 5:
		HAL_GPIO_WritePin(OUT_5_GPIO_Port, OUT_5_Pin, GPIO_PIN_SET); // pin b9 --> out 5
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <set_output_to+0x118>)
 8000fdc:	f001 fca7 	bl	800292e <HAL_GPIO_WritePin>
		current_out_port = 5;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <set_output_to+0x10c>)
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT5\r\n", 21,HAL_MAX_DELAY);
		break;
 8000fe6:	e005      	b.n	8000ff4 <set_output_to+0xe4>
	default:
		reset_all_pins();
 8000fe8:	f7ff ff60 	bl	8000eac <reset_all_pins>
		current_out_port = 0;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <set_output_to+0x10c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
		break;
 8000ff2:	bf00      	nop
	}
	int i=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0; i<2000000;i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ffc:	e003      	b.n	8001006 <set_output_to+0xf6>
		asm("NOP");
 8000ffe:	bf00      	nop
	for(i=0; i<2000000;i++){
 8001000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001002:	3301      	adds	r3, #1
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <set_output_to+0x120>)
 800100a:	4293      	cmp	r3, r2
 800100c:	ddf7      	ble.n	8000ffe <set_output_to+0xee>
	}
	enable_exti();
 800100e:	f7ff fa35 	bl	800047c <enable_exti>
 8001012:	e000      	b.n	8001016 <set_output_to+0x106>
		return;
 8001014:	bf00      	nop
	//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
	//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
}
 8001016:	3740      	adds	r7, #64	; 0x40
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000d2 	.word	0x200000d2
 8001020:	08005668 	.word	0x08005668
 8001024:	200001e4 	.word	0x200001e4
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40010800 	.word	0x40010800
 8001030:	001e847f 	.word	0x001e847f

08001034 <do_operation>:

void do_operation(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	set_output_to(pressed_button);
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <do_operation+0x2c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff66 	bl	8000f10 <set_output_to>
	if(current_out_port != 0){
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <do_operation+0x30>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <do_operation+0x22>
		consume_credit = true;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <do_operation+0x34>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
	}else{
		consume_credit = false;
	}
}
 8001054:	e002      	b.n	800105c <do_operation+0x28>
		consume_credit = false;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <do_operation+0x34>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000d0 	.word	0x200000d0
 8001064:	200000d2 	.word	0x200000d2
 8001068:	200000d4 	.word	0x200000d4

0800106c <read_button>:

uint8_t read_button(){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(FRONT_SW_1_GPIO_Port, FRONT_SW_1_Pin)){
 8001070:	2108      	movs	r1, #8
 8001072:	4868      	ldr	r0, [pc, #416]	; (8001214 <read_button+0x1a8>)
 8001074:	f001 fc44 	bl	8002900 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d013      	beq.n	80010a6 <read_button+0x3a>
		HAL_Delay(SW_DEBOUNCE_TIME);
 800107e:	205a      	movs	r0, #90	; 0x5a
 8001080:	f001 f92a 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_1_GPIO_Port, FRONT_SW_1_Pin));
 8001084:	bf00      	nop
 8001086:	2108      	movs	r1, #8
 8001088:	4862      	ldr	r0, [pc, #392]	; (8001214 <read_button+0x1a8>)
 800108a:	f001 fc39 	bl	8002900 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f8      	bne.n	8001086 <read_button+0x1a>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button1!\r\n", 18,HAL_MAX_DELAY);
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001098:	2212      	movs	r2, #18
 800109a:	495f      	ldr	r1, [pc, #380]	; (8001218 <read_button+0x1ac>)
 800109c:	485f      	ldr	r0, [pc, #380]	; (800121c <read_button+0x1b0>)
 800109e:	f003 fca0 	bl	80049e2 <HAL_UART_Transmit>
		return 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0b3      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_2_GPIO_Port, FRONT_SW_2_Pin)){
 80010a6:	2110      	movs	r1, #16
 80010a8:	485a      	ldr	r0, [pc, #360]	; (8001214 <read_button+0x1a8>)
 80010aa:	f001 fc29 	bl	8002900 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <read_button+0x70>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80010b4:	205a      	movs	r0, #90	; 0x5a
 80010b6:	f001 f90f 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_2_GPIO_Port, FRONT_SW_2_Pin));
 80010ba:	bf00      	nop
 80010bc:	2110      	movs	r1, #16
 80010be:	4855      	ldr	r0, [pc, #340]	; (8001214 <read_button+0x1a8>)
 80010c0:	f001 fc1e 	bl	8002900 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f8      	bne.n	80010bc <read_button+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button2!\r\n", 18,HAL_MAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	2212      	movs	r2, #18
 80010d0:	4953      	ldr	r1, [pc, #332]	; (8001220 <read_button+0x1b4>)
 80010d2:	4852      	ldr	r0, [pc, #328]	; (800121c <read_button+0x1b0>)
 80010d4:	f003 fc85 	bl	80049e2 <HAL_UART_Transmit>
		return 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	e098      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_3_GPIO_Port, FRONT_SW_3_Pin)){
 80010dc:	2120      	movs	r1, #32
 80010de:	484d      	ldr	r0, [pc, #308]	; (8001214 <read_button+0x1a8>)
 80010e0:	f001 fc0e 	bl	8002900 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d013      	beq.n	8001112 <read_button+0xa6>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80010ea:	205a      	movs	r0, #90	; 0x5a
 80010ec:	f001 f8f4 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_3_GPIO_Port, FRONT_SW_3_Pin));
 80010f0:	bf00      	nop
 80010f2:	2120      	movs	r1, #32
 80010f4:	4847      	ldr	r0, [pc, #284]	; (8001214 <read_button+0x1a8>)
 80010f6:	f001 fc03 	bl	8002900 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f8      	bne.n	80010f2 <read_button+0x86>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button3!\r\n", 18,HAL_MAX_DELAY);
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	2212      	movs	r2, #18
 8001106:	4947      	ldr	r1, [pc, #284]	; (8001224 <read_button+0x1b8>)
 8001108:	4844      	ldr	r0, [pc, #272]	; (800121c <read_button+0x1b0>)
 800110a:	f003 fc6a 	bl	80049e2 <HAL_UART_Transmit>
		return 3;
 800110e:	2303      	movs	r3, #3
 8001110:	e07d      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_4_GPIO_Port, FRONT_SW_4_Pin)){
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	483f      	ldr	r0, [pc, #252]	; (8001214 <read_button+0x1a8>)
 8001116:	f001 fbf3 	bl	8002900 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <read_button+0xdc>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8001120:	205a      	movs	r0, #90	; 0x5a
 8001122:	f001 f8d9 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_4_GPIO_Port, FRONT_SW_4_Pin));
 8001126:	bf00      	nop
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	483a      	ldr	r0, [pc, #232]	; (8001214 <read_button+0x1a8>)
 800112c:	f001 fbe8 	bl	8002900 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f8      	bne.n	8001128 <read_button+0xbc>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button4!\r\n", 18,HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	2212      	movs	r2, #18
 800113c:	493a      	ldr	r1, [pc, #232]	; (8001228 <read_button+0x1bc>)
 800113e:	4837      	ldr	r0, [pc, #220]	; (800121c <read_button+0x1b0>)
 8001140:	f003 fc4f 	bl	80049e2 <HAL_UART_Transmit>
		return 4;
 8001144:	2304      	movs	r3, #4
 8001146:	e062      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <read_button+0x1a8>)
 800114c:	f001 fbd8 	bl	8002900 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <read_button+0x130>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8001156:	205a      	movs	r0, #90	; 0x5a
 8001158:	f001 f8be 	bl	80022d8 <HAL_Delay>
		front_button_reset_credit_press = true;
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <read_button+0x1c0>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 8001162:	e008      	b.n	8001176 <read_button+0x10a>
			if(front_button_reset_credit_counter >= 60){
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <read_button+0x1c4>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b3b      	cmp	r3, #59	; 0x3b
 800116c:	d903      	bls.n	8001176 <read_button+0x10a>
				reset_all_state();
 800116e:	f7ff fd11 	bl	8000b94 <reset_all_state>
				return 0;
 8001172:	2300      	movs	r3, #0
 8001174:	e04b      	b.n	800120e <read_button+0x1a2>
		while(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4826      	ldr	r0, [pc, #152]	; (8001214 <read_button+0x1a8>)
 800117a:	f001 fbc1 	bl	8002900 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ef      	bne.n	8001164 <read_button+0xf8>
			}
		}
		front_button_reset_credit_press = false;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <read_button+0x1c0>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button5!\r\n", 18,HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118e:	2212      	movs	r2, #18
 8001190:	4928      	ldr	r1, [pc, #160]	; (8001234 <read_button+0x1c8>)
 8001192:	4822      	ldr	r0, [pc, #136]	; (800121c <read_button+0x1b0>)
 8001194:	f003 fc25 	bl	80049e2 <HAL_UART_Transmit>
		return 5;
 8001198:	2305      	movs	r3, #5
 800119a:	e038      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(CREDIT_RESET_GPIO_Port, CREDIT_RESET_Pin)){
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <read_button+0x1a8>)
 80011a2:	f001 fbad 	bl	8002900 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d014      	beq.n	80011d6 <read_button+0x16a>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80011ac:	205a      	movs	r0, #90	; 0x5a
 80011ae:	f001 f893 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(CREDIT_RESET_GPIO_Port, CREDIT_RESET_Pin));
 80011b2:	bf00      	nop
 80011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <read_button+0x1a8>)
 80011ba:	f001 fba1 	bl	8002900 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f7      	bne.n	80011b4 <read_button+0x148>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button credit reset!\r\n", 30,HAL_MAX_DELAY);
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c8:	221e      	movs	r2, #30
 80011ca:	491b      	ldr	r1, [pc, #108]	; (8001238 <read_button+0x1cc>)
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <read_button+0x1b0>)
 80011ce:	f003 fc08 	bl	80049e2 <HAL_UART_Transmit>
		return 6;
 80011d2:	2306      	movs	r3, #6
 80011d4:	e01b      	b.n	800120e <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)){
 80011d6:	2104      	movs	r1, #4
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <read_button+0x1a8>)
 80011da:	f001 fb91 	bl	8002900 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <read_button+0x1a0>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80011e4:	205a      	movs	r0, #90	; 0x5a
 80011e6:	f001 f877 	bl	80022d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin));
 80011ea:	bf00      	nop
 80011ec:	2104      	movs	r1, #4
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <read_button+0x1a8>)
 80011f0:	f001 fb86 	bl	8002900 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f8      	bne.n	80011ec <read_button+0x180>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button mode!\r\n", 22,HAL_MAX_DELAY);
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fe:	2216      	movs	r2, #22
 8001200:	490e      	ldr	r1, [pc, #56]	; (800123c <read_button+0x1d0>)
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <read_button+0x1b0>)
 8001204:	f003 fbed 	bl	80049e2 <HAL_UART_Transmit>
		return 7;
 8001208:	2307      	movs	r3, #7
 800120a:	e000      	b.n	800120e <read_button+0x1a2>
	}else{
		return 0;
 800120c:	2300      	movs	r3, #0
	}
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010800 	.word	0x40010800
 8001218:	08005688 	.word	0x08005688
 800121c:	200001e4 	.word	0x200001e4
 8001220:	0800569c 	.word	0x0800569c
 8001224:	080056b0 	.word	0x080056b0
 8001228:	080056c4 	.word	0x080056c4
 800122c:	200000d6 	.word	0x200000d6
 8001230:	200000d8 	.word	0x200000d8
 8001234:	080056d8 	.word	0x080056d8
 8001238:	080056ec 	.word	0x080056ec
 800123c:	0800570c 	.word	0x0800570c

08001240 <segment_display_int>:

void segment_display_int(int number){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	max7219_Turn_Off();
 8001248:	f000 fbe2 	bl	8001a10 <max7219_Turn_Off>
	max7219_Init(5);
 800124c:	2005      	movs	r0, #5
 800124e:	f000 fb54 	bl	80018fa <max7219_Init>
	max7219_Clean ();
 8001252:	f000 fb85 	bl	8001960 <max7219_Clean>
	max7219_Decode_On();
 8001256:	f000 fbe5 	bl	8001a24 <max7219_Decode_On>
	max7219_Clean ();
 800125a:	f000 fb81 	bl	8001960 <max7219_Clean>
	if(number < 10){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b09      	cmp	r3, #9
 8001262:	dc04      	bgt.n	800126e <segment_display_int+0x2e>
		max7219_PrintItos (DIGIT_1, number );
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	2001      	movs	r0, #1
 8001268:	f000 fc46 	bl	8001af8 <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 800126c:	e00e      	b.n	800128c <segment_display_int+0x4c>
	}else if(number >= 10 && number < 100){
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b09      	cmp	r3, #9
 8001272:	dd07      	ble.n	8001284 <segment_display_int+0x44>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b63      	cmp	r3, #99	; 0x63
 8001278:	dc04      	bgt.n	8001284 <segment_display_int+0x44>
		max7219_PrintItos (DIGIT_2, number );
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2002      	movs	r0, #2
 800127e:	f000 fc3b 	bl	8001af8 <max7219_PrintItos>
}
 8001282:	e003      	b.n	800128c <segment_display_int+0x4c>
		max7219_PrintItos (DIGIT_3, number );
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	2003      	movs	r0, #3
 8001288:	f000 fc36 	bl	8001af8 <max7219_PrintItos>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <segment_display_standby>:
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}

void segment_display_standby(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	max7219_Clean ();
 8001298:	f000 fb62 	bl	8001960 <max7219_Clean>
	max7219_Decode_On();
 800129c:	f000 fbc2 	bl	8001a24 <max7219_Decode_On>
	max7219_Clean ();
 80012a0:	f000 fb5e 	bl	8001960 <max7219_Clean>

	switch(standby_counter){
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <segment_display_standby+0xf4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d84a      	bhi.n	8001344 <segment_display_standby+0xb0>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <segment_display_standby+0x20>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012e5 	.word	0x080012e5
 80012bc:	08001305 	.word	0x08001305
 80012c0:	08001325 	.word	0x08001325
	case 0:
		max7219_PrintDigit(DIGIT_1,MINUS,false);
 80012c4:	2200      	movs	r2, #0
 80012c6:	210a      	movs	r1, #10
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 fbbb 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 80012ce:	2200      	movs	r2, #0
 80012d0:	210f      	movs	r1, #15
 80012d2:	2002      	movs	r0, #2
 80012d4:	f000 fbb6 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 80012d8:	2200      	movs	r2, #0
 80012da:	210f      	movs	r1, #15
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 fbb1 	bl	8001a44 <max7219_PrintDigit>
		break;
 80012e2:	e03f      	b.n	8001364 <segment_display_standby+0xd0>
	case 1:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 80012e4:	2200      	movs	r2, #0
 80012e6:	210f      	movs	r1, #15
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 fbab 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210a      	movs	r1, #10
 80012f2:	2002      	movs	r0, #2
 80012f4:	f000 fba6 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 80012f8:	2200      	movs	r2, #0
 80012fa:	210f      	movs	r1, #15
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 fba1 	bl	8001a44 <max7219_PrintDigit>
		break;
 8001302:	e02f      	b.n	8001364 <segment_display_standby+0xd0>
	case 2:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 8001304:	2200      	movs	r2, #0
 8001306:	210f      	movs	r1, #15
 8001308:	2001      	movs	r0, #1
 800130a:	f000 fb9b 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	2002      	movs	r0, #2
 8001314:	f000 fb96 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,MINUS,false);
 8001318:	2200      	movs	r2, #0
 800131a:	210a      	movs	r1, #10
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fb91 	bl	8001a44 <max7219_PrintDigit>
		break;
 8001322:	e01f      	b.n	8001364 <segment_display_standby+0xd0>
	case 3:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 8001324:	2200      	movs	r2, #0
 8001326:	210f      	movs	r1, #15
 8001328:	2001      	movs	r0, #1
 800132a:	f000 fb8b 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 800132e:	2200      	movs	r2, #0
 8001330:	210a      	movs	r1, #10
 8001332:	2002      	movs	r0, #2
 8001334:	f000 fb86 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 8001338:	2200      	movs	r2, #0
 800133a:	210f      	movs	r1, #15
 800133c:	2003      	movs	r0, #3
 800133e:	f000 fb81 	bl	8001a44 <max7219_PrintDigit>
		break;
 8001342:	e00f      	b.n	8001364 <segment_display_standby+0xd0>
	default:
		max7219_PrintDigit(DIGIT_1,MINUS,false);
 8001344:	2200      	movs	r2, #0
 8001346:	210a      	movs	r1, #10
 8001348:	2001      	movs	r0, #1
 800134a:	f000 fb7b 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 800134e:	2200      	movs	r2, #0
 8001350:	210a      	movs	r1, #10
 8001352:	2002      	movs	r0, #2
 8001354:	f000 fb76 	bl	8001a44 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,MINUS,false);
 8001358:	2200      	movs	r2, #0
 800135a:	210a      	movs	r1, #10
 800135c:	2003      	movs	r0, #3
 800135e:	f000 fb71 	bl	8001a44 <max7219_PrintDigit>
		break;
 8001362:	bf00      	nop
	}
	if(standby_counter >= 3){
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <segment_display_standby+0xf4>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d903      	bls.n	8001376 <segment_display_standby+0xe2>
		standby_counter = 0;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <segment_display_standby+0xf4>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	}else{
		standby_counter += 1;
	}

}
 8001374:	e006      	b.n	8001384 <segment_display_standby+0xf0>
		standby_counter += 1;
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <segment_display_standby+0xf4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <segment_display_standby+0xf4>)
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000d3 	.word	0x200000d3

0800138c <add_bank_note_credit>:

void add_bank_note_credit(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
	if (true) {
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <add_bank_note_credit+0xf4>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4939      	ldr	r1, [pc, #228]	; (8001484 <add_bank_note_credit+0xf8>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fcbb 	bl	8004d1c <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe fece 	bl	800014c <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013bc:	4832      	ldr	r0, [pc, #200]	; (8001488 <add_bank_note_credit+0xfc>)
 80013be:	f003 fb10 	bl	80049e2 <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <add_bank_note_credit+0xf4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <add_bank_note_credit+0x100>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <add_bank_note_credit+0x100>)
 80013d6:	801a      	strh	r2, [r3, #0]
		iot_round_counter = 0;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <add_bank_note_credit+0x104>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
		last_note_money += bank_credit_per_pulse;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <add_bank_note_credit+0xf4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <add_bank_note_credit+0x108>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <add_bank_note_credit+0x108>)
 80013f0:	701a      	strb	r2, [r3, #0]
		if(credit >= 999){
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <add_bank_note_credit+0x100>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d903      	bls.n	8001408 <add_bank_note_credit+0x7c>
			credit = 999;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <add_bank_note_credit+0x100>)
 8001402:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001406:	801a      	strh	r2, [r3, #0]
		}
		store_credit_eeprom(credit);
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <add_bank_note_credit+0x100>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f93a 	bl	8000688 <store_credit_eeprom>
		max7219_Turn_On();
 8001414:	f000 faf2 	bl	80019fc <max7219_Turn_On>
		segment_display_int(credit);
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <add_bank_note_credit+0x100>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff0e 	bl	8001240 <segment_display_int>
		is_standby = false;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <add_bank_note_credit+0x10c>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
		if (credit >= minimum_credit_to_start) {
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <add_bank_note_credit+0x100>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <add_bank_note_credit+0x110>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	db09      	blt.n	800144e <add_bank_note_credit+0xc2>
			is_operation_running = true;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <add_bank_note_credit+0x114>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	2219      	movs	r2, #25
 8001446:	4917      	ldr	r1, [pc, #92]	; (80014a4 <add_bank_note_credit+0x118>)
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <add_bank_note_credit+0xfc>)
 800144a:	f003 faca 	bl	80049e2 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <add_bank_note_credit+0x100>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4913      	ldr	r1, [pc, #76]	; (80014a8 <add_bank_note_credit+0x11c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fc5e 	bl	8004d1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe fe72 	bl	800014c <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <add_bank_note_credit+0xfc>)
 8001474:	f003 fab5 	bl	80049e2 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}
}
 8001478:	bf00      	nop
 800147a:	3750      	adds	r7, #80	; 0x50
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000006 	.word	0x20000006
 8001484:	08005724 	.word	0x08005724
 8001488:	200001e4 	.word	0x200001e4
 800148c:	200000ce 	.word	0x200000ce
 8001490:	200000c8 	.word	0x200000c8
 8001494:	200000db 	.word	0x200000db
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	200000cc 	.word	0x200000cc
 80014a4:	0800573c 	.word	0x0800573c
 80014a8:	08005758 	.word	0x08005758

080014ac <add_coin_credit>:

void add_coin_credit() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
	if (true) {
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <add_coin_credit+0xc4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	463b      	mov	r3, r7
 80014bc:	492d      	ldr	r1, [pc, #180]	; (8001574 <add_coin_credit+0xc8>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fc2c 	bl	8004d1c <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80014c4:	463b      	mov	r3, r7
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fe40 	bl	800014c <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4639      	mov	r1, r7
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	4828      	ldr	r0, [pc, #160]	; (8001578 <add_coin_credit+0xcc>)
 80014d8:	f003 fa83 	bl	80049e2 <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <add_coin_credit+0xc4>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <add_coin_credit+0xd0>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <add_coin_credit+0xd0>)
 80014f0:	801a      	strh	r2, [r3, #0]
		iot_round_counter = 0;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <add_coin_credit+0xd4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
		last_coin_money += coin_credit_per_pulse;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <add_coin_credit+0xc4>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <add_coin_credit+0xd8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <add_coin_credit+0xd8>)
 800150a:	701a      	strb	r2, [r3, #0]
		if(credit >= 999){
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <add_coin_credit+0xd0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001516:	4293      	cmp	r3, r2
 8001518:	d903      	bls.n	8001522 <add_coin_credit+0x76>
			credit = 999;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <add_coin_credit+0xd0>)
 800151c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001520:	801a      	strh	r2, [r3, #0]
		}
		store_credit_eeprom(credit);
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <add_coin_credit+0xd0>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f8ad 	bl	8000688 <store_credit_eeprom>
		is_standby = false;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <add_coin_credit+0xdc>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 8001534:	f000 fa62 	bl	80019fc <max7219_Turn_On>
		segment_display_int(credit);
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <add_coin_credit+0xd0>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe7e 	bl	8001240 <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <add_coin_credit+0xd0>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <add_coin_credit+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	db09      	blt.n	8001568 <add_coin_credit+0xbc>
			is_operation_running = true;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <add_coin_credit+0xe4>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155e:	2219      	movs	r2, #25
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <add_coin_credit+0xe8>)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <add_coin_credit+0xcc>)
 8001564:	f003 fa3d 	bl	80049e2 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
	}
}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000007 	.word	0x20000007
 8001574:	08005724 	.word	0x08005724
 8001578:	200001e4 	.word	0x200001e4
 800157c:	200000ce 	.word	0x200000ce
 8001580:	200000c8 	.word	0x200000c8
 8001584:	200000dc 	.word	0x200000dc
 8001588:	20000000 	.word	0x20000000
 800158c:	20000008 	.word	0x20000008
 8001590:	200000cc 	.word	0x200000cc
 8001594:	0800573c 	.word	0x0800573c

08001598 <read_credit_eeprom>:

uint16_t read_credit_eeprom(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	uint8_t hbits = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 800159e:	2106      	movs	r1, #6
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <read_credit_eeprom+0x38>)
 80015a2:	f002 fb55 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	uint8_t lbits = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7);
 80015aa:	2107      	movs	r1, #7
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <read_credit_eeprom+0x38>)
 80015ae:	f002 fb4f 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71bb      	strb	r3, [r7, #6]
	u_int16_t converted_value = (lbits << 8) | hbits;
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	80bb      	strh	r3, [r7, #4]
	return converted_value;
 80015c6:	88bb      	ldrh	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000ec 	.word	0x200000ec

080015d4 <read_settings_from_eeprom>:
void read_settings_from_eeprom(void){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80015da:	2101      	movs	r1, #1
 80015dc:	4890      	ldr	r0, [pc, #576]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80015de:	f002 fb37 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b8f      	ldr	r3, [pc, #572]	; (8001824 <read_settings_from_eeprom+0x250>)
 80015e8:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80015ea:	2102      	movs	r1, #2
 80015ec:	488c      	ldr	r0, [pc, #560]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80015ee:	f002 fb2f 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <read_settings_from_eeprom+0x254>)
 80015f8:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80015fa:	2103      	movs	r1, #3
 80015fc:	4888      	ldr	r0, [pc, #544]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80015fe:	f002 fb27 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 8001602:	4603      	mov	r3, r0
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <read_settings_from_eeprom+0x258>)
 8001608:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 800160a:	2104      	movs	r1, #4
 800160c:	4884      	ldr	r0, [pc, #528]	; (8001820 <read_settings_from_eeprom+0x24c>)
 800160e:	f002 fb1f 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 8001612:	4603      	mov	r3, r0
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b86      	ldr	r3, [pc, #536]	; (8001830 <read_settings_from_eeprom+0x25c>)
 8001618:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 800161a:	2105      	movs	r1, #5
 800161c:	4880      	ldr	r0, [pc, #512]	; (8001820 <read_settings_from_eeprom+0x24c>)
 800161e:	f002 fb17 	bl	8003c50 <HAL_RTCEx_BKUPRead>
 8001622:	4603      	mov	r3, r0
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <read_settings_from_eeprom+0x260>)
 8001628:	701a      	strb	r2, [r3, #0]
	credit = read_credit_eeprom();
 800162a:	f7ff ffb5 	bl	8001598 <read_credit_eeprom>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <read_settings_from_eeprom+0x264>)
 8001634:	801a      	strh	r2, [r3, #0]
	//	if(HAL_GPIO_ReadPin(USER_SEL_GPIO_Port, USER_SEL_Pin) == GPIO_PIN_SET){
	//		credit = 999;
	//	}
	if(credit >= 2){
 8001636:	4b80      	ldr	r3, [pc, #512]	; (8001838 <read_settings_from_eeprom+0x264>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d90c      	bls.n	800165a <read_settings_from_eeprom+0x86>
		is_operation_running = true;
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <read_settings_from_eeprom+0x268>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
		is_standby = false;
 8001646:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <read_settings_from_eeprom+0x26c>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
		consume_credit = false;
 800164c:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <read_settings_from_eeprom+0x270>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
		credit_consume_counter = 0;
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <read_settings_from_eeprom+0x274>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e001      	b.n	800165e <read_settings_from_eeprom+0x8a>

	}else{
		reset_all_state();
 800165a:	f7ff fa9b 	bl	8000b94 <reset_all_state>
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 800165e:	4b71      	ldr	r3, [pc, #452]	; (8001824 <read_settings_from_eeprom+0x250>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4978      	ldr	r1, [pc, #480]	; (800184c <read_settings_from_eeprom+0x278>)
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fb56 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fd6a 	bl	800014c <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	1d39      	adds	r1, r7, #4
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001682:	4873      	ldr	r0, [pc, #460]	; (8001850 <read_settings_from_eeprom+0x27c>)
 8001684:	f003 f9ad 	bl	80049e2 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 8001688:	4b67      	ldr	r3, [pc, #412]	; (8001828 <read_settings_from_eeprom+0x254>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4970      	ldr	r1, [pc, #448]	; (8001854 <read_settings_from_eeprom+0x280>)
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fb41 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fd55 	bl	800014c <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	1d39      	adds	r1, r7, #4
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ac:	4868      	ldr	r0, [pc, #416]	; (8001850 <read_settings_from_eeprom+0x27c>)
 80016ae:	f003 f998 	bl	80049e2 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <read_settings_from_eeprom+0x258>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4966      	ldr	r1, [pc, #408]	; (8001858 <read_settings_from_eeprom+0x284>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fb2c 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fd40 	bl	800014c <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	1d39      	adds	r1, r7, #4
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d6:	485e      	ldr	r0, [pc, #376]	; (8001850 <read_settings_from_eeprom+0x27c>)
 80016d8:	f003 f983 	bl	80049e2 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 80016dc:	4b54      	ldr	r3, [pc, #336]	; (8001830 <read_settings_from_eeprom+0x25c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	495d      	ldr	r1, [pc, #372]	; (800185c <read_settings_from_eeprom+0x288>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fb17 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fd2b 	bl	800014c <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	1d39      	adds	r1, r7, #4
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001700:	4853      	ldr	r0, [pc, #332]	; (8001850 <read_settings_from_eeprom+0x27c>)
 8001702:	f003 f96e 	bl	80049e2 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 8001706:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <read_settings_from_eeprom+0x260>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4953      	ldr	r1, [pc, #332]	; (8001860 <read_settings_from_eeprom+0x28c>)
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fb02 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd16 	bl	800014c <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	1d39      	adds	r1, r7, #4
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	4849      	ldr	r0, [pc, #292]	; (8001850 <read_settings_from_eeprom+0x27c>)
 800172c:	f003 f959 	bl	80049e2 <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <read_settings_from_eeprom+0x264>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	494a      	ldr	r1, [pc, #296]	; (8001864 <read_settings_from_eeprom+0x290>)
 800173c:	4618      	mov	r0, r3
 800173e:	f003 faed 	bl	8004d1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd01 	bl	800014c <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	1d39      	adds	r1, r7, #4
 8001750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001754:	483e      	ldr	r0, [pc, #248]	; (8001850 <read_settings_from_eeprom+0x27c>)
 8001756:	f003 f944 	bl	80049e2 <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <read_settings_from_eeprom+0x250>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <read_settings_from_eeprom+0x1b8>
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <read_settings_from_eeprom+0x254>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00e      	beq.n	800178c <read_settings_from_eeprom+0x1b8>
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <read_settings_from_eeprom+0x258>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <read_settings_from_eeprom+0x1b8>
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <read_settings_from_eeprom+0x25c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <read_settings_from_eeprom+0x1b8>
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <read_settings_from_eeprom+0x260>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d140      	bne.n	800180e <read_settings_from_eeprom+0x23a>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <read_settings_from_eeprom+0x294>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	2101      	movs	r1, #1
 8001796:	4822      	ldr	r0, [pc, #136]	; (8001820 <read_settings_from_eeprom+0x24c>)
 8001798:	f002 fa40 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <read_settings_from_eeprom+0x294>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	2102      	movs	r1, #2
 80017a6:	481e      	ldr	r0, [pc, #120]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80017a8:	f002 fa38 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	2103      	movs	r1, #3
 80017b6:	481a      	ldr	r0, [pc, #104]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80017b8:	f002 fa30 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	2104      	movs	r1, #4
 80017c6:	4816      	ldr	r0, [pc, #88]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80017c8:	f002 fa28 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	2105      	movs	r1, #5
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <read_settings_from_eeprom+0x24c>)
 80017d8:	f002 fa20 	bl	8003c1c <HAL_RTCEx_BKUPWrite>
		F1_DURATION = default_credit_duration;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <read_settings_from_eeprom+0x250>)
 80017e4:	701a      	strb	r2, [r3, #0]
		F2_DURATION = default_credit_duration;
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <read_settings_from_eeprom+0x254>)
 80017ee:	701a      	strb	r2, [r3, #0]
		F3_DURATION = default_credit_duration;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <read_settings_from_eeprom+0x258>)
 80017f8:	701a      	strb	r2, [r3, #0]
		F4_DURATION = default_credit_duration;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <read_settings_from_eeprom+0x294>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <read_settings_from_eeprom+0x25c>)
 8001802:	701a      	strb	r2, [r3, #0]
		F5_DURATION = default_credit_duration;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <read_settings_from_eeprom+0x294>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <read_settings_from_eeprom+0x260>)
 800180c:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(300);
 800180e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001812:	f000 fd61 	bl	80022d8 <HAL_Delay>
}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000ec 	.word	0x200000ec
 8001824:	20000001 	.word	0x20000001
 8001828:	20000002 	.word	0x20000002
 800182c:	20000003 	.word	0x20000003
 8001830:	20000004 	.word	0x20000004
 8001834:	20000005 	.word	0x20000005
 8001838:	200000ce 	.word	0x200000ce
 800183c:	200000cc 	.word	0x200000cc
 8001840:	20000000 	.word	0x20000000
 8001844:	200000d4 	.word	0x200000d4
 8001848:	200000da 	.word	0x200000da
 800184c:	08005770 	.word	0x08005770
 8001850:	200001e4 	.word	0x200001e4
 8001854:	08005790 	.word	0x08005790
 8001858:	080057b0 	.word	0x080057b0
 800185c:	080057d0 	.word	0x080057d0
 8001860:	080057f0 	.word	0x080057f0
 8001864:	08005810 	.word	0x08005810
 8001868:	2000000c 	.word	0x2000000c

0800186c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b096      	sub	sp, #88	; 0x58
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
	char tmp[80];
	if(GPIO_Pin == COIN_IT_Pin){
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d115      	bne.n	80018a8 <HAL_GPIO_EXTI_Callback+0x3c>
		//This block will be triggered after pin activated.
		sprintf(tmp,"\n----------\ntriggered from  COIN_IT_Pin\n----------\r\n");
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4918      	ldr	r1, [pc, #96]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x78>)
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fa4a 	bl	8004d1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)tmp, strlen(tmp), HAL_MAX_DELAY);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5d 	bl	800014c <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189e:	4812      	ldr	r0, [pc, #72]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018a0:	f003 f89f 	bl	80049e2 <HAL_UART_Transmit>
		add_coin_credit();
 80018a4:	f7ff fe02 	bl	80014ac <add_coin_credit>
	}
	if(GPIO_Pin == BANK_IT_Pin){
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	d115      	bne.n	80018da <HAL_GPIO_EXTI_Callback+0x6e>
		//This block will be triggered after pin activated.
		sprintf(tmp,"\n----------\ntriggered from  BANK_IT_Pin\n----------\r\n");
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_GPIO_EXTI_Callback+0x80>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 fa31 	bl	8004d1c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)tmp, strlen(tmp), HAL_MAX_DELAY);
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fc44 	bl	800014c <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f107 0108 	add.w	r1, r7, #8
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018d2:	f003 f886 	bl	80049e2 <HAL_UART_Transmit>
		add_bank_note_credit();
 80018d6:	f7ff fd59 	bl	800138c <add_bank_note_credit>
	}
}
 80018da:	bf00      	nop
 80018dc:	3758      	adds	r7, #88	; 0x58
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800582c 	.word	0x0800582c
 80018e8:	200001e4 	.word	0x200001e4
 80018ec:	08005864 	.word	0x08005864

080018f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>

080018fa <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_Off();
 8001904:	f000 f884 	bl	8001a10 <max7219_Turn_Off>
	max7219_DisableDisplayTest();
 8001908:	f000 f822 	bl	8001950 <max7219_DisableDisplayTest>
	max7219_Turn_On();
 800190c:	f000 f876 	bl	80019fc <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001910:	2107      	movs	r1, #7
 8001912:	200b      	movs	r0, #11
 8001914:	f000 f848 	bl	80019a8 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f806 	bl	800192c <max7219_SetIntensivity>
	max7219_Clean();
 8001920:	f000 f81e 	bl	8001960 <max7219_Clean>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d805      	bhi.n	8001948 <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4619      	mov	r1, r3
 8001940:	200a      	movs	r0, #10
 8001942:	f000 f831 	bl	80019a8 <max7219_SendData>
 8001946:	e000      	b.n	800194a <max7219_SetIntensivity+0x1e>
		return;
 8001948:	bf00      	nop
}
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <max7219_DisableDisplayTest>:

void max7219_DisableDisplayTest()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	max7219_SendData(REG_DISPLAY_TEST, REG_NO_OP);
 8001954:	2100      	movs	r1, #0
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f826 	bl	80019a8 <max7219_SendData>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <max7219_Clean>:

void max7219_Clean()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <max7219_Clean+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d101      	bne.n	8001976 <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001972:	230f      	movs	r3, #15
 8001974:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	e00b      	b.n	8001994 <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f80d 	bl	80019a8 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b07      	cmp	r3, #7
 8001998:	ddf0      	ble.n	800197c <max7219_Clean+0x1c>
	}
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200000de 	.word	0x200000de

080019a8 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <max7219_SendData+0x4c>)
 80019c0:	f000 ffb5 	bl	800292e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 80019c4:	1df9      	adds	r1, r7, #7
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ca:	2201      	movs	r2, #1
 80019cc:	480a      	ldr	r0, [pc, #40]	; (80019f8 <max7219_SendData+0x50>)
 80019ce:	f002 f9df 	bl	8003d90 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80019d2:	1db9      	adds	r1, r7, #6
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d8:	2201      	movs	r2, #1
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <max7219_SendData+0x50>)
 80019dc:	f002 f9d8 	bl	8003d90 <HAL_SPI_Transmit>
	CS_RESET();
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <max7219_SendData+0x4c>)
 80019e8:	f000 ffa1 	bl	800292e <HAL_GPIO_WritePin>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	20000100 	.word	0x20000100

080019fc <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001a00:	f7ff ffa6 	bl	8001950 <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001a04:	2101      	movs	r1, #1
 8001a06:	200c      	movs	r0, #12
 8001a08:	f7ff ffce 	bl	80019a8 <max7219_SendData>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001a14:	f7ff ff9c 	bl	8001950 <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	200c      	movs	r0, #12
 8001a1c:	f7ff ffc4 	bl	80019a8 <max7219_SendData>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <max7219_Decode_On+0x1c>)
 8001a2a:	22ff      	movs	r2, #255	; 0xff
 8001a2c:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <max7219_Decode_On+0x1c>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	2009      	movs	r0, #9
 8001a36:	f7ff ffb7 	bl	80019a8 <max7219_SendData>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000de 	.word	0x200000de

08001a44 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	4613      	mov	r3, r2
 8001a54:	717b      	strb	r3, [r7, #5]
	max7219_DisableDisplayTest();
 8001a56:	f7ff ff7b 	bl	8001950 <max7219_DisableDisplayTest>
	if(position > NUMBER_OF_DIGITS)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d844      	bhi.n	8001aea <max7219_PrintDigit+0xa6>
	{
		return;
	}

	if(point)
 8001a60:	797b      	ldrb	r3, [r7, #5]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d020      	beq.n	8001aa8 <max7219_PrintDigit+0x64>
	{
		if(decodeMode == 0x00)
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <max7219_PrintDigit+0xb0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10e      	bne.n	8001a8c <max7219_PrintDigit+0x48>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f8bb 	bl	8001bec <getSymbol>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff8f 	bl	80019a8 <max7219_SendData>
 8001a8a:	e02f      	b.n	8001aec <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <max7219_PrintDigit+0xb0>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d12b      	bne.n	8001aec <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff81 	bl	80019a8 <max7219_SendData>
 8001aa6:	e021      	b.n	8001aec <max7219_PrintDigit+0xa8>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <max7219_PrintDigit+0xb0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <max7219_PrintDigit+0x8a>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f89a 	bl	8001bec <getSymbol>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff6e 	bl	80019a8 <max7219_SendData>
 8001acc:	e00e      	b.n	8001aec <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <max7219_PrintDigit+0xb0>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d10a      	bne.n	8001aec <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff60 	bl	80019a8 <max7219_SendData>
 8001ae8:	e000      	b.n	8001aec <max7219_PrintDigit+0xa8>
		return;
 8001aea:	bf00      	nop
		}
	}
}
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000de 	.word	0x200000de

08001af8 <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
	max7219_DisableDisplayTest();
 8001b04:	f7ff ff24 	bl	8001950 <max7219_DisableDisplayTest>
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8001b08:	21ff      	movs	r1, #255	; 0xff
 8001b0a:	2009      	movs	r0, #9
 8001b0c:	f7ff ff4c 	bl	80019a8 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da0d      	bge.n	8001b32 <max7219_PrintItos+0x3a>
	{
		if(position > 0)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <max7219_PrintItos+0x34>
		{
			max7219_SendData(position, MINUS);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	210a      	movs	r1, #10
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff41 	bl	80019a8 <max7219_SendData>
			position--;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	425b      	negs	r3, r3
 8001b30:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 8001b36:	e005      	b.n	8001b44 <max7219_PrintItos+0x4c>
	{
		i *= 10;
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	dcf3      	bgt.n	8001b38 <max7219_PrintItos+0x40>
	}

	if(position > 0)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <max7219_PrintItos+0x78>
	{
		max7219_SendData(position, value/i);
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff1f 	bl	80019a8 <max7219_SendData>
		position--;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <max7219_PrintItos+0xec>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	1092      	asrs	r2, r2, #2
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8001b80:	e022      	b.n	8001bc8 <max7219_PrintItos+0xd0>
	{
		if(position > 0)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d017      	beq.n	8001bb8 <max7219_PrintItos+0xc0>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b9a:	fb02 f201 	mul.w	r2, r2, r1
 8001b9e:	1a9a      	subs	r2, r3, r2
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fefb 	bl	80019a8 <max7219_SendData>
			position--;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <max7219_PrintItos+0xec>)
 8001bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc0:	1092      	asrs	r2, r2, #2
 8001bc2:	17db      	asrs	r3, r3, #31
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	dcd9      	bgt.n	8001b82 <max7219_PrintItos+0x8a>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <max7219_PrintItos+0xf0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2009      	movs	r0, #9
 8001bd6:	f7ff fee7 	bl	80019a8 <max7219_SendData>

	return position;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	66666667 	.word	0x66666667
 8001be8:	200000de 	.word	0x200000de

08001bec <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <getSymbol+0x1c>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	b29b      	uxth	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000010 	.word	0x20000010

08001c0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2100      	movs	r1, #0
 8001c16:	460a      	mov	r2, r1
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <MX_RTC_Init+0x90>)
 8001c26:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c36:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c3a:	f001 fc61 	bl	8003500 <HAL_RTC_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001c44:	f7ff fe54 	bl	80018f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2201      	movs	r2, #1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480f      	ldr	r0, [pc, #60]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c5c:	f001 fce6 	bl	800362c <HAL_RTC_SetTime>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001c66:	f7ff fe43 	bl	80018f0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_RTC_Init+0x8c>)
 8001c82:	f001 fd6b 	bl	800375c <HAL_RTC_SetDate>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001c8c:	f7ff fe30 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200000ec 	.word	0x200000ec
 8001c9c:	40002800 	.word	0x40002800

08001ca0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_RTC_MspInit+0x3c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d110      	bne.n	8001cd4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001cb2:	f000 fe85 	bl	80029c0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RTC_MspInit+0x40>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RTC_MspInit+0x40>)
 8001cbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RTC_MspInit+0x40>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RTC_MspInit+0x44>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40002800 	.word	0x40002800
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	4242043c 	.word	0x4242043c

08001ce8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <MX_SPI2_Init+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d34:	220a      	movs	r2, #10
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <MX_SPI2_Init+0x64>)
 8001d3a:	f001 ffa5 	bl	8003c88 <HAL_SPI_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d44:	f7ff fdd4 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000100 	.word	0x20000100
 8001d50:	40003800 	.word	0x40003800

08001d54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_SPI_MspInit+0x74>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d124      	bne.n	8001dbe <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7e:	61d3      	str	r3, [r2, #28]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_SPI_MspInit+0x78>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001da4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_SPI_MspInit+0x7c>)
 8001dba:	f000 fc1d 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40003800 	.word	0x40003800
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_MspInit+0x5c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_MspInit+0x5c>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_MspInit+0x5c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_MspInit+0x5c>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_MspInit+0x60>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_MspInit+0x60>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f000 fa0f 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e8a:	2010      	movs	r0, #16
 8001e8c:	f000 fd80 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e98:	2020      	movs	r0, #32
 8001e9a:	f000 fd79 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <TIM2_IRQHandler+0x10>)
 8001eaa:	f002 f9f5 	bl	8004298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000158 	.word	0x20000158

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f002 fee6 	bl	8004cb8 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20005000 	.word	0x20005000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	200000e0 	.word	0x200000e0
 8001f20:	20000240 	.word	0x20000240

08001f24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	463b      	mov	r3, r7
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f56:	2277      	movs	r2, #119	; 0x77
 8001f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5999;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f62:	f241 726f 	movw	r2, #5999	; 0x176f
 8001f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f74:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f76:	f002 f8ed 	bl	8004154 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f80:	f7ff fcb6 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001f92:	f002 fa89 	bl	80044a8 <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f9c:	f7ff fca8 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM2_Init+0x94>)
 8001fae:	f002 fc5b 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fb8:	f7ff fc9a 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000158 	.word	0x20000158

08001fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d113      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_TIM_Base_MspInit+0x44>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <HAL_TIM_Base_MspInit+0x44>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_TIM_Base_MspInit+0x44>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201c      	movs	r0, #28
 8001ff8:	f000 faab 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f000 fac4 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <MX_USART1_UART_Init+0x50>)
 8002018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <MX_USART1_UART_Init+0x4c>)
 800201c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_USART1_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002036:	220c      	movs	r2, #12
 8002038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_USART1_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART1_UART_Init+0x4c>)
 8002048:	f002 fc7e 	bl	8004948 <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002052:	f7ff fc4d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200001e4 	.word	0x200001e4
 8002060:	40013800 	.word	0x40013800

08002064 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <MX_USART3_UART_Init+0x50>)
 800206c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 8002070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_USART3_UART_Init+0x4c>)
 800209c:	f002 fc54 	bl	8004948 <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020a6:	f7ff fc23 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200001a0 	.word	0x200001a0
 80020b4:	40004800 	.word	0x40004800

080020b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_UART_MspInit+0xfc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d132      	bne.n	800213e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_UART_MspInit+0x100>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4619      	mov	r1, r3
 800211c:	4827      	ldr	r0, [pc, #156]	; (80021bc <HAL_UART_MspInit+0x104>)
 800211e:	f000 fa6b 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4619      	mov	r1, r3
 8002136:	4821      	ldr	r0, [pc, #132]	; (80021bc <HAL_UART_MspInit+0x104>)
 8002138:	f000 fa5e 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800213c:	e036      	b.n	80021ac <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_UART_MspInit+0x108>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d131      	bne.n	80021ac <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_UART_MspInit+0x100>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <HAL_UART_MspInit+0x100>)
 800214e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_UART_MspInit+0x100>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_UART_MspInit+0x100>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_UART_MspInit+0x100>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_UART_MspInit+0x100>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4619      	mov	r1, r3
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <HAL_UART_MspInit+0x10c>)
 800218e:	f000 fa33 	bl	80025f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0318 	add.w	r3, r7, #24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <HAL_UART_MspInit+0x10c>)
 80021a8:	f000 fa26 	bl	80025f8 <HAL_GPIO_Init>
}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010800 	.word	0x40010800
 80021c0:	40004800 	.word	0x40004800
 80021c4:	40010c00 	.word	0x40010c00

080021c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ee:	f7ff fe99 	bl	8001f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f002 fd67 	bl	8004cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021f6:	f7fe f859 	bl	80002ac <main>
  bx lr
 80021fa:	4770      	bx	lr
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002204:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8002208:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800220c:	2000023c 	.word	0x2000023c

08002210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC1_2_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x28>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x28>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f989 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	200f      	movs	r0, #15
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fdd0 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f9af 	bl	80025c2 <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800227c:	f000 f969 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000028 	.word	0x20000028
 8002298:	20000030 	.word	0x20000030
 800229c:	2000002c 	.word	0x2000002c

080022a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_IncTick+0x1c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x20>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_IncTick+0x20>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000030 	.word	0x20000030
 80022c0:	20000228 	.word	0x20000228

080022c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_GetTick+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000228 	.word	0x20000228

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffe0 	bl	80022c4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000030 	.word	0x20000030

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4906      	ldr	r1, [pc, #24]	; (80023b8 <__NVIC_EnableIRQ+0x34>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db12      	blt.n	80023f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	490a      	ldr	r1, [pc, #40]	; (8002400 <__NVIC_DisableIRQ+0x44>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	3320      	adds	r3, #32
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023e8:	f3bf 8f4f 	dsb	sy
}
 80023ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023ee:	f3bf 8f6f 	isb	sy
}
 80023f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0c      	blt.n	8002430 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_ClearPendingIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251c:	f7ff ff90 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff feeb 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff00 	bl	8002368 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff90 	bl	8002494 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5f 	bl	8002440 <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fef3 	bl	8002384 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff01 	bl	80023bc <__NVIC_DisableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff94 	bl	80024f8 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff0b 	bl	8002404 <__NVIC_ClearPendingIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	e169      	b.n	80028e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800260c:	2201      	movs	r2, #1
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8158 	bne.w	80028da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a9a      	ldr	r2, [pc, #616]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002634:	4a98      	ldr	r2, [pc, #608]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d875      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800263a:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_GPIO_Init+0x2a4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d058      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002640:	4a96      	ldr	r2, [pc, #600]	; (800289c <HAL_GPIO_Init+0x2a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d86f      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002646:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d052      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 800264c:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d869      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04c      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002658:	4a92      	ldr	r2, [pc, #584]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d863      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800265e:	4a92      	ldr	r2, [pc, #584]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d046      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002664:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d85d      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800266a:	2b12      	cmp	r3, #18
 800266c:	d82a      	bhi.n	80026c4 <HAL_GPIO_Init+0xcc>
 800266e:	2b12      	cmp	r3, #18
 8002670:	d859      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_GPIO_Init+0x80>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026cd 	.word	0x080026cd
 8002680:	080026df 	.word	0x080026df
 8002684:	08002721 	.word	0x08002721
 8002688:	08002727 	.word	0x08002727
 800268c:	08002727 	.word	0x08002727
 8002690:	08002727 	.word	0x08002727
 8002694:	08002727 	.word	0x08002727
 8002698:	08002727 	.word	0x08002727
 800269c:	08002727 	.word	0x08002727
 80026a0:	08002727 	.word	0x08002727
 80026a4:	08002727 	.word	0x08002727
 80026a8:	08002727 	.word	0x08002727
 80026ac:	08002727 	.word	0x08002727
 80026b0:	08002727 	.word	0x08002727
 80026b4:	08002727 	.word	0x08002727
 80026b8:	08002727 	.word	0x08002727
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	4a79      	ldr	r2, [pc, #484]	; (80028ac <HAL_GPIO_Init+0x2b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ca:	e02c      	b.n	8002726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e029      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	3304      	adds	r3, #4
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e024      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	3308      	adds	r3, #8
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e01f      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	330c      	adds	r3, #12
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e01a      	b.n	8002728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026fa:	2304      	movs	r3, #4
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e013      	b.n	8002728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002708:	2308      	movs	r3, #8
 800270a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	611a      	str	r2, [r3, #16]
          break;
 8002712:	e009      	b.n	8002728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002714:	2308      	movs	r3, #8
 8002716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	615a      	str	r2, [r3, #20]
          break;
 800271e:	e003      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x130>
          break;
 8002726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	d801      	bhi.n	8002732 <HAL_GPIO_Init+0x13a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_Init+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d802      	bhi.n	8002744 <HAL_GPIO_Init+0x14c>
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x152>
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3b08      	subs	r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	210f      	movs	r1, #15
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80b1 	beq.w	80028da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002778:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_GPIO_Init+0x2c0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <HAL_GPIO_Init+0x2c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3e      	ldr	r2, [pc, #248]	; (80028c0 <HAL_GPIO_Init+0x2c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x1e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <HAL_GPIO_Init+0x2cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_Init+0x1e0>
 80027d4:	2303      	movs	r3, #3
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027d8:	2304      	movs	r3, #4
 80027da:	e004      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027dc:	2302      	movs	r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e4:	2300      	movs	r3, #0
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	f002 0203 	and.w	r2, r2, #3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4093      	lsls	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027f6:	492f      	ldr	r1, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	492c      	ldr	r1, [pc, #176]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4928      	ldr	r1, [pc, #160]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	491e      	ldr	r1, [pc, #120]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	4914      	ldr	r1, [pc, #80]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
 8002894:	e021      	b.n	80028da <HAL_GPIO_Init+0x2e2>
 8002896:	bf00      	nop
 8002898:	10320000 	.word	0x10320000
 800289c:	10310000 	.word	0x10310000
 80028a0:	10220000 	.word	0x10220000
 80028a4:	10210000 	.word	0x10210000
 80028a8:	10120000 	.word	0x10120000
 80028ac:	10110000 	.word	0x10110000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4909      	ldr	r1, [pc, #36]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f ae8e 	bne.w	800260c <HAL_GPIO_Init+0x14>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	372c      	adds	r7, #44	; 0x2c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e001      	b.n	8002922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293e:	787b      	ldrb	r3, [r7, #1]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294a:	e003      	b.n	8002954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	041a      	lsls	r2, r3, #16
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43d9      	mvns	r1, r3
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	400b      	ands	r3, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff5c 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	420e0020 	.word	0x420e0020

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e26c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8087 	beq.w	8002b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
 8002a10:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x12c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e246      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x76>
 8002a40:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbc>
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a94:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fc06 	bl	80022c4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff fc02 	bl	80022c4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1fa      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xe4>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fbf2 	bl	80022c4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fbee 	bl	80022c4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1e6      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x10c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1ba      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4939      	ldr	r1, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fba7 	bl	80022c4 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fba3 	bl	80022c4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e19b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4927      	ldr	r1, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fb86 	bl	80022c4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fb82 	bl	80022c4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e17a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fb66 	bl	80022c4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7ff fb62 	bl	80022c4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e15a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 fad8 	bl	80031d0 <RCC_Delay>
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7ff fb4c 	bl	80022c4 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7ff fb48 	bl	80022c4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e140      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	42420000 	.word	0x42420000
 8002c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b9e      	ldr	r3, [pc, #632]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a6 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b97      	ldr	r3, [pc, #604]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7ff fb09 	bl	80022c4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7ff fb05 	bl	80022c4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0fd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x334>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x356>
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff fab9 	bl	80022c4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff fab5 	bl	80022c4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ab      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x37e>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff faa3 	bl	80022c4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff fa9f 	bl	80022c4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e095      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8081 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d061      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d146      	bne.n	8002e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7ff fa73 	bl	80022c4 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7ff fa6f 	bl	80022c4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	492d      	ldr	r1, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a19      	ldr	r1, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fa43 	bl	80022c4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff fa3f 	bl	80022c4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e037      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
 8002e60:	e02f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fa2c 	bl	80022c4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff fa28 	bl	80022c4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x498>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7ff f97c 	bl	80022c4 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7ff f978 	bl	80022c4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e053      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f8da 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	080058bc 	.word	0x080058bc
 80030a4:	20000028 	.word	0x20000028
 80030a8:	2000002c 	.word	0x2000002c

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b490      	push	{r4, r7}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b4:	1d3c      	adds	r4, r7, #4
 80030b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030bc:	f240 2301 	movw	r3, #513	; 0x201
 80030c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x46>
 80030ea:	e02d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ee:	623b      	str	r3, [r7, #32]
      break;
 80030f0:	e02d      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003104:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	fb02 f203 	mul.w	r2, r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	623b      	str	r3, [r7, #32]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	623b      	str	r3, [r7, #32]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6a3b      	ldr	r3, [r7, #32]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc90      	pop	{r4, r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800589c 	.word	0x0800589c
 8003160:	40021000 	.word	0x40021000
 8003164:	007a1200 	.word	0x007a1200
 8003168:	003d0900 	.word	0x003d0900

0800316c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <HAL_RCC_GetHCLKFreq+0x10>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	20000028 	.word	0x20000028

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff2 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080058cc 	.word	0x080058cc

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffde 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0adb      	lsrs	r3, r3, #11
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	080058cc 	.word	0x080058cc

080031d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <RCC_Delay+0x34>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <RCC_Delay+0x38>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a5b      	lsrs	r3, r3, #9
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031ec:	bf00      	nop
  }
  while (Delay --);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <RCC_Delay+0x1c>
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000028 	.word	0x20000028
 8003208:	10624dd3 	.word	0x10624dd3

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d07d      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	61d3      	str	r3, [r2, #28]
 8003244:	4b49      	ldr	r3, [pc, #292]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d118      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003260:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326c:	f7ff f82a 	bl	80022c4 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7ff f826 	bl	80022c4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e06d      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d027      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fff5 	bl	80022c4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fff1 	bl	80022c4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e036      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	4313      	orrs	r3, r2
 8003310:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4904      	ldr	r1, [pc, #16]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420440 	.word	0x42420440

08003378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b08d      	sub	sp, #52	; 0x34
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003380:	4b5a      	ldr	r3, [pc, #360]	; (80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003382:	f107 040c 	add.w	r4, r7, #12
 8003386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800338c:	f240 2301 	movw	r3, #513	; 0x201
 8003390:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	f200 8091 	bhi.w	80034d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d04c      	beq.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d07c      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033c0:	e089      	b.n	80034d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80033c2:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033c8:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8082 	beq.w	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033e8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f4:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c5b      	lsrs	r3, r3, #17
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003402:	4413      	add	r3, r2
 8003404:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003414:	4a37      	ldr	r2, [pc, #220]	; (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	fbb2 f2f3 	udiv	r2, r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003424:	e004      	b.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343c:	d102      	bne.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003442:	e04a      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003452:	e042      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003454:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d108      	bne.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 8003476:	e01f      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003490:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	e00f      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a2:	d11c      	bne.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80034b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034b6:	e012      	b.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80034b8:	e011      	b.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034ba:	f7ff fe75 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0b9b      	lsrs	r3, r3, #14
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034de:	bf00      	nop
    }
  }
  return (frequency);
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3734      	adds	r7, #52	; 0x34
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd90      	pop	{r4, r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080058ac 	.word	0x080058ac
 80034f0:	40021000 	.word	0x40021000
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	003d0900 	.word	0x003d0900
 80034fc:	aaaaaaab 	.word	0xaaaaaaab

08003500 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e084      	b.n	8003620 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7c5b      	ldrb	r3, [r3, #17]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe fbba 	bl	8001ca0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9c8 	bl	80038c8 <HAL_RTC_WaitForSynchro>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2204      	movs	r2, #4
 8003542:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06b      	b.n	8003620 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fa81 	bl	8003a50 <RTC_EnterInitMode>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2204      	movs	r2, #4
 8003558:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e060      	b.n	8003620 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0207 	bic.w	r2, r2, #7
 800356c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RTC_Init+0x128>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_RTC_Init+0x128>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_RTC_Init+0x128>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4926      	ldr	r1, [pc, #152]	; (8003628 <HAL_RTC_Init+0x128>)
 8003590:	4313      	orrs	r3, r2
 8003592:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359c:	d003      	beq.n	80035a6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e00e      	b.n	80035c4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7ff fee6 	bl	8003378 <HAL_RCCEx_GetPeriphCLKFreq>
 80035ac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e030      	b.n	8003620 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 010f 	bic.w	r1, r3, #15
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0c1a      	lsrs	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	b291      	uxth	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa55 	bl	8003aa0 <RTC_ExitInitMode>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00c      	b.n	8003620 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40006c00 	.word	0x40006c00

0800362c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_RTC_SetTime+0x20>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e080      	b.n	8003752 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	7c1b      	ldrb	r3, [r3, #16]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_RTC_SetTime+0x30>
 8003658:	2302      	movs	r3, #2
 800365a:	e07a      	b.n	8003752 <HAL_RTC_SetTime+0x126>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003678:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	4619      	mov	r1, r3
 8003682:	460b      	mov	r3, r1
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a5b      	subs	r3, r3, r1
 8003688:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800368a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003690:	4413      	add	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e01e      	b.n	80036d4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fa28 	bl	8003af0 <RTC_Bcd2ToByte>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036a8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fa1d 	bl	8003af0 <RTC_Bcd2ToByte>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036c2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	789b      	ldrb	r3, [r3, #2]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fa11 	bl	8003af0 <RTC_Bcd2ToByte>
 80036ce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036d0:	4423      	add	r3, r4
 80036d2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f953 	bl	8003982 <RTC_WriteTimeCounter>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2204      	movs	r2, #4
 80036e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e02f      	b.n	8003752 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0205 	bic.w	r2, r2, #5
 8003700:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f964 	bl	80039d0 <RTC_ReadAlarmCounter>
 8003708:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003710:	d018      	beq.n	8003744 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	429a      	cmp	r2, r3
 8003718:	d214      	bcs.n	8003744 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003720:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003724:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f96a 	bl	8003a02 <RTC_WriteAlarmCounter>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2204      	movs	r2, #4
 8003738:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e006      	b.n	8003752 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}
	...

0800375c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RTC_SetDate+0x24>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e097      	b.n	80038b4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	7c1b      	ldrb	r3, [r3, #16]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_RTC_SetDate+0x34>
 800378c:	2302      	movs	r3, #2
 800378e:	e091      	b.n	80038b4 <HAL_RTC_SetDate+0x158>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2202      	movs	r2, #2
 800379a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	78da      	ldrb	r2, [r3, #3]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	785a      	ldrb	r2, [r3, #1]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	789a      	ldrb	r2, [r3, #2]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	739a      	strb	r2, [r3, #14]
 80037ba:	e01a      	b.n	80037f2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	78db      	ldrb	r3, [r3, #3]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f995 	bl	8003af0 <RTC_Bcd2ToByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f98c 	bl	8003af0 <RTC_Bcd2ToByte>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	789b      	ldrb	r3, [r3, #2]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f983 	bl	8003af0 <RTC_Bcd2ToByte>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	7bdb      	ldrb	r3, [r3, #15]
 80037f6:	4618      	mov	r0, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	7b59      	ldrb	r1, [r3, #13]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	7b9b      	ldrb	r3, [r3, #14]
 8003800:	461a      	mov	r2, r3
 8003802:	f000 f993 	bl	8003b2c <RTC_WeekDayNum>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	7b1a      	ldrb	r2, [r3, #12]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f883 	bl	8003922 <RTC_ReadTimeCounter>
 800381c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4a26      	ldr	r2, [pc, #152]	; (80038bc <HAL_RTC_SetDate+0x160>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0adb      	lsrs	r3, r3, #11
 8003828:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b18      	cmp	r3, #24
 800382e:	d93a      	bls.n	80038a6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_RTC_SetDate+0x164>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_RTC_SetDate+0x168>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f89a 	bl	8003982 <RTC_WriteTimeCounter>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2204      	movs	r2, #4
 8003858:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e027      	b.n	80038b4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f8b3 	bl	80039d0 <RTC_ReadAlarmCounter>
 800386a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003872:	d018      	beq.n	80038a6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	429a      	cmp	r2, r3
 800387a:	d214      	bcs.n	80038a6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003882:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003886:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003888:	69b9      	ldr	r1, [r7, #24]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8b9 	bl	8003a02 <RTC_WriteAlarmCounter>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2204      	movs	r2, #4
 800389a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e006      	b.n	80038b4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	91a2b3c5 	.word	0x91a2b3c5
 80038c0:	aaaaaaab 	.word	0xaaaaaaab
 80038c4:	00015180 	.word	0x00015180

080038c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01d      	b.n	800391a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80038ee:	f7fe fce9 	bl	80022c4 <HAL_GetTick>
 80038f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038f4:	e009      	b.n	800390a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038f6:	f7fe fce5 	bl	80022c4 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003904:	d901      	bls.n	800390a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e007      	b.n	800391a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ee      	beq.n	80038f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	827b      	strh	r3, [r7, #18]
 800392e:	2300      	movs	r3, #0
 8003930:	823b      	strh	r3, [r7, #16]
 8003932:	2300      	movs	r3, #0
 8003934:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003952:	8a7a      	ldrh	r2, [r7, #18]
 8003954:	8a3b      	ldrh	r3, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d008      	beq.n	800396c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800395a:	8a3b      	ldrh	r3, [r7, #16]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	b29b      	uxth	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e004      	b.n	8003976 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800396c:	8a7b      	ldrh	r3, [r7, #18]
 800396e:	041a      	lsls	r2, r3, #16
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003976:	697b      	ldr	r3, [r7, #20]
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f85d 	bl	8003a50 <RTC_EnterInitMode>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	e011      	b.n	80039c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	0c12      	lsrs	r2, r2, #16
 80039aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b292      	uxth	r2, r2
 80039b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f872 	bl	8003aa0 <RTC_ExitInitMode>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	81fb      	strh	r3, [r7, #14]
 80039dc:	2300      	movs	r3, #0
 80039de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	041a      	lsls	r2, r3, #16
 80039f4:	89bb      	ldrh	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f81d 	bl	8003a50 <RTC_EnterInitMode>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e011      	b.n	8003a46 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	0c12      	lsrs	r2, r2, #16
 8003a2a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b292      	uxth	r2, r2
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f832 	bl	8003aa0 <RTC_ExitInitMode>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a5c:	f7fe fc32 	bl	80022c4 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a62:	e009      	b.n	8003a78 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a64:	f7fe fc2e 	bl	80022c4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d901      	bls.n	8003a78 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00f      	b.n	8003a98 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ee      	beq.n	8003a64 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0210 	orr.w	r2, r2, #16
 8003a94:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0210 	bic.w	r2, r2, #16
 8003aba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003abc:	f7fe fc02 	bl	80022c4 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ac2:	e009      	b.n	8003ad8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ac4:	f7fe fbfe 	bl	80022c4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad2:	d901      	bls.n	8003ad8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e007      	b.n	8003ae8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b2db      	uxtb	r3, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b4a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d82d      	bhi.n	8003bae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <RTC_WeekDayNum+0xe4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	085a      	lsrs	r2, r3, #1
 8003b66:	78bb      	ldrb	r3, [r7, #2]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4926      	ldr	r1, [pc, #152]	; (8003c14 <RTC_WeekDayNum+0xe8>)
 8003b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	4922      	ldr	r1, [pc, #136]	; (8003c14 <RTC_WeekDayNum+0xe8>)
 8003b8a:	fba1 1303 	umull	r1, r3, r1, r3
 8003b8e:	09db      	lsrs	r3, r3, #7
 8003b90:	4413      	add	r3, r2
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <RTC_WeekDayNum+0xec>)
 8003b96:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9a:	1ad1      	subs	r1, r2, r3
 8003b9c:	0849      	lsrs	r1, r1, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	0899      	lsrs	r1, r3, #2
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e029      	b.n	8003c02 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <RTC_WeekDayNum+0xe4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	085a      	lsrs	r2, r3, #1
 8003bc2:	78bb      	ldrb	r3, [r7, #2]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	441a      	add	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4910      	ldr	r1, [pc, #64]	; (8003c14 <RTC_WeekDayNum+0xe8>)
 8003bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	490d      	ldr	r1, [pc, #52]	; (8003c14 <RTC_WeekDayNum+0xe8>)
 8003be0:	fba1 1303 	umull	r1, r3, r1, r3
 8003be4:	09db      	lsrs	r3, r3, #7
 8003be6:	4413      	add	r3, r2
 8003be8:	1c9a      	adds	r2, r3, #2
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <RTC_WeekDayNum+0xec>)
 8003bec:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf0:	1ad1      	subs	r1, r2, r3
 8003bf2:	0849      	lsrs	r1, r1, #1
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0899      	lsrs	r1, r3, #2
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	1a5b      	subs	r3, r3, r1
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	b2db      	uxtb	r3, r3
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	38e38e39 	.word	0x38e38e39
 8003c14:	51eb851f 	.word	0x51eb851f
 8003c18:	24924925 	.word	0x24924925

08003c1c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <HAL_RTCEx_BKUPWrite+0x30>)
 8003c2e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40006c00 	.word	0x40006c00

08003c50 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RTCEx_BKUPRead+0x34>)
 8003c64:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003c78:	68bb      	ldr	r3, [r7, #8]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40006c00 	.word	0x40006c00

08003c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e076      	b.n	8003d88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003caa:	d009      	beq.n	8003cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
 8003cb2:	e005      	b.n	8003cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe f83a 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	0c1a      	lsrs	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f002 0204 	and.w	r2, r2, #4
 8003d66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Transmit+0x22>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e126      	b.n	8004000 <HAL_SPI_Transmit+0x270>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dba:	f7fe fa83 	bl	80022c4 <HAL_GetTick>
 8003dbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd4:	e10b      	b.n	8003fee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Transmit+0x52>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de6:	e102      	b.n	8003fee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2203      	movs	r2, #3
 8003dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2e:	d10f      	bne.n	8003e50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d007      	beq.n	8003e6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d14b      	bne.n	8003f10 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_SPI_Transmit+0xf6>
 8003e80:	8afb      	ldrh	r3, [r7, #22]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d13e      	bne.n	8003f04 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eaa:	e02b      	b.n	8003f04 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d112      	bne.n	8003ee0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ede:	e011      	b.n	8003f04 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee0:	f7fe f9f0 	bl	80022c4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d803      	bhi.n	8003ef8 <HAL_SPI_Transmit+0x168>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef6:	d102      	bne.n	8003efe <HAL_SPI_Transmit+0x16e>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f02:	e074      	b.n	8003fee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ce      	bne.n	8003eac <HAL_SPI_Transmit+0x11c>
 8003f0e:	e04c      	b.n	8003faa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_Transmit+0x18e>
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d140      	bne.n	8003fa0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f44:	e02c      	b.n	8003fa0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d113      	bne.n	8003f7c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f7a:	e011      	b.n	8003fa0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7c:	f7fe f9a2 	bl	80022c4 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d803      	bhi.n	8003f94 <HAL_SPI_Transmit+0x204>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Transmit+0x20a>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f9e:	e026      	b.n	8003fee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1cd      	bne.n	8003f46 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8b2 	bl	8004118 <SPI_EndRxTxTransaction>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e000      	b.n	8003fee <HAL_SPI_Transmit+0x25e>
  }

error:
 8003fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004018:	f7fe f954 	bl	80022c4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	4413      	add	r3, r2
 8004026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004028:	f7fe f94c 	bl	80022c4 <HAL_GetTick>
 800402c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	015b      	lsls	r3, r3, #5
 8004034:	0d1b      	lsrs	r3, r3, #20
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403e:	e054      	b.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004046:	d050      	beq.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004048:	f7fe f93c 	bl	80022c4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	429a      	cmp	r2, r3
 8004056:	d902      	bls.n	800405e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d13d      	bne.n	80040da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800406c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004076:	d111      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004080:	d004      	beq.n	800408c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d107      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d10f      	bne.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e017      	b.n	800410a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4013      	ands	r3, r2
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	429a      	cmp	r2, r3
 8004106:	d19b      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000028 	.word	0x20000028

08004118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ff6a 	bl	8004008 <SPI_WaitFlagStateUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e000      	b.n	800414c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e041      	b.n	80041ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd ff24 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 fa70 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d001      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e03a      	b.n	8004282 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_TIM_Base_Start_IT+0x98>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_Base_Start_IT+0x58>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d009      	beq.n	800424c <HAL_TIM_Base_Start_IT+0x58>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <HAL_TIM_Base_Start_IT+0x9c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_Base_Start_IT+0x58>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_TIM_Base_Start_IT+0xa0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d111      	bne.n	8004270 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b06      	cmp	r3, #6
 800425c:	d010      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	e007      	b.n	8004280 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800

08004298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0202 	mvn.w	r2, #2
 80042c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9b1 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9a4 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9b3 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0204 	mvn.w	r2, #4
 8004318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f987 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f97a 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f989 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0208 	mvn.w	r2, #8
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f95d 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f950 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f95f 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2208      	movs	r2, #8
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f933 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f926 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f935 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10e      	bne.n	800441c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0201 	mvn.w	r2, #1
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc fafc 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b80      	cmp	r3, #128	; 0x80
 8004428:	d10e      	bne.n	8004448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d107      	bne.n	8004448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa77 	bl	8004936 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d10e      	bne.n	8004474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d107      	bne.n	8004474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8f9 	bl	8004666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0220 	mvn.w	r2, #32
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa42 	bl	8004924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIM_ConfigClockSource+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0b3      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x180>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f8:	d03e      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0xd0>
 80044fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fe:	f200 8087 	bhi.w	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004506:	f000 8085 	beq.w	8004614 <HAL_TIM_ConfigClockSource+0x16c>
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450e:	d87f      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d01a      	beq.n	800454a <HAL_TIM_ConfigClockSource+0xa2>
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d87b      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004518:	2b60      	cmp	r3, #96	; 0x60
 800451a:	d050      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x116>
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d877      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004520:	2b50      	cmp	r3, #80	; 0x50
 8004522:	d03c      	beq.n	800459e <HAL_TIM_ConfigClockSource+0xf6>
 8004524:	2b50      	cmp	r3, #80	; 0x50
 8004526:	d873      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d058      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x136>
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d86f      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004530:	2b30      	cmp	r3, #48	; 0x30
 8004532:	d064      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x156>
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d86b      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004538:	2b20      	cmp	r3, #32
 800453a:	d060      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x156>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d867      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05c      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x156>
 8004544:	2b10      	cmp	r3, #16
 8004546:	d05a      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004548:	e062      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6899      	ldr	r1, [r3, #8]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f000 f966 	bl	800482a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800456c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	609a      	str	r2, [r3, #8]
      break;
 8004576:	e04e      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6899      	ldr	r1, [r3, #8]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f000 f94f 	bl	800482a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800459a:	609a      	str	r2, [r3, #8]
      break;
 800459c:	e03b      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f000 f8c6 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2150      	movs	r1, #80	; 0x50
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f91d 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80045bc:	e02b      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f000 f8e4 	bl	8004798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2160      	movs	r1, #96	; 0x60
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f90d 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80045dc:	e01b      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 f8a6 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2140      	movs	r1, #64	; 0x40
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f8fd 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f000 f8f4 	bl	80047f6 <TIM_ITRx_SetConfig>
        break;
 800460e:	e002      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004614:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a29      	ldr	r2, [pc, #164]	; (8004730 <TIM_Base_SetConfig+0xb8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_Base_SetConfig+0x30>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0x30>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <TIM_Base_SetConfig+0xbc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0x30>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a25      	ldr	r2, [pc, #148]	; (8004738 <TIM_Base_SetConfig+0xc0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <TIM_Base_SetConfig+0xb8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00b      	beq.n	80046da <TIM_Base_SetConfig+0x62>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d007      	beq.n	80046da <TIM_Base_SetConfig+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <TIM_Base_SetConfig+0xbc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_Base_SetConfig+0x62>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <TIM_Base_SetConfig+0xc0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d108      	bne.n	80046ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a07      	ldr	r2, [pc, #28]	; (8004730 <TIM_Base_SetConfig+0xb8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d103      	bne.n	8004720 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	615a      	str	r2, [r3, #20]
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f023 0210 	bic.w	r2, r3, #16
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	031b      	lsls	r3, r3, #12
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	f043 0307 	orr.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e046      	b.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d009      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a10      	ldr	r2, [pc, #64]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10c      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800

08004924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e03f      	b.n	80049da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fd fba2 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800498a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f905 	bl	8004b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b08a      	sub	sp, #40	; 0x28
 80049e6:	af02      	add	r7, sp, #8
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d17c      	bne.n	8004afc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_UART_Transmit+0x2c>
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e075      	b.n	8004afe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Transmit+0x3e>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e06e      	b.n	8004afe <HAL_UART_Transmit+0x11c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a36:	f7fd fc45 	bl	80022c4 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d108      	bne.n	8004a64 <HAL_UART_Transmit+0x82>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	e003      	b.n	8004a6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a74:	e02a      	b.n	8004acc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f840 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e036      	b.n	8004afe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	e007      	b.n	8004abe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1cf      	bne.n	8004a76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f810 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e006      	b.n	8004afe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e000      	b.n	8004afe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	e02c      	b.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1e:	d028      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b26:	f7fd fbcd 	bl	80022c4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d21d      	bcs.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0c3      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bd6:	f023 030c 	bic.w	r3, r3, #12
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <UART_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fe fad0 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	e002      	b.n	8004c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fab8 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8004c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009a      	lsls	r2, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <UART_SetConfig+0x118>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	0119      	lsls	r1, r3, #4
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009a      	lsls	r2, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <UART_SetConfig+0x118>)
 8004c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2064      	movs	r0, #100	; 0x64
 8004c52:	fb00 f303 	mul.w	r3, r0, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	3332      	adds	r3, #50	; 0x32
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <UART_SetConfig+0x118>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	4419      	add	r1, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009a      	lsls	r2, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <UART_SetConfig+0x118>)
 8004c82:	fba3 0302 	umull	r0, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2064      	movs	r0, #100	; 0x64
 8004c8a:	fb00 f303 	mul.w	r3, r0, r3
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	3332      	adds	r3, #50	; 0x32
 8004c94:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <UART_SetConfig+0x118>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	f003 020f 	and.w	r2, r3, #15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40013800 	.word	0x40013800
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <__errno>:
 8004cb8:	4b01      	ldr	r3, [pc, #4]	; (8004cc0 <__errno+0x8>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000034 	.word	0x20000034

08004cc4 <__libc_init_array>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	4d0c      	ldr	r5, [pc, #48]	; (8004cfc <__libc_init_array+0x38>)
 8004cca:	4c0d      	ldr	r4, [pc, #52]	; (8004d00 <__libc_init_array+0x3c>)
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	d109      	bne.n	8004ce8 <__libc_init_array+0x24>
 8004cd4:	f000 fc5c 	bl	8005590 <_init>
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4d0a      	ldr	r5, [pc, #40]	; (8004d04 <__libc_init_array+0x40>)
 8004cdc:	4c0a      	ldr	r4, [pc, #40]	; (8004d08 <__libc_init_array+0x44>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	42a6      	cmp	r6, r4
 8004ce4:	d105      	bne.n	8004cf2 <__libc_init_array+0x2e>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cec:	4798      	blx	r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__libc_init_array+0xc>
 8004cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf6:	4798      	blx	r3
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7f2      	b.n	8004ce2 <__libc_init_array+0x1e>
 8004cfc:	08005908 	.word	0x08005908
 8004d00:	08005908 	.word	0x08005908
 8004d04:	08005908 	.word	0x08005908
 8004d08:	0800590c 	.word	0x0800590c

08004d0c <memset>:
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4402      	add	r2, r0
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d100      	bne.n	8004d16 <memset+0xa>
 8004d14:	4770      	bx	lr
 8004d16:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1a:	e7f9      	b.n	8004d10 <memset+0x4>

08004d1c <siprintf>:
 8004d1c:	b40e      	push	{r1, r2, r3}
 8004d1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d22:	b500      	push	{lr}
 8004d24:	b09c      	sub	sp, #112	; 0x70
 8004d26:	ab1d      	add	r3, sp, #116	; 0x74
 8004d28:	9002      	str	r0, [sp, #8]
 8004d2a:	9006      	str	r0, [sp, #24]
 8004d2c:	9107      	str	r1, [sp, #28]
 8004d2e:	9104      	str	r1, [sp, #16]
 8004d30:	4808      	ldr	r0, [pc, #32]	; (8004d54 <siprintf+0x38>)
 8004d32:	4909      	ldr	r1, [pc, #36]	; (8004d58 <siprintf+0x3c>)
 8004d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d38:	9105      	str	r1, [sp, #20]
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	a902      	add	r1, sp, #8
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f000 f868 	bl	8004e14 <_svfiprintf_r>
 8004d44:	2200      	movs	r2, #0
 8004d46:	9b02      	ldr	r3, [sp, #8]
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	b01c      	add	sp, #112	; 0x70
 8004d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d50:	b003      	add	sp, #12
 8004d52:	4770      	bx	lr
 8004d54:	20000034 	.word	0x20000034
 8004d58:	ffff0208 	.word	0xffff0208

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	688e      	ldr	r6, [r1, #8]
 8004d62:	4682      	mov	sl, r0
 8004d64:	429e      	cmp	r6, r3
 8004d66:	460c      	mov	r4, r1
 8004d68:	4690      	mov	r8, r2
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	d838      	bhi.n	8004de0 <__ssputs_r+0x84>
 8004d6e:	898a      	ldrh	r2, [r1, #12]
 8004d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d74:	d032      	beq.n	8004ddc <__ssputs_r+0x80>
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6909      	ldr	r1, [r1, #16]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	eba5 0901 	sub.w	r9, r5, r1
 8004d80:	6965      	ldr	r5, [r4, #20]
 8004d82:	444b      	add	r3, r9
 8004d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d8c:	106d      	asrs	r5, r5, #1
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	bf38      	it	cc
 8004d92:	461d      	movcc	r5, r3
 8004d94:	0553      	lsls	r3, r2, #21
 8004d96:	d531      	bpl.n	8004dfc <__ssputs_r+0xa0>
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f000 fb53 	bl	8005444 <_malloc_r>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	b950      	cbnz	r0, 8004db8 <__ssputs_r+0x5c>
 8004da2:	230c      	movs	r3, #12
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004da8:	f8ca 3000 	str.w	r3, [sl]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	464a      	mov	r2, r9
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	f000 face 	bl	800535c <memcpy>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	6126      	str	r6, [r4, #16]
 8004dce:	444e      	add	r6, r9
 8004dd0:	6026      	str	r6, [r4, #0]
 8004dd2:	463e      	mov	r6, r7
 8004dd4:	6165      	str	r5, [r4, #20]
 8004dd6:	eba5 0509 	sub.w	r5, r5, r9
 8004dda:	60a5      	str	r5, [r4, #8]
 8004ddc:	42be      	cmp	r6, r7
 8004dde:	d900      	bls.n	8004de2 <__ssputs_r+0x86>
 8004de0:	463e      	mov	r6, r7
 8004de2:	4632      	mov	r2, r6
 8004de4:	4641      	mov	r1, r8
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	f000 fac6 	bl	8005378 <memmove>
 8004dec:	68a3      	ldr	r3, [r4, #8]
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	1b9b      	subs	r3, r3, r6
 8004df2:	4432      	add	r2, r6
 8004df4:	2000      	movs	r0, #0
 8004df6:	60a3      	str	r3, [r4, #8]
 8004df8:	6022      	str	r2, [r4, #0]
 8004dfa:	e7db      	b.n	8004db4 <__ssputs_r+0x58>
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	f000 fb7b 	bl	80054f8 <_realloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e1      	bne.n	8004dcc <__ssputs_r+0x70>
 8004e08:	4650      	mov	r0, sl
 8004e0a:	6921      	ldr	r1, [r4, #16]
 8004e0c:	f000 face 	bl	80053ac <_free_r>
 8004e10:	e7c7      	b.n	8004da2 <__ssputs_r+0x46>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	4698      	mov	r8, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	460d      	mov	r5, r1
 8004e22:	4614      	mov	r4, r2
 8004e24:	b09d      	sub	sp, #116	; 0x74
 8004e26:	d50e      	bpl.n	8004e46 <_svfiprintf_r+0x32>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b963      	cbnz	r3, 8004e46 <_svfiprintf_r+0x32>
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	f000 fb09 	bl	8005444 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b920      	cbnz	r0, 8004e42 <_svfiprintf_r+0x2e>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e40:	e0d1      	b.n	8004fe6 <_svfiprintf_r+0x1d2>
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	616b      	str	r3, [r5, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e50:	2330      	movs	r3, #48	; 0x30
 8004e52:	f04f 0901 	mov.w	r9, #1
 8004e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005000 <_svfiprintf_r+0x1ec>
 8004e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e62:	4623      	mov	r3, r4
 8004e64:	469a      	mov	sl, r3
 8004e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6a:	b10a      	cbz	r2, 8004e70 <_svfiprintf_r+0x5c>
 8004e6c:	2a25      	cmp	r2, #37	; 0x25
 8004e6e:	d1f9      	bne.n	8004e64 <_svfiprintf_r+0x50>
 8004e70:	ebba 0b04 	subs.w	fp, sl, r4
 8004e74:	d00b      	beq.n	8004e8e <_svfiprintf_r+0x7a>
 8004e76:	465b      	mov	r3, fp
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ff6d 	bl	8004d5c <__ssputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	f000 80aa 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e8a:	445a      	add	r2, fp
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80a2 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea2:	f10a 0a01 	add.w	sl, sl, #1
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eae:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb0:	4654      	mov	r4, sl
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	4851      	ldr	r0, [pc, #324]	; (8005000 <_svfiprintf_r+0x1ec>)
 8004eba:	f000 fa41 	bl	8005340 <memchr>
 8004ebe:	9a04      	ldr	r2, [sp, #16]
 8004ec0:	b9d8      	cbnz	r0, 8004efa <_svfiprintf_r+0xe6>
 8004ec2:	06d0      	lsls	r0, r2, #27
 8004ec4:	bf44      	itt	mi
 8004ec6:	2320      	movmi	r3, #32
 8004ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ecc:	0711      	lsls	r1, r2, #28
 8004ece:	bf44      	itt	mi
 8004ed0:	232b      	movmi	r3, #43	; 0x2b
 8004ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d015      	beq.n	8004f0a <_svfiprintf_r+0xf6>
 8004ede:	4654      	mov	r4, sl
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f04f 0c0a 	mov.w	ip, #10
 8004ee6:	9a07      	ldr	r2, [sp, #28]
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eee:	3b30      	subs	r3, #48	; 0x30
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d94e      	bls.n	8004f92 <_svfiprintf_r+0x17e>
 8004ef4:	b1b0      	cbz	r0, 8004f24 <_svfiprintf_r+0x110>
 8004ef6:	9207      	str	r2, [sp, #28]
 8004ef8:	e014      	b.n	8004f24 <_svfiprintf_r+0x110>
 8004efa:	eba0 0308 	sub.w	r3, r0, r8
 8004efe:	fa09 f303 	lsl.w	r3, r9, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	46a2      	mov	sl, r4
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	e7d2      	b.n	8004eb0 <_svfiprintf_r+0x9c>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	1d19      	adds	r1, r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	9103      	str	r1, [sp, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfbb      	ittet	lt
 8004f16:	425b      	neglt	r3, r3
 8004f18:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1c:	9307      	strge	r3, [sp, #28]
 8004f1e:	9307      	strlt	r3, [sp, #28]
 8004f20:	bfb8      	it	lt
 8004f22:	9204      	strlt	r2, [sp, #16]
 8004f24:	7823      	ldrb	r3, [r4, #0]
 8004f26:	2b2e      	cmp	r3, #46	; 0x2e
 8004f28:	d10c      	bne.n	8004f44 <_svfiprintf_r+0x130>
 8004f2a:	7863      	ldrb	r3, [r4, #1]
 8004f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2e:	d135      	bne.n	8004f9c <_svfiprintf_r+0x188>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	3402      	adds	r4, #2
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	9203      	str	r2, [sp, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bfb8      	it	lt
 8004f3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005010 <_svfiprintf_r+0x1fc>
 8004f48:	2203      	movs	r2, #3
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	7821      	ldrb	r1, [r4, #0]
 8004f4e:	f000 f9f7 	bl	8005340 <memchr>
 8004f52:	b140      	cbz	r0, 8004f66 <_svfiprintf_r+0x152>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	3401      	adds	r4, #1
 8004f62:	4303      	orrs	r3, r0
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6a:	2206      	movs	r2, #6
 8004f6c:	4825      	ldr	r0, [pc, #148]	; (8005004 <_svfiprintf_r+0x1f0>)
 8004f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f72:	f000 f9e5 	bl	8005340 <memchr>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d038      	beq.n	8004fec <_svfiprintf_r+0x1d8>
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <_svfiprintf_r+0x1f4>)
 8004f7c:	bb1b      	cbnz	r3, 8004fc6 <_svfiprintf_r+0x1b2>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	3308      	adds	r3, #8
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	4433      	add	r3, r6
 8004f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f90:	e767      	b.n	8004e62 <_svfiprintf_r+0x4e>
 8004f92:	460c      	mov	r4, r1
 8004f94:	2001      	movs	r0, #1
 8004f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9a:	e7a5      	b.n	8004ee8 <_svfiprintf_r+0xd4>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 0c0a 	mov.w	ip, #10
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fae:	3a30      	subs	r2, #48	; 0x30
 8004fb0:	2a09      	cmp	r2, #9
 8004fb2:	d903      	bls.n	8004fbc <_svfiprintf_r+0x1a8>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0c5      	beq.n	8004f44 <_svfiprintf_r+0x130>
 8004fb8:	9105      	str	r1, [sp, #20]
 8004fba:	e7c3      	b.n	8004f44 <_svfiprintf_r+0x130>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc4:	e7f0      	b.n	8004fa8 <_svfiprintf_r+0x194>
 8004fc6:	ab03      	add	r3, sp, #12
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4638      	mov	r0, r7
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <_svfiprintf_r+0x1f8>)
 8004fd0:	a904      	add	r1, sp, #16
 8004fd2:	f3af 8000 	nop.w
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	4606      	mov	r6, r0
 8004fda:	d1d6      	bne.n	8004f8a <_svfiprintf_r+0x176>
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	065b      	lsls	r3, r3, #25
 8004fe0:	f53f af2c 	bmi.w	8004e3c <_svfiprintf_r+0x28>
 8004fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe6:	b01d      	add	sp, #116	; 0x74
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <_svfiprintf_r+0x1f8>)
 8004ff6:	a904      	add	r1, sp, #16
 8004ff8:	f000 f87c 	bl	80050f4 <_printf_i>
 8004ffc:	e7eb      	b.n	8004fd6 <_svfiprintf_r+0x1c2>
 8004ffe:	bf00      	nop
 8005000:	080058d4 	.word	0x080058d4
 8005004:	080058de 	.word	0x080058de
 8005008:	00000000 	.word	0x00000000
 800500c:	08004d5d 	.word	0x08004d5d
 8005010:	080058da 	.word	0x080058da

08005014 <_printf_common>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	4616      	mov	r6, r2
 800501a:	4699      	mov	r9, r3
 800501c:	688a      	ldr	r2, [r1, #8]
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	4607      	mov	r7, r0
 8005022:	4293      	cmp	r3, r2
 8005024:	bfb8      	it	lt
 8005026:	4613      	movlt	r3, r2
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800502e:	460c      	mov	r4, r1
 8005030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005034:	b10a      	cbz	r2, 800503a <_printf_common+0x26>
 8005036:	3301      	adds	r3, #1
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	0699      	lsls	r1, r3, #26
 800503e:	bf42      	ittt	mi
 8005040:	6833      	ldrmi	r3, [r6, #0]
 8005042:	3302      	addmi	r3, #2
 8005044:	6033      	strmi	r3, [r6, #0]
 8005046:	6825      	ldr	r5, [r4, #0]
 8005048:	f015 0506 	ands.w	r5, r5, #6
 800504c:	d106      	bne.n	800505c <_printf_common+0x48>
 800504e:	f104 0a19 	add.w	sl, r4, #25
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	6832      	ldr	r2, [r6, #0]
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	42ab      	cmp	r3, r5
 800505a:	dc28      	bgt.n	80050ae <_printf_common+0x9a>
 800505c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005060:	1e13      	subs	r3, r2, #0
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	bf18      	it	ne
 8005066:	2301      	movne	r3, #1
 8005068:	0692      	lsls	r2, r2, #26
 800506a:	d42d      	bmi.n	80050c8 <_printf_common+0xb4>
 800506c:	4649      	mov	r1, r9
 800506e:	4638      	mov	r0, r7
 8005070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d020      	beq.n	80050bc <_printf_common+0xa8>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	68e5      	ldr	r5, [r4, #12]
 800507e:	f003 0306 	and.w	r3, r3, #6
 8005082:	2b04      	cmp	r3, #4
 8005084:	bf18      	it	ne
 8005086:	2500      	movne	r5, #0
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	f04f 0600 	mov.w	r6, #0
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	bf08      	it	eq
 8005092:	1aad      	subeq	r5, r5, r2
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	bf08      	it	eq
 8005098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800509c:	4293      	cmp	r3, r2
 800509e:	bfc4      	itt	gt
 80050a0:	1a9b      	subgt	r3, r3, r2
 80050a2:	18ed      	addgt	r5, r5, r3
 80050a4:	341a      	adds	r4, #26
 80050a6:	42b5      	cmp	r5, r6
 80050a8:	d11a      	bne.n	80050e0 <_printf_common+0xcc>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e008      	b.n	80050c0 <_printf_common+0xac>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4652      	mov	r2, sl
 80050b2:	4649      	mov	r1, r9
 80050b4:	4638      	mov	r0, r7
 80050b6:	47c0      	blx	r8
 80050b8:	3001      	adds	r0, #1
 80050ba:	d103      	bne.n	80050c4 <_printf_common+0xb0>
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	3501      	adds	r5, #1
 80050c6:	e7c4      	b.n	8005052 <_printf_common+0x3e>
 80050c8:	2030      	movs	r0, #48	; 0x30
 80050ca:	18e1      	adds	r1, r4, r3
 80050cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d6:	4422      	add	r2, r4
 80050d8:	3302      	adds	r3, #2
 80050da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050de:	e7c5      	b.n	800506c <_printf_common+0x58>
 80050e0:	2301      	movs	r3, #1
 80050e2:	4622      	mov	r2, r4
 80050e4:	4649      	mov	r1, r9
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0e6      	beq.n	80050bc <_printf_common+0xa8>
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7d9      	b.n	80050a6 <_printf_common+0x92>
	...

080050f4 <_printf_i>:
 80050f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	460c      	mov	r4, r1
 80050fa:	7e27      	ldrb	r7, [r4, #24]
 80050fc:	4691      	mov	r9, r2
 80050fe:	2f78      	cmp	r7, #120	; 0x78
 8005100:	4680      	mov	r8, r0
 8005102:	469a      	mov	sl, r3
 8005104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800510a:	d807      	bhi.n	800511c <_printf_i+0x28>
 800510c:	2f62      	cmp	r7, #98	; 0x62
 800510e:	d80a      	bhi.n	8005126 <_printf_i+0x32>
 8005110:	2f00      	cmp	r7, #0
 8005112:	f000 80d9 	beq.w	80052c8 <_printf_i+0x1d4>
 8005116:	2f58      	cmp	r7, #88	; 0x58
 8005118:	f000 80a4 	beq.w	8005264 <_printf_i+0x170>
 800511c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005124:	e03a      	b.n	800519c <_printf_i+0xa8>
 8005126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512a:	2b15      	cmp	r3, #21
 800512c:	d8f6      	bhi.n	800511c <_printf_i+0x28>
 800512e:	a001      	add	r0, pc, #4	; (adr r0, 8005134 <_printf_i+0x40>)
 8005130:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005134:	0800518d 	.word	0x0800518d
 8005138:	080051a1 	.word	0x080051a1
 800513c:	0800511d 	.word	0x0800511d
 8005140:	0800511d 	.word	0x0800511d
 8005144:	0800511d 	.word	0x0800511d
 8005148:	0800511d 	.word	0x0800511d
 800514c:	080051a1 	.word	0x080051a1
 8005150:	0800511d 	.word	0x0800511d
 8005154:	0800511d 	.word	0x0800511d
 8005158:	0800511d 	.word	0x0800511d
 800515c:	0800511d 	.word	0x0800511d
 8005160:	080052af 	.word	0x080052af
 8005164:	080051d1 	.word	0x080051d1
 8005168:	08005291 	.word	0x08005291
 800516c:	0800511d 	.word	0x0800511d
 8005170:	0800511d 	.word	0x0800511d
 8005174:	080052d1 	.word	0x080052d1
 8005178:	0800511d 	.word	0x0800511d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800511d 	.word	0x0800511d
 8005184:	0800511d 	.word	0x0800511d
 8005188:	08005299 	.word	0x08005299
 800518c:	680b      	ldr	r3, [r1, #0]
 800518e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	600a      	str	r2, [r1, #0]
 8005198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800519c:	2301      	movs	r3, #1
 800519e:	e0a4      	b.n	80052ea <_printf_i+0x1f6>
 80051a0:	6825      	ldr	r5, [r4, #0]
 80051a2:	6808      	ldr	r0, [r1, #0]
 80051a4:	062e      	lsls	r6, r5, #24
 80051a6:	f100 0304 	add.w	r3, r0, #4
 80051aa:	d50a      	bpl.n	80051c2 <_printf_i+0xce>
 80051ac:	6805      	ldr	r5, [r0, #0]
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	da03      	bge.n	80051bc <_printf_i+0xc8>
 80051b4:	232d      	movs	r3, #45	; 0x2d
 80051b6:	426d      	negs	r5, r5
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	230a      	movs	r3, #10
 80051be:	485e      	ldr	r0, [pc, #376]	; (8005338 <_printf_i+0x244>)
 80051c0:	e019      	b.n	80051f6 <_printf_i+0x102>
 80051c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051c6:	6805      	ldr	r5, [r0, #0]
 80051c8:	600b      	str	r3, [r1, #0]
 80051ca:	bf18      	it	ne
 80051cc:	b22d      	sxthne	r5, r5
 80051ce:	e7ef      	b.n	80051b0 <_printf_i+0xbc>
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	6825      	ldr	r5, [r4, #0]
 80051d4:	1d18      	adds	r0, r3, #4
 80051d6:	6008      	str	r0, [r1, #0]
 80051d8:	0628      	lsls	r0, r5, #24
 80051da:	d501      	bpl.n	80051e0 <_printf_i+0xec>
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	e002      	b.n	80051e6 <_printf_i+0xf2>
 80051e0:	0669      	lsls	r1, r5, #25
 80051e2:	d5fb      	bpl.n	80051dc <_printf_i+0xe8>
 80051e4:	881d      	ldrh	r5, [r3, #0]
 80051e6:	2f6f      	cmp	r7, #111	; 0x6f
 80051e8:	bf0c      	ite	eq
 80051ea:	2308      	moveq	r3, #8
 80051ec:	230a      	movne	r3, #10
 80051ee:	4852      	ldr	r0, [pc, #328]	; (8005338 <_printf_i+0x244>)
 80051f0:	2100      	movs	r1, #0
 80051f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f6:	6866      	ldr	r6, [r4, #4]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	bfa8      	it	ge
 80051fc:	6821      	ldrge	r1, [r4, #0]
 80051fe:	60a6      	str	r6, [r4, #8]
 8005200:	bfa4      	itt	ge
 8005202:	f021 0104 	bicge.w	r1, r1, #4
 8005206:	6021      	strge	r1, [r4, #0]
 8005208:	b90d      	cbnz	r5, 800520e <_printf_i+0x11a>
 800520a:	2e00      	cmp	r6, #0
 800520c:	d04d      	beq.n	80052aa <_printf_i+0x1b6>
 800520e:	4616      	mov	r6, r2
 8005210:	fbb5 f1f3 	udiv	r1, r5, r3
 8005214:	fb03 5711 	mls	r7, r3, r1, r5
 8005218:	5dc7      	ldrb	r7, [r0, r7]
 800521a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800521e:	462f      	mov	r7, r5
 8005220:	42bb      	cmp	r3, r7
 8005222:	460d      	mov	r5, r1
 8005224:	d9f4      	bls.n	8005210 <_printf_i+0x11c>
 8005226:	2b08      	cmp	r3, #8
 8005228:	d10b      	bne.n	8005242 <_printf_i+0x14e>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	07df      	lsls	r7, r3, #31
 800522e:	d508      	bpl.n	8005242 <_printf_i+0x14e>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	6861      	ldr	r1, [r4, #4]
 8005234:	4299      	cmp	r1, r3
 8005236:	bfde      	ittt	le
 8005238:	2330      	movle	r3, #48	; 0x30
 800523a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800523e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005242:	1b92      	subs	r2, r2, r6
 8005244:	6122      	str	r2, [r4, #16]
 8005246:	464b      	mov	r3, r9
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	aa03      	add	r2, sp, #12
 8005252:	f7ff fedf 	bl	8005014 <_printf_common>
 8005256:	3001      	adds	r0, #1
 8005258:	d14c      	bne.n	80052f4 <_printf_i+0x200>
 800525a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800525e:	b004      	add	sp, #16
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	4834      	ldr	r0, [pc, #208]	; (8005338 <_printf_i+0x244>)
 8005266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800526a:	680e      	ldr	r6, [r1, #0]
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005272:	061f      	lsls	r7, r3, #24
 8005274:	600e      	str	r6, [r1, #0]
 8005276:	d514      	bpl.n	80052a2 <_printf_i+0x1ae>
 8005278:	07d9      	lsls	r1, r3, #31
 800527a:	bf44      	itt	mi
 800527c:	f043 0320 	orrmi.w	r3, r3, #32
 8005280:	6023      	strmi	r3, [r4, #0]
 8005282:	b91d      	cbnz	r5, 800528c <_printf_i+0x198>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f023 0320 	bic.w	r3, r3, #32
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	2310      	movs	r3, #16
 800528e:	e7af      	b.n	80051f0 <_printf_i+0xfc>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f043 0320 	orr.w	r3, r3, #32
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	2378      	movs	r3, #120	; 0x78
 800529a:	4828      	ldr	r0, [pc, #160]	; (800533c <_printf_i+0x248>)
 800529c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052a0:	e7e3      	b.n	800526a <_printf_i+0x176>
 80052a2:	065e      	lsls	r6, r3, #25
 80052a4:	bf48      	it	mi
 80052a6:	b2ad      	uxthmi	r5, r5
 80052a8:	e7e6      	b.n	8005278 <_printf_i+0x184>
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7bb      	b.n	8005226 <_printf_i+0x132>
 80052ae:	680b      	ldr	r3, [r1, #0]
 80052b0:	6826      	ldr	r6, [r4, #0]
 80052b2:	1d1d      	adds	r5, r3, #4
 80052b4:	6960      	ldr	r0, [r4, #20]
 80052b6:	600d      	str	r5, [r1, #0]
 80052b8:	0635      	lsls	r5, r6, #24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0x1ce>
 80052be:	6018      	str	r0, [r3, #0]
 80052c0:	e002      	b.n	80052c8 <_printf_i+0x1d4>
 80052c2:	0671      	lsls	r1, r6, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0x1ca>
 80052c6:	8018      	strh	r0, [r3, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	4616      	mov	r6, r2
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	e7ba      	b.n	8005246 <_printf_i+0x152>
 80052d0:	680b      	ldr	r3, [r1, #0]
 80052d2:	1d1a      	adds	r2, r3, #4
 80052d4:	600a      	str	r2, [r1, #0]
 80052d6:	681e      	ldr	r6, [r3, #0]
 80052d8:	2100      	movs	r1, #0
 80052da:	4630      	mov	r0, r6
 80052dc:	6862      	ldr	r2, [r4, #4]
 80052de:	f000 f82f 	bl	8005340 <memchr>
 80052e2:	b108      	cbz	r0, 80052e8 <_printf_i+0x1f4>
 80052e4:	1b80      	subs	r0, r0, r6
 80052e6:	6060      	str	r0, [r4, #4]
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	2300      	movs	r3, #0
 80052ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f2:	e7a8      	b.n	8005246 <_printf_i+0x152>
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d0ab      	beq.n	800525a <_printf_i+0x166>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	079b      	lsls	r3, r3, #30
 8005306:	d413      	bmi.n	8005330 <_printf_i+0x23c>
 8005308:	68e0      	ldr	r0, [r4, #12]
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	4298      	cmp	r0, r3
 800530e:	bfb8      	it	lt
 8005310:	4618      	movlt	r0, r3
 8005312:	e7a4      	b.n	800525e <_printf_i+0x16a>
 8005314:	2301      	movs	r3, #1
 8005316:	4632      	mov	r2, r6
 8005318:	4649      	mov	r1, r9
 800531a:	4640      	mov	r0, r8
 800531c:	47d0      	blx	sl
 800531e:	3001      	adds	r0, #1
 8005320:	d09b      	beq.n	800525a <_printf_i+0x166>
 8005322:	3501      	adds	r5, #1
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	9903      	ldr	r1, [sp, #12]
 8005328:	1a5b      	subs	r3, r3, r1
 800532a:	42ab      	cmp	r3, r5
 800532c:	dcf2      	bgt.n	8005314 <_printf_i+0x220>
 800532e:	e7eb      	b.n	8005308 <_printf_i+0x214>
 8005330:	2500      	movs	r5, #0
 8005332:	f104 0619 	add.w	r6, r4, #25
 8005336:	e7f5      	b.n	8005324 <_printf_i+0x230>
 8005338:	080058e5 	.word	0x080058e5
 800533c:	080058f6 	.word	0x080058f6

08005340 <memchr>:
 8005340:	4603      	mov	r3, r0
 8005342:	b510      	push	{r4, lr}
 8005344:	b2c9      	uxtb	r1, r1
 8005346:	4402      	add	r2, r0
 8005348:	4293      	cmp	r3, r2
 800534a:	4618      	mov	r0, r3
 800534c:	d101      	bne.n	8005352 <memchr+0x12>
 800534e:	2000      	movs	r0, #0
 8005350:	e003      	b.n	800535a <memchr+0x1a>
 8005352:	7804      	ldrb	r4, [r0, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	428c      	cmp	r4, r1
 8005358:	d1f6      	bne.n	8005348 <memchr+0x8>
 800535a:	bd10      	pop	{r4, pc}

0800535c <memcpy>:
 800535c:	440a      	add	r2, r1
 800535e:	4291      	cmp	r1, r2
 8005360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005364:	d100      	bne.n	8005368 <memcpy+0xc>
 8005366:	4770      	bx	lr
 8005368:	b510      	push	{r4, lr}
 800536a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536e:	4291      	cmp	r1, r2
 8005370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005374:	d1f9      	bne.n	800536a <memcpy+0xe>
 8005376:	bd10      	pop	{r4, pc}

08005378 <memmove>:
 8005378:	4288      	cmp	r0, r1
 800537a:	b510      	push	{r4, lr}
 800537c:	eb01 0402 	add.w	r4, r1, r2
 8005380:	d902      	bls.n	8005388 <memmove+0x10>
 8005382:	4284      	cmp	r4, r0
 8005384:	4623      	mov	r3, r4
 8005386:	d807      	bhi.n	8005398 <memmove+0x20>
 8005388:	1e43      	subs	r3, r0, #1
 800538a:	42a1      	cmp	r1, r4
 800538c:	d008      	beq.n	80053a0 <memmove+0x28>
 800538e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005396:	e7f8      	b.n	800538a <memmove+0x12>
 8005398:	4601      	mov	r1, r0
 800539a:	4402      	add	r2, r0
 800539c:	428a      	cmp	r2, r1
 800539e:	d100      	bne.n	80053a2 <memmove+0x2a>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053aa:	e7f7      	b.n	800539c <memmove+0x24>

080053ac <_free_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4605      	mov	r5, r0
 80053b0:	2900      	cmp	r1, #0
 80053b2:	d043      	beq.n	800543c <_free_r+0x90>
 80053b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b8:	1f0c      	subs	r4, r1, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bfb8      	it	lt
 80053be:	18e4      	addlt	r4, r4, r3
 80053c0:	f000 f8d0 	bl	8005564 <__malloc_lock>
 80053c4:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <_free_r+0x94>)
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	4610      	mov	r0, r2
 80053ca:	b933      	cbnz	r3, 80053da <_free_r+0x2e>
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	6014      	str	r4, [r2, #0]
 80053d0:	4628      	mov	r0, r5
 80053d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d6:	f000 b8cb 	b.w	8005570 <__malloc_unlock>
 80053da:	42a3      	cmp	r3, r4
 80053dc:	d90a      	bls.n	80053f4 <_free_r+0x48>
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	1862      	adds	r2, r4, r1
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bf01      	itttt	eq
 80053e6:	681a      	ldreq	r2, [r3, #0]
 80053e8:	685b      	ldreq	r3, [r3, #4]
 80053ea:	1852      	addeq	r2, r2, r1
 80053ec:	6022      	streq	r2, [r4, #0]
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6004      	str	r4, [r0, #0]
 80053f2:	e7ed      	b.n	80053d0 <_free_r+0x24>
 80053f4:	461a      	mov	r2, r3
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	b10b      	cbz	r3, 80053fe <_free_r+0x52>
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	d9fa      	bls.n	80053f4 <_free_r+0x48>
 80053fe:	6811      	ldr	r1, [r2, #0]
 8005400:	1850      	adds	r0, r2, r1
 8005402:	42a0      	cmp	r0, r4
 8005404:	d10b      	bne.n	800541e <_free_r+0x72>
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	4401      	add	r1, r0
 800540a:	1850      	adds	r0, r2, r1
 800540c:	4283      	cmp	r3, r0
 800540e:	6011      	str	r1, [r2, #0]
 8005410:	d1de      	bne.n	80053d0 <_free_r+0x24>
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4401      	add	r1, r0
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	e7d8      	b.n	80053d0 <_free_r+0x24>
 800541e:	d902      	bls.n	8005426 <_free_r+0x7a>
 8005420:	230c      	movs	r3, #12
 8005422:	602b      	str	r3, [r5, #0]
 8005424:	e7d4      	b.n	80053d0 <_free_r+0x24>
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1821      	adds	r1, r4, r0
 800542a:	428b      	cmp	r3, r1
 800542c:	bf01      	itttt	eq
 800542e:	6819      	ldreq	r1, [r3, #0]
 8005430:	685b      	ldreq	r3, [r3, #4]
 8005432:	1809      	addeq	r1, r1, r0
 8005434:	6021      	streq	r1, [r4, #0]
 8005436:	6063      	str	r3, [r4, #4]
 8005438:	6054      	str	r4, [r2, #4]
 800543a:	e7c9      	b.n	80053d0 <_free_r+0x24>
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	200000e4 	.word	0x200000e4

08005444 <_malloc_r>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	1ccd      	adds	r5, r1, #3
 8005448:	f025 0503 	bic.w	r5, r5, #3
 800544c:	3508      	adds	r5, #8
 800544e:	2d0c      	cmp	r5, #12
 8005450:	bf38      	it	cc
 8005452:	250c      	movcc	r5, #12
 8005454:	2d00      	cmp	r5, #0
 8005456:	4606      	mov	r6, r0
 8005458:	db01      	blt.n	800545e <_malloc_r+0x1a>
 800545a:	42a9      	cmp	r1, r5
 800545c:	d903      	bls.n	8005466 <_malloc_r+0x22>
 800545e:	230c      	movs	r3, #12
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	2000      	movs	r0, #0
 8005464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005466:	f000 f87d 	bl	8005564 <__malloc_lock>
 800546a:	4921      	ldr	r1, [pc, #132]	; (80054f0 <_malloc_r+0xac>)
 800546c:	680a      	ldr	r2, [r1, #0]
 800546e:	4614      	mov	r4, r2
 8005470:	b99c      	cbnz	r4, 800549a <_malloc_r+0x56>
 8005472:	4f20      	ldr	r7, [pc, #128]	; (80054f4 <_malloc_r+0xb0>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b923      	cbnz	r3, 8005482 <_malloc_r+0x3e>
 8005478:	4621      	mov	r1, r4
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f862 	bl	8005544 <_sbrk_r>
 8005480:	6038      	str	r0, [r7, #0]
 8005482:	4629      	mov	r1, r5
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f85d 	bl	8005544 <_sbrk_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	d123      	bne.n	80054d6 <_malloc_r+0x92>
 800548e:	230c      	movs	r3, #12
 8005490:	4630      	mov	r0, r6
 8005492:	6033      	str	r3, [r6, #0]
 8005494:	f000 f86c 	bl	8005570 <__malloc_unlock>
 8005498:	e7e3      	b.n	8005462 <_malloc_r+0x1e>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	1b5b      	subs	r3, r3, r5
 800549e:	d417      	bmi.n	80054d0 <_malloc_r+0x8c>
 80054a0:	2b0b      	cmp	r3, #11
 80054a2:	d903      	bls.n	80054ac <_malloc_r+0x68>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	441c      	add	r4, r3
 80054a8:	6025      	str	r5, [r4, #0]
 80054aa:	e004      	b.n	80054b6 <_malloc_r+0x72>
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	42a2      	cmp	r2, r4
 80054b0:	bf0c      	ite	eq
 80054b2:	600b      	streq	r3, [r1, #0]
 80054b4:	6053      	strne	r3, [r2, #4]
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f85a 	bl	8005570 <__malloc_unlock>
 80054bc:	f104 000b 	add.w	r0, r4, #11
 80054c0:	1d23      	adds	r3, r4, #4
 80054c2:	f020 0007 	bic.w	r0, r0, #7
 80054c6:	1ac2      	subs	r2, r0, r3
 80054c8:	d0cc      	beq.n	8005464 <_malloc_r+0x20>
 80054ca:	1a1b      	subs	r3, r3, r0
 80054cc:	50a3      	str	r3, [r4, r2]
 80054ce:	e7c9      	b.n	8005464 <_malloc_r+0x20>
 80054d0:	4622      	mov	r2, r4
 80054d2:	6864      	ldr	r4, [r4, #4]
 80054d4:	e7cc      	b.n	8005470 <_malloc_r+0x2c>
 80054d6:	1cc4      	adds	r4, r0, #3
 80054d8:	f024 0403 	bic.w	r4, r4, #3
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d0e3      	beq.n	80054a8 <_malloc_r+0x64>
 80054e0:	1a21      	subs	r1, r4, r0
 80054e2:	4630      	mov	r0, r6
 80054e4:	f000 f82e 	bl	8005544 <_sbrk_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d1dd      	bne.n	80054a8 <_malloc_r+0x64>
 80054ec:	e7cf      	b.n	800548e <_malloc_r+0x4a>
 80054ee:	bf00      	nop
 80054f0:	200000e4 	.word	0x200000e4
 80054f4:	200000e8 	.word	0x200000e8

080054f8 <_realloc_r>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	4607      	mov	r7, r0
 80054fc:	4614      	mov	r4, r2
 80054fe:	460e      	mov	r6, r1
 8005500:	b921      	cbnz	r1, 800550c <_realloc_r+0x14>
 8005502:	4611      	mov	r1, r2
 8005504:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005508:	f7ff bf9c 	b.w	8005444 <_malloc_r>
 800550c:	b922      	cbnz	r2, 8005518 <_realloc_r+0x20>
 800550e:	f7ff ff4d 	bl	80053ac <_free_r>
 8005512:	4625      	mov	r5, r4
 8005514:	4628      	mov	r0, r5
 8005516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005518:	f000 f830 	bl	800557c <_malloc_usable_size_r>
 800551c:	42a0      	cmp	r0, r4
 800551e:	d20f      	bcs.n	8005540 <_realloc_r+0x48>
 8005520:	4621      	mov	r1, r4
 8005522:	4638      	mov	r0, r7
 8005524:	f7ff ff8e 	bl	8005444 <_malloc_r>
 8005528:	4605      	mov	r5, r0
 800552a:	2800      	cmp	r0, #0
 800552c:	d0f2      	beq.n	8005514 <_realloc_r+0x1c>
 800552e:	4631      	mov	r1, r6
 8005530:	4622      	mov	r2, r4
 8005532:	f7ff ff13 	bl	800535c <memcpy>
 8005536:	4631      	mov	r1, r6
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff ff37 	bl	80053ac <_free_r>
 800553e:	e7e9      	b.n	8005514 <_realloc_r+0x1c>
 8005540:	4635      	mov	r5, r6
 8005542:	e7e7      	b.n	8005514 <_realloc_r+0x1c>

08005544 <_sbrk_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	2300      	movs	r3, #0
 8005548:	4d05      	ldr	r5, [pc, #20]	; (8005560 <_sbrk_r+0x1c>)
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	f7fc fcb2 	bl	8001eb8 <_sbrk>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_sbrk_r+0x1a>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_sbrk_r+0x1a>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	2000022c 	.word	0x2000022c

08005564 <__malloc_lock>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__malloc_lock+0x8>)
 8005566:	f000 b811 	b.w	800558c <__retarget_lock_acquire_recursive>
 800556a:	bf00      	nop
 800556c:	20000234 	.word	0x20000234

08005570 <__malloc_unlock>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__malloc_unlock+0x8>)
 8005572:	f000 b80c 	b.w	800558e <__retarget_lock_release_recursive>
 8005576:	bf00      	nop
 8005578:	20000234 	.word	0x20000234

0800557c <_malloc_usable_size_r>:
 800557c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005580:	1f18      	subs	r0, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfbc      	itt	lt
 8005586:	580b      	ldrlt	r3, [r1, r0]
 8005588:	18c0      	addlt	r0, r0, r3
 800558a:	4770      	bx	lr

0800558c <__retarget_lock_acquire_recursive>:
 800558c:	4770      	bx	lr

0800558e <__retarget_lock_release_recursive>:
 800558e:	4770      	bx	lr

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
