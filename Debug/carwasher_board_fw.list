
carwasher_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08006284  08006284  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006284  08006284  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800628c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000009c  08006328  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08006328  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011be5  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e99  00000000  00000000  00031caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00034b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019793  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b68  00000000  00000000  00050503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe73  00000000  00000000  0006406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  000f3f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f2c 	.word	0x08005f2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005f2c 	.word	0x08005f2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b3c      	ldr	r3, [pc, #240]	; (8000264 <MX_GPIO_Init+0x108>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a3b      	ldr	r2, [pc, #236]	; (8000264 <MX_GPIO_Init+0x108>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b39      	ldr	r3, [pc, #228]	; (8000264 <MX_GPIO_Init+0x108>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b36      	ldr	r3, [pc, #216]	; (8000264 <MX_GPIO_Init+0x108>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a35      	ldr	r2, [pc, #212]	; (8000264 <MX_GPIO_Init+0x108>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b33      	ldr	r3, [pc, #204]	; (8000264 <MX_GPIO_Init+0x108>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b30      	ldr	r3, [pc, #192]	; (8000264 <MX_GPIO_Init+0x108>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a2f      	ldr	r2, [pc, #188]	; (8000264 <MX_GPIO_Init+0x108>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b2d      	ldr	r3, [pc, #180]	; (8000264 <MX_GPIO_Init+0x108>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <MX_GPIO_Init+0x108>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a29      	ldr	r2, [pc, #164]	; (8000264 <MX_GPIO_Init+0x108>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b27      	ldr	r3, [pc, #156]	; (8000264 <MX_GPIO_Init+0x108>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_Pin|OUT_2_Pin|OUT_6_Pin|MAX7219_CS_Pin
 80001d0:	2200      	movs	r2, #0
 80001d2:	f245 3103 	movw	r1, #21251	; 0x5303
 80001d6:	4824      	ldr	r0, [pc, #144]	; (8000268 <MX_GPIO_Init+0x10c>)
 80001d8:	f002 fd01 	bl	8002bde <HAL_GPIO_WritePin>
                          |OUT_4_Pin|OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_3_Pin|ALIVE_LED_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80001e2:	4822      	ldr	r0, [pc, #136]	; (800026c <MX_GPIO_Init+0x110>)
 80001e4:	f002 fcfb 	bl	8002bde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USER_SEL_Pin|MODE_SW_Pin|FRONT_SW_1_Pin|FRONT_SW_2_Pin
 80001e8:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80001ec:	613b      	str	r3, [r7, #16]
                          |FRONT_SW_3_Pin|FRONT_SW_4_Pin|FRONT_SW_5_Pin|CREDIT_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	481b      	ldr	r0, [pc, #108]	; (800026c <MX_GPIO_Init+0x110>)
 80001fe:	f002 fb53 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_6_Pin|OUT_4_Pin
 8000202:	f241 3303 	movw	r3, #4867	; 0x1303
 8000206:	613b      	str	r3, [r7, #16]
                          |OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2301      	movs	r3, #1
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	2302      	movs	r3, #2
 8000212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4813      	ldr	r0, [pc, #76]	; (8000268 <MX_GPIO_Init+0x10c>)
 800021c:	f002 fb44 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX7219_CS_Pin;
 8000220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000226:	2301      	movs	r3, #1
 8000228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022e:	2302      	movs	r3, #2
 8000230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX7219_CS_GPIO_Port, &GPIO_InitStruct);
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	4619      	mov	r1, r3
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <MX_GPIO_Init+0x10c>)
 800023a:	f002 fb35 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_3_Pin|ALIVE_LED_Pin;
 800023e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	4619      	mov	r1, r3
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <MX_GPIO_Init+0x110>)
 8000258:	f002 fb26 	bl	80028a8 <HAL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000276:	f002 f983 	bl	8002580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027a:	f000 f86f 	bl	800035c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800027e:	f7ff ff6d 	bl	800015c <MX_GPIO_Init>
	MX_RTC_Init();
 8000282:	f001 fdb1 	bl	8001de8 <MX_RTC_Init>
	MX_SPI2_Init();
 8000286:	f001 fe1d 	bl	8001ec4 <MX_SPI2_Init>
	MX_TIM2_Init();
 800028a:	f001 ff3b 	bl	8002104 <MX_TIM2_Init>
	MX_TIM3_Init();
 800028e:	f001 ff85 	bl	800219c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000292:	f002 f873 	bl	800237c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000296:	f002 f89b 	bl	80023d0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	reset_all_pins();
 800029a:	f000 fdc7 	bl	8000e2c <reset_all_pins>
	read_settings_from_eeprom();
 800029e:	f001 fac5 	bl	800182c <read_settings_from_eeprom>
	init_display();
 80002a2:	f000 fdb5 	bl	8000e10 <init_display>
	HAL_TIM_Base_Start_IT(&htim2);
 80002a6:	4826      	ldr	r0, [pc, #152]	; (8000340 <main+0xd0>)
 80002a8:	f004 f8e4 	bl	8004474 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80002ac:	2100      	movs	r1, #0
 80002ae:	4825      	ldr	r0, [pc, #148]	; (8000344 <main+0xd4>)
 80002b0:	f004 f9b8 	bl	8004624 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80002b4:	2104      	movs	r1, #4
 80002b6:	4823      	ldr	r0, [pc, #140]	; (8000344 <main+0xd4>)
 80002b8:	f004 f9b4 	bl	8004624 <HAL_TIM_IC_Start_IT>
	reset_all_pins();
 80002bc:	f000 fdb6 	bl	8000e2c <reset_all_pins>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint8_t btn_read = read_button();
 80002c0:	f000 fe5e 	bl	8000f80 <read_button>
 80002c4:	4603      	mov	r3, r0
 80002c6:	71fb      	strb	r3, [r7, #7]
		if(btn_read == 6){ // credit reset is press
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d10a      	bne.n	80002e4 <main+0x74>
			reset_all_state();
 80002ce:	f000 fbf3 	bl	8000ab8 <reset_all_state>
			eeprom_write(0x06,credit); // save last credit value
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <main+0xd8>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	4619      	mov	r1, r3
 80002dc:	2006      	movs	r0, #6
 80002de:	f000 f96d 	bl	80005bc <eeprom_write>
			continue;
 80002e2:	e02b      	b.n	800033c <main+0xcc>
		}
		if(btn_read == 7){ // mode button is pressed
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	d105      	bne.n	80002f6 <main+0x86>
			setting_mode = 1;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <main+0xdc>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
			setting_menu_loop();
 80002f0:	f000 f928 	bl	8000544 <setting_menu_loop>
			continue;
 80002f4:	e022      	b.n	800033c <main+0xcc>
		}
		if(btn_read != 0){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00f      	beq.n	800031c <main+0xac>
			if(btn_read == pressed_button){
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <main+0xe0>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	429a      	cmp	r2, r3
 8000304:	d103      	bne.n	800030e <main+0x9e>
				pressed_button = 0;
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <main+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	e006      	b.n	800031c <main+0xac>
			}else{
				if(pressed_button == 0 ){
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <main+0xe0>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d102      	bne.n	800031c <main+0xac>
					pressed_button = btn_read;
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <main+0xe0>)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if(is_operation_running){
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <main+0xe4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	2b00      	cmp	r3, #0
 8000324:	d005      	beq.n	8000332 <main+0xc2>
			is_standby = false;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0xe8>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
			do_operation();
 800032c:	f000 fe0c 	bl	8000f48 <do_operation>
 8000330:	e7c6      	b.n	80002c0 <main+0x50>
		}else{
			pressed_button = 0;
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <main+0xe0>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
			reset_all_pins();
 8000338:	f000 fd78 	bl	8000e2c <reset_all_pins>
	{
 800033c:	e7c0      	b.n	80002c0 <main+0x50>
 800033e:	bf00      	nop
 8000340:	200001c0 	.word	0x200001c0
 8000344:	20000178 	.word	0x20000178
 8000348:	200000d2 	.word	0x200000d2
 800034c:	200000d5 	.word	0x200000d5
 8000350:	200000d4 	.word	0x200000d4
 8000354:	200000d0 	.word	0x200000d0
 8000358:	20000000 	.word	0x20000000

0800035c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b094      	sub	sp, #80	; 0x50
 8000360:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	2228      	movs	r2, #40	; 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f005 f99c 	bl	80056a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800038c:	230a      	movs	r3, #10
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2310      	movs	r3, #16
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fc52 	bl	8002c58 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x62>
	{
		Error_Handler();
 80003ba:	f001 fb87 	bl	8001acc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 febc 	bl	8003158 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80003e6:	f001 fb71 	bl	8001acc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f2:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 f848 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8000402:	f001 fb63 	bl	8001acc <Error_Handler>
	}
}
 8000406:	bf00      	nop
 8000408:	3750      	adds	r7, #80	; 0x50
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <send_iot_status>:

/* USER CODE BEGIN 4 */
void send_iot_status(uint8_t money_event){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)">>>>>>>>> sending iot package\r\n", 31,HAL_MAX_DELAY);
 800041a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800041e:	221f      	movs	r2, #31
 8000420:	4915      	ldr	r1, [pc, #84]	; (8000478 <send_iot_status+0x68>)
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <send_iot_status+0x6c>)
 8000424:	f004 ffab 	bl	800537e <HAL_UART_Transmit>
	uint8_t iot_serial_package[8];
	iot_serial_package[0] = 0x02; // STX start flag
 8000428:	2302      	movs	r3, #2
 800042a:	723b      	strb	r3, [r7, #8]
	iot_serial_package[1] = credit;  // credit hi bits
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <send_iot_status+0x70>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	727b      	strb	r3, [r7, #9]
	iot_serial_package[2] = 0;  // credit lo bits
 8000436:	2300      	movs	r3, #0
 8000438:	72bb      	strb	r3, [r7, #10]
	iot_serial_package[3] = pressed_button;  // mode
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <send_iot_status+0x74>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	72fb      	strb	r3, [r7, #11]
	iot_serial_package[4] = money_event;  // money in event
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	733b      	strb	r3, [r7, #12]
	iot_serial_package[5] = 0x03; // ETX stop flag
 8000444:	2303      	movs	r3, #3
 8000446:	737b      	strb	r3, [r7, #13]
	iot_serial_package[6] = 0x0D; // newline
 8000448:	230d      	movs	r3, #13
 800044a:	73bb      	strb	r3, [r7, #14]
	iot_serial_package[7] = 0x0A; // carriage return
 800044c:	230a      	movs	r3, #10
 800044e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)iot_serial_package, 8, HAL_MAX_DELAY);
 8000450:	f107 0108 	add.w	r1, r7, #8
 8000454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000458:	2208      	movs	r2, #8
 800045a:	4808      	ldr	r0, [pc, #32]	; (800047c <send_iot_status+0x6c>)
 800045c:	f004 ff8f 	bl	800537e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)iot_serial_package, 8, HAL_MAX_DELAY);
 8000460:	f107 0108 	add.w	r1, r7, #8
 8000464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000468:	2208      	movs	r2, #8
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <send_iot_status+0x78>)
 800046c:	f004 ff87 	bl	800537e <HAL_UART_Transmit>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	08005f44 	.word	0x08005f44
 800047c:	2000024c 	.word	0x2000024c
 8000480:	200000d2 	.word	0x200000d2
 8000484:	200000d4 	.word	0x200000d4
 8000488:	20000208 	.word	0x20000208

0800048c <display_menu>:
void display_menu(uint8_t selected_menu){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	switch (selected_menu) {
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	3b01      	subs	r3, #1
 800049a:	2b04      	cmp	r3, #4
 800049c:	d843      	bhi.n	8000526 <display_menu+0x9a>
 800049e:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <display_menu+0x18>)
 80004a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a4:	080004b9 	.word	0x080004b9
 80004a8:	080004cb 	.word	0x080004cb
 80004ac:	080004dd 	.word	0x080004dd
 80004b0:	080004f9 	.word	0x080004f9
 80004b4:	08000515 	.word	0x08000515
	case 1:
		segment_display_function_settings(selected_menu,F1_DURATION);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <display_menu+0xa4>)
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f9f6 	bl	80008b4 <segment_display_function_settings>
		break;
 80004c8:	e02d      	b.n	8000526 <display_menu+0x9a>
	case 2:
		segment_display_function_settings(selected_menu,F2_DURATION);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	4a19      	ldr	r2, [pc, #100]	; (8000534 <display_menu+0xa8>)
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	b2d2      	uxtb	r2, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f9ed 	bl	80008b4 <segment_display_function_settings>
		break;
 80004da:	e024      	b.n	8000526 <display_menu+0x9a>
	case 3:
		max7219_PrintDigit(DIGIT_3,18,true);
 80004dc:	2201      	movs	r2, #1
 80004de:	2112      	movs	r1, #18
 80004e0:	2003      	movs	r0, #3
 80004e2:	f001 fb9d 	bl	8001c20 <max7219_PrintDigit>
		segment_display_function_settings(selected_menu,F3_DURATION);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <display_menu+0xac>)
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f9df 	bl	80008b4 <segment_display_function_settings>
		break;
 80004f6:	e016      	b.n	8000526 <display_menu+0x9a>
	case 4:
		max7219_PrintDigit(DIGIT_3,19,true);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2113      	movs	r1, #19
 80004fc:	2003      	movs	r0, #3
 80004fe:	f001 fb8f 	bl	8001c20 <max7219_PrintDigit>
		segment_display_function_settings(selected_menu,F4_DURATION);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <display_menu+0xb0>)
 8000506:	7812      	ldrb	r2, [r2, #0]
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f9d1 	bl	80008b4 <segment_display_function_settings>
		break;
 8000512:	e008      	b.n	8000526 <display_menu+0x9a>
	case 5:
		segment_display_function_settings(selected_menu,F5_DURATION);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <display_menu+0xb4>)
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f9c8 	bl	80008b4 <segment_display_function_settings>
		break;
 8000524:	bf00      	nop
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000001 	.word	0x20000001
 8000534:	20000002 	.word	0x20000002
 8000538:	20000003 	.word	0x20000003
 800053c:	20000004 	.word	0x20000004
 8000540:	20000005 	.word	0x20000005

08000544 <setting_menu_loop>:
void setting_menu_loop(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	reset_all_state();
 800054a:	f000 fab5 	bl	8000ab8 <reset_all_state>
	is_standby = false;
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <setting_menu_loop+0x70>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
	while(setting_mode != 0){
 8000554:	e027      	b.n	80005a6 <setting_menu_loop+0x62>
		uint8_t btn_read = read_button();
 8000556:	f000 fd13 	bl	8000f80 <read_button>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
		if(btn_read == 7){
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b07      	cmp	r3, #7
 8000562:	d10f      	bne.n	8000584 <setting_menu_loop+0x40>
			setting_mode += 1;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <setting_menu_loop+0x74>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <setting_menu_loop+0x74>)
 800056e:	701a      	strb	r2, [r3, #0]
			if(setting_mode >= 6){
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <setting_menu_loop+0x74>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b05      	cmp	r3, #5
 8000576:	d916      	bls.n	80005a6 <setting_menu_loop+0x62>
				setting_mode = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <setting_menu_loop+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
				reset_all_state();
 800057e:	f000 fa9b 	bl	8000ab8 <reset_all_state>
				return;
 8000582:	e014      	b.n	80005ae <setting_menu_loop+0x6a>
			}
			continue;
		}else if(btn_read == 1){
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <setting_menu_loop+0x52>
			set_add_duration_of_function(setting_mode);
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <setting_menu_loop+0x74>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f860 	bl	8000654 <set_add_duration_of_function>
 8000594:	e007      	b.n	80005a6 <setting_menu_loop+0x62>
		}else if(btn_read == 2){
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d104      	bne.n	80005a6 <setting_menu_loop+0x62>
			set_substract_duration_of_function(setting_mode);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <setting_menu_loop+0x74>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8ef 	bl	8000784 <set_substract_duration_of_function>
	while(setting_mode != 0){
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <setting_menu_loop+0x74>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1d3      	bne.n	8000556 <setting_menu_loop+0x12>
		}
	}
}
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000
 80005b8:	200000d5 	.word	0x200000d5

080005bc <eeprom_write>:
void eeprom_write(uint8_t addr, uint8_t data){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	 *   0x05   |  F5_DURATION
	 *
	 *	 0x06   |  credit
	 *
	 * */
	switch(addr){
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d839      	bhi.n	8000648 <eeprom_write+0x8c>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <eeprom_write+0x20>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	080005f5 	.word	0x080005f5
 80005e0:	08000603 	.word	0x08000603
 80005e4:	08000611 	.word	0x08000611
 80005e8:	0800061f 	.word	0x0800061f
 80005ec:	0800062d 	.word	0x0800062d
 80005f0:	0800063b 	.word	0x0800063b
	case 0x01:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, data);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	461a      	mov	r2, r3
 80005f8:	2101      	movs	r1, #1
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <eeprom_write+0x94>)
 80005fc:	f003 fc4e 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 8000600:	e022      	b.n	8000648 <eeprom_write+0x8c>
	case 0x02:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, data);
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	461a      	mov	r2, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <eeprom_write+0x94>)
 800060a:	f003 fc47 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 800060e:	e01b      	b.n	8000648 <eeprom_write+0x8c>
	case 0x03:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, data);
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	461a      	mov	r2, r3
 8000614:	2103      	movs	r1, #3
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <eeprom_write+0x94>)
 8000618:	f003 fc40 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 800061c:	e014      	b.n	8000648 <eeprom_write+0x8c>
	case 0x04:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, data);
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	461a      	mov	r2, r3
 8000622:	2104      	movs	r1, #4
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <eeprom_write+0x94>)
 8000626:	f003 fc39 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 800062a:	e00d      	b.n	8000648 <eeprom_write+0x8c>
	case 0x05:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, data);
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	2105      	movs	r1, #5
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <eeprom_write+0x94>)
 8000634:	f003 fc32 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 8000638:	e006      	b.n	8000648 <eeprom_write+0x8c>
	case 0x06:
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, data);
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	461a      	mov	r2, r3
 800063e:	2106      	movs	r1, #6
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <eeprom_write+0x94>)
 8000642:	f003 fc2b 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		break;
 8000646:	bf00      	nop
	}

}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000010c 	.word	0x2000010c

08000654 <set_add_duration_of_function>:
void set_add_duration_of_function(uint8_t _selected_menu){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d075      	beq.n	8000750 <set_add_duration_of_function+0xfc>
		switch (_selected_menu) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	3b01      	subs	r3, #1
 8000668:	2b04      	cmp	r3, #4
 800066a:	d87c      	bhi.n	8000766 <set_add_duration_of_function+0x112>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <set_add_duration_of_function+0x20>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000689 	.word	0x08000689
 8000678:	080006b1 	.word	0x080006b1
 800067c:	080006d9 	.word	0x080006d9
 8000680:	08000701 	.word	0x08000701
 8000684:	08000729 	.word	0x08000729
		case 1:
			if(F1_DURATION < 99){
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <set_add_duration_of_function+0x11c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b62      	cmp	r3, #98	; 0x62
 8000690:	d860      	bhi.n	8000754 <set_add_duration_of_function+0x100>
				F1_DURATION += 1;
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <set_add_duration_of_function+0x11c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <set_add_duration_of_function+0x11c>)
 800069e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80006a0:	4b33      	ldr	r3, [pc, #204]	; (8000770 <set_add_duration_of_function+0x11c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff87 	bl	80005bc <eeprom_write>
			}
			break;
 80006ae:	e051      	b.n	8000754 <set_add_duration_of_function+0x100>
		case 2:
			if(F2_DURATION < 99){
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <set_add_duration_of_function+0x120>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b62      	cmp	r3, #98	; 0x62
 80006b8:	d84e      	bhi.n	8000758 <set_add_duration_of_function+0x104>
				F2_DURATION += 1;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <set_add_duration_of_function+0x120>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <set_add_duration_of_function+0x120>)
 80006c6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <set_add_duration_of_function+0x120>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff ff73 	bl	80005bc <eeprom_write>
			}
			break;
 80006d6:	e03f      	b.n	8000758 <set_add_duration_of_function+0x104>
		case 3:
			if(F3_DURATION < 99){
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <set_add_duration_of_function+0x124>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b62      	cmp	r3, #98	; 0x62
 80006e0:	d83c      	bhi.n	800075c <set_add_duration_of_function+0x108>
				F3_DURATION += 1;
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <set_add_duration_of_function+0x124>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <set_add_duration_of_function+0x124>)
 80006ee:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <set_add_duration_of_function+0x124>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2003      	movs	r0, #3
 80006fa:	f7ff ff5f 	bl	80005bc <eeprom_write>
			}
			break;
 80006fe:	e02d      	b.n	800075c <set_add_duration_of_function+0x108>
		case 4:
			if(F4_DURATION < 99){
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <set_add_duration_of_function+0x128>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b62      	cmp	r3, #98	; 0x62
 8000708:	d82a      	bhi.n	8000760 <set_add_duration_of_function+0x10c>
				F4_DURATION += 1;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <set_add_duration_of_function+0x128>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <set_add_duration_of_function+0x128>)
 8000716:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <set_add_duration_of_function+0x128>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2004      	movs	r0, #4
 8000722:	f7ff ff4b 	bl	80005bc <eeprom_write>
			}
			break;
 8000726:	e01b      	b.n	8000760 <set_add_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION < 99){
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <set_add_duration_of_function+0x12c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b62      	cmp	r3, #98	; 0x62
 8000730:	d818      	bhi.n	8000764 <set_add_duration_of_function+0x110>
				F5_DURATION += 1;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <set_add_duration_of_function+0x12c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <set_add_duration_of_function+0x12c>)
 800073e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <set_add_duration_of_function+0x12c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4619      	mov	r1, r3
 8000748:	2005      	movs	r0, #5
 800074a:	f7ff ff37 	bl	80005bc <eeprom_write>
			}
			break;
 800074e:	e009      	b.n	8000764 <set_add_duration_of_function+0x110>
		}
	}
 8000750:	bf00      	nop
 8000752:	e008      	b.n	8000766 <set_add_duration_of_function+0x112>
			break;
 8000754:	bf00      	nop
 8000756:	e006      	b.n	8000766 <set_add_duration_of_function+0x112>
			break;
 8000758:	bf00      	nop
 800075a:	e004      	b.n	8000766 <set_add_duration_of_function+0x112>
			break;
 800075c:	bf00      	nop
 800075e:	e002      	b.n	8000766 <set_add_duration_of_function+0x112>
			break;
 8000760:	bf00      	nop
 8000762:	e000      	b.n	8000766 <set_add_duration_of_function+0x112>
			break;
 8000764:	bf00      	nop
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000001 	.word	0x20000001
 8000774:	20000002 	.word	0x20000002
 8000778:	20000003 	.word	0x20000003
 800077c:	20000004 	.word	0x20000004
 8000780:	20000005 	.word	0x20000005

08000784 <set_substract_duration_of_function>:

void set_substract_duration_of_function(uint8_t _selected_menu){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	if(_selected_menu > 0){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d075      	beq.n	8000880 <set_substract_duration_of_function+0xfc>
		switch (_selected_menu) {
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	3b01      	subs	r3, #1
 8000798:	2b04      	cmp	r3, #4
 800079a:	d87c      	bhi.n	8000896 <set_substract_duration_of_function+0x112>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <set_substract_duration_of_function+0x20>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007b9 	.word	0x080007b9
 80007a8:	080007e1 	.word	0x080007e1
 80007ac:	08000809 	.word	0x08000809
 80007b0:	08000831 	.word	0x08000831
 80007b4:	08000859 	.word	0x08000859
		case 1:
			if(F1_DURATION >0){
 80007b8:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <set_substract_duration_of_function+0x11c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d060      	beq.n	8000884 <set_substract_duration_of_function+0x100>
				F1_DURATION -= 1;
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <set_substract_duration_of_function+0x11c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3b01      	subs	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <set_substract_duration_of_function+0x11c>)
 80007ce:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x01,F1_DURATION);
 80007d0:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <set_substract_duration_of_function+0x11c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff feef 	bl	80005bc <eeprom_write>
			}
			break;
 80007de:	e051      	b.n	8000884 <set_substract_duration_of_function+0x100>
		case 2:
			if(F2_DURATION >0){
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <set_substract_duration_of_function+0x120>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d04e      	beq.n	8000888 <set_substract_duration_of_function+0x104>
				F2_DURATION -= 1;
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <set_substract_duration_of_function+0x120>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <set_substract_duration_of_function+0x120>)
 80007f6:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x02,F2_DURATION);
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <set_substract_duration_of_function+0x120>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	2002      	movs	r0, #2
 8000802:	f7ff fedb 	bl	80005bc <eeprom_write>
			}
			break;
 8000806:	e03f      	b.n	8000888 <set_substract_duration_of_function+0x104>
		case 3:
			if(F3_DURATION >0){
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <set_substract_duration_of_function+0x124>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d03c      	beq.n	800088c <set_substract_duration_of_function+0x108>
				F3_DURATION -= 1;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <set_substract_duration_of_function+0x124>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	3b01      	subs	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <set_substract_duration_of_function+0x124>)
 800081e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x03,F3_DURATION);
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <set_substract_duration_of_function+0x124>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	2003      	movs	r0, #3
 800082a:	f7ff fec7 	bl	80005bc <eeprom_write>
			}
			break;
 800082e:	e02d      	b.n	800088c <set_substract_duration_of_function+0x108>
		case 4:
			if(F4_DURATION >0){
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <set_substract_duration_of_function+0x128>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d02a      	beq.n	8000890 <set_substract_duration_of_function+0x10c>
				F4_DURATION -= 1;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <set_substract_duration_of_function+0x128>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <set_substract_duration_of_function+0x128>)
 8000846:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x04,F4_DURATION);
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <set_substract_duration_of_function+0x128>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff feb3 	bl	80005bc <eeprom_write>
			}
			break;
 8000856:	e01b      	b.n	8000890 <set_substract_duration_of_function+0x10c>
		case 5:
			if(F5_DURATION >0){
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <set_substract_duration_of_function+0x12c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d018      	beq.n	8000894 <set_substract_duration_of_function+0x110>
				F5_DURATION -= 1;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <set_substract_duration_of_function+0x12c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3b01      	subs	r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <set_substract_duration_of_function+0x12c>)
 800086e:	701a      	strb	r2, [r3, #0]
				eeprom_write(0x05,F5_DURATION);
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <set_substract_duration_of_function+0x12c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	2005      	movs	r0, #5
 800087a:	f7ff fe9f 	bl	80005bc <eeprom_write>
			}
			break;
 800087e:	e009      	b.n	8000894 <set_substract_duration_of_function+0x110>
		}
	}
 8000880:	bf00      	nop
 8000882:	e008      	b.n	8000896 <set_substract_duration_of_function+0x112>
			break;
 8000884:	bf00      	nop
 8000886:	e006      	b.n	8000896 <set_substract_duration_of_function+0x112>
			break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <set_substract_duration_of_function+0x112>
			break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <set_substract_duration_of_function+0x112>
			break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <set_substract_duration_of_function+0x112>
			break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000001 	.word	0x20000001
 80008a4:	20000002 	.word	0x20000002
 80008a8:	20000003 	.word	0x20000003
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000005 	.word	0x20000005

080008b4 <segment_display_function_settings>:
void segment_display_function_settings(int func_number,int value){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	max7219_Decode_On();
 80008be:	f001 f99f 	bl	8001c00 <max7219_Decode_On>
	max7219_Clean ();
 80008c2:	f001 f93b 	bl	8001b3c <max7219_Clean>
	if(value < 10){
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b09      	cmp	r3, #9
 80008ca:	dc04      	bgt.n	80008d6 <segment_display_function_settings+0x22>
		max7219_PrintItos (DIGIT_1, value );
 80008cc:	6839      	ldr	r1, [r7, #0]
 80008ce:	2001      	movs	r0, #1
 80008d0:	f001 fa00 	bl	8001cd4 <max7219_PrintItos>
 80008d4:	e009      	b.n	80008ea <segment_display_function_settings+0x36>
	}else if(value >= 10 && value < 100){
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b09      	cmp	r3, #9
 80008da:	dd06      	ble.n	80008ea <segment_display_function_settings+0x36>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b63      	cmp	r3, #99	; 0x63
 80008e0:	dc03      	bgt.n	80008ea <segment_display_function_settings+0x36>
		max7219_PrintItos (DIGIT_2, value );
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	2002      	movs	r0, #2
 80008e6:	f001 f9f5 	bl	8001cd4 <max7219_PrintItos>
	}
	max7219_PrintDigit(DIGIT_3,func_number,true);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	2003      	movs	r0, #3
 80008f4:	f001 f994 	bl	8001c20 <max7219_PrintDigit>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d177      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x102>
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"timer2 tick!\r\n", 14,HAL_MAX_DELAY);
		tim2_counter += 1;
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a3c      	ldr	r2, [pc, #240]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800091a:	6013      	str	r3, [r2, #0]
		tim2_500ms_counter += 1;
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000924:	6013      	str	r3, [r2, #0]
		tim2_300ms_counter += 1;
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800092e:	6013      	str	r3, [r2, #0]
		tim2_400ms_counter += 1;
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a38      	ldr	r2, [pc, #224]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000938:	6013      	str	r3, [r2, #0]
		tim2_200ms_counter += 1;
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a36      	ldr	r2, [pc, #216]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000942:	6013      	str	r3, [r2, #0]
		if(tim2_counter % 10 == 0){ /// 100 ms tick
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800094a:	fb83 2301 	smull	r2, r3, r3, r1
 800094e:	109a      	asrs	r2, r3, #2
 8000950:	17cb      	asrs	r3, r1, #31
 8000952:	1ad2      	subs	r2, r2, r3
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1aca      	subs	r2, r1, r3
 800095e:	2a00      	cmp	r2, #0
 8000960:	d122      	bne.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			char tmp_msg[35];
			sprintf(tmp_msg,"pressed button : %d \r\n",pressed_button);
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	492e      	ldr	r1, [pc, #184]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fea2 	bl	80056b8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fbe7 	bl	800014c <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	f107 010c 	add.w	r1, r7, #12
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098a:	4828      	ldr	r0, [pc, #160]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800098c:	f004 fcf7 	bl	800537e <HAL_UART_Transmit>
			if(setting_mode != 0){
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0xa8>
				is_standby = false;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
				display_menu(setting_mode);
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd72 	bl	800048c <display_menu>
			}
		}

		if(tim2_counter >= 100){
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b63      	cmp	r3, #99	; 0x63
 80009ae:	dd04      	ble.n	80009ba <HAL_TIM_PeriodElapsedCallback+0xba>
			tim2_counter = 0;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
			do_1sec_tick();
 80009b6:	f000 f935 	bl	8000c24 <do_1sec_tick>
		}
		if(tim2_500ms_counter >= 50){
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b31      	cmp	r3, #49	; 0x31
 80009c0:	dd04      	ble.n	80009cc <HAL_TIM_PeriodElapsedCallback+0xcc>
			tim2_500ms_counter = 0;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
			do_500ms_tick();
 80009c8:	f000 f990 	bl	8000cec <do_500ms_tick>
		}
		if(tim2_200ms_counter >= 20){
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b13      	cmp	r3, #19
 80009d2:	dd04      	ble.n	80009de <HAL_TIM_PeriodElapsedCallback+0xde>
			tim2_200ms_counter = 0;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
			do_200ms_tick();
 80009da:	f000 f995 	bl	8000d08 <do_200ms_tick>
		}
		if(tim2_300ms_counter >= 30){
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b1d      	cmp	r3, #29
 80009e4:	dd04      	ble.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0xf0>
			tim2_300ms_counter = 0;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			do_300ms_tick();
 80009ec:	f000 f9ca 	bl	8000d84 <do_300ms_tick>
		}
		if(tim2_400ms_counter >= 40){
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b27      	cmp	r3, #39	; 0x27
 80009f6:	dd04      	ble.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x102>
			tim2_400ms_counter = 0;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
			do_400ms_tick();
 80009fe:	f000 f9cd 	bl	8000d9c <do_400ms_tick>
		}
	}
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000b8 	.word	0x200000b8
 8000a10:	200000c8 	.word	0x200000c8
 8000a14:	200000bc 	.word	0x200000bc
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	200000c0 	.word	0x200000c0
 8000a20:	66666667 	.word	0x66666667
 8000a24:	200000d4 	.word	0x200000d4
 8000a28:	08005f64 	.word	0x08005f64
 8000a2c:	2000024c 	.word	0x2000024c
 8000a30:	200000d5 	.word	0x200000d5
 8000a34:	20000000 	.word	0x20000000

08000a38 <get_function_duration>:
uint8_t get_function_duration(uint8_t selected_mode){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	uint8_t duration_per_1credit = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
	switch(selected_mode){
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d820      	bhi.n	8000a90 <get_function_duration+0x58>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <get_function_duration+0x1c>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a69 	.word	0x08000a69
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a79 	.word	0x08000a79
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a89 	.word	0x08000a89
	case 1:
		duration_per_1credit = F1_DURATION;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <get_function_duration+0x6c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a6e:	e012      	b.n	8000a96 <get_function_duration+0x5e>
	case 2:
		duration_per_1credit = F2_DURATION;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <get_function_duration+0x70>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	73fb      	strb	r3, [r7, #15]
		break;
 8000a76:	e00e      	b.n	8000a96 <get_function_duration+0x5e>
	case 3:
		duration_per_1credit = F3_DURATION;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <get_function_duration+0x74>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a7e:	e00a      	b.n	8000a96 <get_function_duration+0x5e>
	case 4:
		duration_per_1credit = F4_DURATION;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <get_function_duration+0x78>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	73fb      	strb	r3, [r7, #15]
		break;
 8000a86:	e006      	b.n	8000a96 <get_function_duration+0x5e>
	case 5:
		duration_per_1credit = F5_DURATION;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <get_function_duration+0x7c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a8e:	e002      	b.n	8000a96 <get_function_duration+0x5e>
	default:
		duration_per_1credit = 10;
 8000a90:	230a      	movs	r3, #10
 8000a92:	73fb      	strb	r3, [r7, #15]
		break;
 8000a94:	bf00      	nop
	}
	return duration_per_1credit;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000001 	.word	0x20000001
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	20000003 	.word	0x20000003
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000005 	.word	0x20000005

08000ab8 <reset_all_state>:
void reset_all_state(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8000abc:	481a      	ldr	r0, [pc, #104]	; (8000b28 <reset_all_state+0x70>)
 8000abe:	f003 fd2b 	bl	8004518 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <reset_all_state+0x70>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <reset_all_state+0x70>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f06f 0201 	mvn.w	r2, #1
 8000ad2:	611a      	str	r2, [r3, #16]
	reset_all_pins();
 8000ad4:	f000 f9aa 	bl	8000e2c <reset_all_pins>
	consume_credit = false;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <reset_all_state+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
	credit = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <reset_all_state+0x78>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
	is_standby = true;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <reset_all_state+0x7c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
	is_operation_running = false;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <reset_all_state+0x80>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
	pressed_button = 0;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <reset_all_state+0x84>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 8000af6:	f001 f86f 	bl	8001bd8 <max7219_Turn_On>
	max7219_Clean();
 8000afa:	f001 f81f 	bl	8001b3c <max7219_Clean>
	tim2_counter = 0;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <reset_all_state+0x88>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
	tim2_500ms_counter = 0;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <reset_all_state+0x8c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
	tim2_300ms_counter = 0;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <reset_all_state+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
	tim2_400ms_counter = 0;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <reset_all_state+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
	tim2_200ms_counter = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <reset_all_state+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <reset_all_state+0x70>)
 8000b1e:	f003 fca9 	bl	8004474 <HAL_TIM_Base_Start_IT>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001c0 	.word	0x200001c0
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	200000d2 	.word	0x200000d2
 8000b34:	20000000 	.word	0x20000000
 8000b38:	200000d0 	.word	0x200000d0
 8000b3c:	200000d4 	.word	0x200000d4
 8000b40:	200000b8 	.word	0x200000b8
 8000b44:	200000c8 	.word	0x200000c8
 8000b48:	200000bc 	.word	0x200000bc
 8000b4c:	200000c4 	.word	0x200000c4
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <decrease_credit>:
void decrease_credit(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
	if(consume_credit){
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <decrease_credit+0xb4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d04d      	beq.n	8000c00 <decrease_credit+0xac>
		credit_consume_counter += 1;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <decrease_credit+0xb8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <decrease_credit+0xb8>)
 8000b70:	701a      	strb	r2, [r3, #0]
		char tmp_msg[35];
		sprintf(tmp_msg,"Consuming counter: %d \r\n",credit_consume_counter);
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <decrease_credit+0xb8>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4924      	ldr	r1, [pc, #144]	; (8000c10 <decrease_credit+0xbc>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fd9a 	bl	80056b8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fae0 	bl	800014c <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	1d39      	adds	r1, r7, #4
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <decrease_credit+0xc0>)
 8000b98:	f004 fbf1 	bl	800537e <HAL_UART_Transmit>
		uint8_t duration = get_function_duration(pressed_button);
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <decrease_credit+0xc4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff49 	bl	8000a38 <get_function_duration>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(credit_consume_counter >= duration){
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <decrease_credit+0xb8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d81a      	bhi.n	8000bf0 <decrease_credit+0x9c>
			credit_consume_counter = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <decrease_credit+0xb8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"Consuming 1 credit\r\n", 20,HAL_MAX_DELAY);
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc4:	2214      	movs	r2, #20
 8000bc6:	4915      	ldr	r1, [pc, #84]	; (8000c1c <decrease_credit+0xc8>)
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <decrease_credit+0xc0>)
 8000bca:	f004 fbd8 	bl	800537e <HAL_UART_Transmit>
			credit -= 1; // decrease money
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <decrease_credit+0xcc>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <decrease_credit+0xcc>)
 8000bda:	801a      	strh	r2, [r3, #0]
			if(credit <= 0){
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <decrease_credit+0xcc>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <decrease_credit+0x9c>
				credit = 0;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <decrease_credit+0xcc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
				reset_all_state();
 8000bec:	f7ff ff64 	bl	8000ab8 <reset_all_state>
			}
		}
		eeprom_write(0x06,credit);
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <decrease_credit+0xcc>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f7ff fcde 	bl	80005bc <eeprom_write>
	}
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000d8 	.word	0x200000d8
 8000c0c:	200000de 	.word	0x200000de
 8000c10:	08005f7c 	.word	0x08005f7c
 8000c14:	2000024c 	.word	0x2000024c
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	08005f98 	.word	0x08005f98
 8000c20:	200000d2 	.word	0x200000d2

08000c24 <do_1sec_tick>:
void do_1sec_tick(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"1sec tick\r\n", 11,HAL_MAX_DELAY);
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	220b      	movs	r2, #11
 8000c30:	4926      	ldr	r1, [pc, #152]	; (8000ccc <do_1sec_tick+0xa8>)
 8000c32:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <do_1sec_tick+0xac>)
 8000c34:	f004 fba3 	bl	800537e <HAL_UART_Transmit>
	char tmp_msg[35];
	sprintf(tmp_msg,"#### current credit: %d, mode: %d\r\n",credit,pressed_button);
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <do_1sec_tick+0xb0>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <do_1sec_tick+0xb4>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	1d38      	adds	r0, r7, #4
 8000c46:	4925      	ldr	r1, [pc, #148]	; (8000cdc <do_1sec_tick+0xb8>)
 8000c48:	f004 fd36 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fa7c 	bl	800014c <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	1d39      	adds	r1, r7, #4
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5e:	481c      	ldr	r0, [pc, #112]	; (8000cd0 <do_1sec_tick+0xac>)
 8000c60:	f004 fb8d 	bl	800537e <HAL_UART_Transmit>
	decrease_credit(); // logic runner funtion
 8000c64:	f7ff ff76 	bl	8000b54 <decrease_credit>
	iot_round_counter += 1;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <do_1sec_tick+0xbc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <do_1sec_tick+0xbc>)
 8000c70:	6013      	str	r3, [r2, #0]
	if(iot_round_counter >= IOT_SEND_INTERVAL){
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <do_1sec_tick+0xbc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dd23      	ble.n	8000cc2 <do_1sec_tick+0x9e>
		max7219_DisableDisplayTest(); /// keep disable display test to prevent 888
 8000c7a:	f000 ff57 	bl	8001b2c <max7219_DisableDisplayTest>
		iot_round_counter = 0;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <do_1sec_tick+0xbc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
		send_iot_status(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fbc3 	bl	8000410 <send_iot_status>
		if(last_coin_money != 0){
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <do_1sec_tick+0xc0>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d008      	beq.n	8000ca6 <do_1sec_tick+0x82>
			send_iot_status(last_coin_money);
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <do_1sec_tick+0xc0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbb8 	bl	8000410 <send_iot_status>
			last_coin_money = 0;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <do_1sec_tick+0xc0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		}
		if(last_note_money != 0){
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <do_1sec_tick+0xc4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d008      	beq.n	8000cc2 <do_1sec_tick+0x9e>
			send_iot_status(last_note_money);
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <do_1sec_tick+0xc4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fbaa 	bl	8000410 <send_iot_status>
			last_note_money = 0;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <do_1sec_tick+0xc4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08005fb0 	.word	0x08005fb0
 8000cd0:	2000024c 	.word	0x2000024c
 8000cd4:	200000d2 	.word	0x200000d2
 8000cd8:	200000d4 	.word	0x200000d4
 8000cdc:	08005fbc 	.word	0x08005fbc
 8000ce0:	200000cc 	.word	0x200000cc
 8000ce4:	200000fe 	.word	0x200000fe
 8000ce8:	200000fd 	.word	0x200000fd

08000cec <do_500ms_tick>:
void do_500ms_tick(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	eeprom_write(0x06,credit);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <do_500ms_tick+0x18>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2006      	movs	r0, #6
 8000cfc:	f7ff fc5e 	bl	80005bc <eeprom_write>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200000d2 	.word	0x200000d2

08000d08 <do_200ms_tick>:
void do_200ms_tick(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
	if(front_button_reset_credit_press){
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <do_200ms_tick+0x68>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d007      	beq.n	8000d28 <do_200ms_tick+0x20>
		front_button_reset_credit_counter += 1;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <do_200ms_tick+0x6c>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <do_200ms_tick+0x6c>)
 8000d24:	801a      	strh	r2, [r3, #0]
 8000d26:	e002      	b.n	8000d2e <do_200ms_tick+0x26>
	}else{
		front_button_reset_credit_counter = 0;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <do_200ms_tick+0x6c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	801a      	strh	r2, [r3, #0]
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"===== front button counter: %d\r\n",front_button_reset_credit_counter);
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <do_200ms_tick+0x6c>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	490f      	ldr	r1, [pc, #60]	; (8000d78 <do_200ms_tick+0x70>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fcbc 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa02 	bl	800014c <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d52:	480a      	ldr	r0, [pc, #40]	; (8000d7c <do_200ms_tick+0x74>)
 8000d54:	f004 fb13 	bl	800537e <HAL_UART_Transmit>
	if(is_standby){
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <do_200ms_tick+0x78>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <do_200ms_tick+0x5e>
		segment_display_standby();
 8000d62:	f000 fa21 	bl	80011a8 <segment_display_standby>
	}
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000da 	.word	0x200000da
 8000d74:	200000dc 	.word	0x200000dc
 8000d78:	08005fe0 	.word	0x08005fe0
 8000d7c:	2000024c 	.word	0x2000024c
 8000d80:	20000000 	.word	0x20000000

08000d84 <do_300ms_tick>:
void do_300ms_tick(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(ALIVE_LED_GPIO_Port, ALIVE_LED_Pin);
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <do_300ms_tick+0x14>)
 8000d8e:	f001 ff3e 	bl	8002c0e <HAL_GPIO_TogglePin>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010800 	.word	0x40010800

08000d9c <do_400ms_tick>:

void do_400ms_tick(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	if(is_operation_running){
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <do_400ms_tick+0x64>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d025      	beq.n	8000df6 <do_400ms_tick+0x5a>
		display_binking = !display_binking;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <do_400ms_tick+0x68>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf14      	ite	ne
 8000db4:	2301      	movne	r3, #1
 8000db6:	2300      	moveq	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <do_400ms_tick+0x68>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		if(display_binking && (current_out_port != 0)){
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <do_400ms_tick+0x68>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d007      	beq.n	8000de4 <do_400ms_tick+0x48>
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <do_400ms_tick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <do_400ms_tick+0x48>
			max7219_Turn_Off();
 8000dde:	f000 ff05 	bl	8001bec <max7219_Turn_Off>
		}

	}else{
		max7219_Turn_On();
	}
}
 8000de2:	e00a      	b.n	8000dfa <do_400ms_tick+0x5e>
			max7219_Turn_On();
 8000de4:	f000 fef8 	bl	8001bd8 <max7219_Turn_On>
			segment_display_int(credit);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <do_400ms_tick+0x70>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f9b0 	bl	8001154 <segment_display_int>
}
 8000df4:	e001      	b.n	8000dfa <do_400ms_tick+0x5e>
		max7219_Turn_On();
 8000df6:	f000 feef 	bl	8001bd8 <max7219_Turn_On>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000d0 	.word	0x200000d0
 8000e04:	200000d9 	.word	0x200000d9
 8000e08:	200000d6 	.word	0x200000d6
 8000e0c:	200000d2 	.word	0x200000d2

08000e10 <init_display>:

void init_display(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8000e14:	f000 fe8a 	bl	8001b2c <max7219_DisableDisplayTest>
	HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f001 fc13 	bl	8002644 <HAL_Delay>
	max7219_Init ( 5 );
 8000e1e:	2005      	movs	r0, #5
 8000e20:	f000 fe59 	bl	8001ad6 <max7219_Init>
	max7219_Decode_On ();
 8000e24:	f000 feec 	bl	8001c00 <max7219_Decode_On>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <reset_all_pins>:
void reset_all_pins(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, GPIO_PIN_RESET); // pin b0 --> out 1
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <reset_all_pins+0x54>)
 8000e36:	f001 fed2 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, GPIO_PIN_RESET); // pin b1 --> out 2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <reset_all_pins+0x54>)
 8000e40:	f001 fecd 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, GPIO_PIN_RESET); // pin a8 --> out 3
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <reset_all_pins+0x58>)
 8000e4c:	f001 fec7 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, GPIO_PIN_RESET); // pin b8 --> out 4
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <reset_all_pins+0x54>)
 8000e58:	f001 fec1 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_5_GPIO_Port, OUT_5_Pin, GPIO_PIN_RESET); // pin b9 --> out 5
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <reset_all_pins+0x54>)
 8000e64:	f001 febb 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_6_GPIO_Port, OUT_6_Pin, GPIO_PIN_RESET); // pin b12 --> out 6
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <reset_all_pins+0x54>)
 8000e70:	f001 feb5 	bl	8002bde <HAL_GPIO_WritePin>
	current_out_port = 0;
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <reset_all_pins+0x5c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	40010800 	.word	0x40010800
 8000e88:	200000d6 	.word	0x200000d6

08000e8c <set_output_to>:

void set_output_to(uint8_t pin){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	if(current_out_port == pin){
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <set_output_to+0xb0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d048      	beq.n	8000f34 <set_output_to+0xa8>
		return;
	}
	reset_all_pins();
 8000ea2:	f7ff ffc3 	bl	8000e2c <reset_all_pins>
	switch(pin){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d83c      	bhi.n	8000f28 <set_output_to+0x9c>
 8000eae:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <set_output_to+0x28>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000ec9 	.word	0x08000ec9
 8000eb8:	08000edb 	.word	0x08000edb
 8000ebc:	08000eed 	.word	0x08000eed
 8000ec0:	08000f01 	.word	0x08000f01
 8000ec4:	08000f15 	.word	0x08000f15
	case 1:
		HAL_GPIO_WritePin(OUT_1_GPIO_Port, OUT_1_Pin, GPIO_PIN_SET); // pin b0 --> out 1
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2101      	movs	r1, #1
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <set_output_to+0xb4>)
 8000ece:	f001 fe86 	bl	8002bde <HAL_GPIO_WritePin>
		current_out_port = 1;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <set_output_to+0xb0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT1\r\n", 21,HAL_MAX_DELAY);
		break;
 8000ed8:	e02d      	b.n	8000f36 <set_output_to+0xaa>
	case 2:
		HAL_GPIO_WritePin(OUT_2_GPIO_Port, OUT_2_Pin, GPIO_PIN_SET); // pin b1 --> out 2
 8000eda:	2201      	movs	r2, #1
 8000edc:	2102      	movs	r1, #2
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <set_output_to+0xb4>)
 8000ee0:	f001 fe7d 	bl	8002bde <HAL_GPIO_WritePin>
		current_out_port = 2;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <set_output_to+0xb0>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT2\r\n", 21,HAL_MAX_DELAY);
		break;
 8000eea:	e024      	b.n	8000f36 <set_output_to+0xaa>
	case 3:
		HAL_GPIO_WritePin(OUT_3_GPIO_Port, OUT_3_Pin, GPIO_PIN_SET); // pin a8 --> out 3
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4814      	ldr	r0, [pc, #80]	; (8000f44 <set_output_to+0xb8>)
 8000ef4:	f001 fe73 	bl	8002bde <HAL_GPIO_WritePin>
		current_out_port = 3;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <set_output_to+0xb0>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT3\r\n", 21,HAL_MAX_DELAY);
		break;
 8000efe:	e01a      	b.n	8000f36 <set_output_to+0xaa>
	case 4:
		HAL_GPIO_WritePin(OUT_4_GPIO_Port, OUT_4_Pin, GPIO_PIN_SET); // pin b8 --> out 4
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <set_output_to+0xb4>)
 8000f08:	f001 fe69 	bl	8002bde <HAL_GPIO_WritePin>
		current_out_port = 4;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <set_output_to+0xb0>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT4\r\n", 21,HAL_MAX_DELAY);
		break;
 8000f12:	e010      	b.n	8000f36 <set_output_to+0xaa>
	case 5:
		HAL_GPIO_WritePin(OUT_5_GPIO_Port, OUT_5_Pin, GPIO_PIN_SET); // pin b9 --> out 5
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <set_output_to+0xb4>)
 8000f1c:	f001 fe5f 	bl	8002bde <HAL_GPIO_WritePin>
		current_out_port = 5;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <set_output_to+0xb0>)
 8000f22:	2205      	movs	r2, #5
 8000f24:	701a      	strb	r2, [r3, #0]
		//		HAL_UART_Transmit(&huart1, (uint8_t*)"SET OUTPUT TO PORT5\r\n", 21,HAL_MAX_DELAY);
		break;
 8000f26:	e006      	b.n	8000f36 <set_output_to+0xaa>
	default:
		reset_all_pins();
 8000f28:	f7ff ff80 	bl	8000e2c <reset_all_pins>
		current_out_port = 0;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <set_output_to+0xb0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		break;
 8000f32:	e000      	b.n	8000f36 <set_output_to+0xaa>
		return;
 8000f34:	bf00      	nop
	}
}
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000d6 	.word	0x200000d6
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40010800 	.word	0x40010800

08000f48 <do_operation>:

void do_operation(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	set_output_to(pressed_button);
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <do_operation+0x2c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff9b 	bl	8000e8c <set_output_to>
	if(current_out_port != 0){
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <do_operation+0x30>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <do_operation+0x20>
		consume_credit = true;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <do_operation+0x34>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
	}else{
		consume_credit = false;
	}
}
 8000f66:	e002      	b.n	8000f6e <do_operation+0x26>
		consume_credit = false;
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <do_operation+0x34>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000d4 	.word	0x200000d4
 8000f78:	200000d6 	.word	0x200000d6
 8000f7c:	200000d8 	.word	0x200000d8

08000f80 <read_button>:

uint8_t read_button(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(FRONT_SW_1_GPIO_Port, FRONT_SW_1_Pin)){
 8000f84:	2108      	movs	r1, #8
 8000f86:	4868      	ldr	r0, [pc, #416]	; (8001128 <read_button+0x1a8>)
 8000f88:	f001 fe12 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d013      	beq.n	8000fba <read_button+0x3a>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8000f92:	2050      	movs	r0, #80	; 0x50
 8000f94:	f001 fb56 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_1_GPIO_Port, FRONT_SW_1_Pin));
 8000f98:	bf00      	nop
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	4862      	ldr	r0, [pc, #392]	; (8001128 <read_button+0x1a8>)
 8000f9e:	f001 fe07 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f8      	bne.n	8000f9a <read_button+0x1a>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button1!\r\n", 18,HAL_MAX_DELAY);
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fac:	2212      	movs	r2, #18
 8000fae:	495f      	ldr	r1, [pc, #380]	; (800112c <read_button+0x1ac>)
 8000fb0:	485f      	ldr	r0, [pc, #380]	; (8001130 <read_button+0x1b0>)
 8000fb2:	f004 f9e4 	bl	800537e <HAL_UART_Transmit>
		return 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0b3      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_2_GPIO_Port, FRONT_SW_2_Pin)){
 8000fba:	2110      	movs	r1, #16
 8000fbc:	485a      	ldr	r0, [pc, #360]	; (8001128 <read_button+0x1a8>)
 8000fbe:	f001 fdf7 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <read_button+0x70>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8000fc8:	2050      	movs	r0, #80	; 0x50
 8000fca:	f001 fb3b 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_2_GPIO_Port, FRONT_SW_2_Pin));
 8000fce:	bf00      	nop
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4855      	ldr	r0, [pc, #340]	; (8001128 <read_button+0x1a8>)
 8000fd4:	f001 fdec 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f8      	bne.n	8000fd0 <read_button+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button2!\r\n", 18,HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	2212      	movs	r2, #18
 8000fe4:	4953      	ldr	r1, [pc, #332]	; (8001134 <read_button+0x1b4>)
 8000fe6:	4852      	ldr	r0, [pc, #328]	; (8001130 <read_button+0x1b0>)
 8000fe8:	f004 f9c9 	bl	800537e <HAL_UART_Transmit>
		return 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	e098      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_3_GPIO_Port, FRONT_SW_3_Pin)){
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	484d      	ldr	r0, [pc, #308]	; (8001128 <read_button+0x1a8>)
 8000ff4:	f001 fddc 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d013      	beq.n	8001026 <read_button+0xa6>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8000ffe:	2050      	movs	r0, #80	; 0x50
 8001000:	f001 fb20 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_3_GPIO_Port, FRONT_SW_3_Pin));
 8001004:	bf00      	nop
 8001006:	2120      	movs	r1, #32
 8001008:	4847      	ldr	r0, [pc, #284]	; (8001128 <read_button+0x1a8>)
 800100a:	f001 fdd1 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f8      	bne.n	8001006 <read_button+0x86>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button3!\r\n", 18,HAL_MAX_DELAY);
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2212      	movs	r2, #18
 800101a:	4947      	ldr	r1, [pc, #284]	; (8001138 <read_button+0x1b8>)
 800101c:	4844      	ldr	r0, [pc, #272]	; (8001130 <read_button+0x1b0>)
 800101e:	f004 f9ae 	bl	800537e <HAL_UART_Transmit>
		return 3;
 8001022:	2303      	movs	r3, #3
 8001024:	e07d      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_4_GPIO_Port, FRONT_SW_4_Pin)){
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	483f      	ldr	r0, [pc, #252]	; (8001128 <read_button+0x1a8>)
 800102a:	f001 fdc1 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <read_button+0xdc>
		HAL_Delay(SW_DEBOUNCE_TIME);
 8001034:	2050      	movs	r0, #80	; 0x50
 8001036:	f001 fb05 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(FRONT_SW_4_GPIO_Port, FRONT_SW_4_Pin));
 800103a:	bf00      	nop
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	483a      	ldr	r0, [pc, #232]	; (8001128 <read_button+0x1a8>)
 8001040:	f001 fdb6 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f8      	bne.n	800103c <read_button+0xbc>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button4!\r\n", 18,HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104e:	2212      	movs	r2, #18
 8001050:	493a      	ldr	r1, [pc, #232]	; (800113c <read_button+0x1bc>)
 8001052:	4837      	ldr	r0, [pc, #220]	; (8001130 <read_button+0x1b0>)
 8001054:	f004 f993 	bl	800537e <HAL_UART_Transmit>
		return 4;
 8001058:	2304      	movs	r3, #4
 800105a:	e062      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <read_button+0x1a8>)
 8001060:	f001 fda6 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d022      	beq.n	80010b0 <read_button+0x130>
		HAL_Delay(SW_DEBOUNCE_TIME);
 800106a:	2050      	movs	r0, #80	; 0x50
 800106c:	f001 faea 	bl	8002644 <HAL_Delay>
		front_button_reset_credit_press = true;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <read_button+0x1c0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 8001076:	e008      	b.n	800108a <read_button+0x10a>
			if(front_button_reset_credit_counter >= 60){
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <read_button+0x1c4>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b3b      	cmp	r3, #59	; 0x3b
 8001080:	d903      	bls.n	800108a <read_button+0x10a>
				reset_all_state();
 8001082:	f7ff fd19 	bl	8000ab8 <reset_all_state>
				return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e04b      	b.n	8001122 <read_button+0x1a2>
		while(HAL_GPIO_ReadPin(FRONT_SW_5_GPIO_Port, FRONT_SW_5_Pin)){
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	4826      	ldr	r0, [pc, #152]	; (8001128 <read_button+0x1a8>)
 800108e:	f001 fd8f 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ef      	bne.n	8001078 <read_button+0xf8>
			}
		}
		front_button_reset_credit_press = false;
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <read_button+0x1c0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button5!\r\n", 18,HAL_MAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a2:	2212      	movs	r2, #18
 80010a4:	4928      	ldr	r1, [pc, #160]	; (8001148 <read_button+0x1c8>)
 80010a6:	4822      	ldr	r0, [pc, #136]	; (8001130 <read_button+0x1b0>)
 80010a8:	f004 f969 	bl	800537e <HAL_UART_Transmit>
		return 5;
 80010ac:	2305      	movs	r3, #5
 80010ae:	e038      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(CREDIT_RESET_GPIO_Port, CREDIT_RESET_Pin)){
 80010b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <read_button+0x1a8>)
 80010b6:	f001 fd7b 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d014      	beq.n	80010ea <read_button+0x16a>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80010c0:	2050      	movs	r0, #80	; 0x50
 80010c2:	f001 fabf 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(CREDIT_RESET_GPIO_Port, CREDIT_RESET_Pin));
 80010c6:	bf00      	nop
 80010c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <read_button+0x1a8>)
 80010ce:	f001 fd6f 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f7      	bne.n	80010c8 <read_button+0x148>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button credit reset!\r\n", 30,HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	221e      	movs	r2, #30
 80010de:	491b      	ldr	r1, [pc, #108]	; (800114c <read_button+0x1cc>)
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <read_button+0x1b0>)
 80010e2:	f004 f94c 	bl	800537e <HAL_UART_Transmit>
		return 6;
 80010e6:	2306      	movs	r3, #6
 80010e8:	e01b      	b.n	8001122 <read_button+0x1a2>
	}else if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)){
 80010ea:	2104      	movs	r1, #4
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <read_button+0x1a8>)
 80010ee:	f001 fd5f 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <read_button+0x1a0>
		HAL_Delay(SW_DEBOUNCE_TIME);
 80010f8:	2050      	movs	r0, #80	; 0x50
 80010fa:	f001 faa3 	bl	8002644 <HAL_Delay>
		while(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin));
 80010fe:	bf00      	nop
 8001100:	2104      	movs	r1, #4
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <read_button+0x1a8>)
 8001104:	f001 fd54 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f8      	bne.n	8001100 <read_button+0x180>
		HAL_UART_Transmit(&huart1, (uint8_t*)"pressed button mode!\r\n", 22,HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	2216      	movs	r2, #22
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <read_button+0x1d0>)
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <read_button+0x1b0>)
 8001118:	f004 f931 	bl	800537e <HAL_UART_Transmit>
		return 7;
 800111c:	2307      	movs	r3, #7
 800111e:	e000      	b.n	8001122 <read_button+0x1a2>
	}else{
		return 0;
 8001120:	2300      	movs	r3, #0
	}
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40010800 	.word	0x40010800
 800112c:	08006004 	.word	0x08006004
 8001130:	2000024c 	.word	0x2000024c
 8001134:	08006018 	.word	0x08006018
 8001138:	0800602c 	.word	0x0800602c
 800113c:	08006040 	.word	0x08006040
 8001140:	200000da 	.word	0x200000da
 8001144:	200000dc 	.word	0x200000dc
 8001148:	08006054 	.word	0x08006054
 800114c:	08006068 	.word	0x08006068
 8001150:	08006088 	.word	0x08006088

08001154 <segment_display_int>:

void segment_display_int(int number){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	max7219_Turn_Off();
 800115c:	f000 fd46 	bl	8001bec <max7219_Turn_Off>
	max7219_Init(5);
 8001160:	2005      	movs	r0, #5
 8001162:	f000 fcb8 	bl	8001ad6 <max7219_Init>
	max7219_Clean ();
 8001166:	f000 fce9 	bl	8001b3c <max7219_Clean>
	max7219_Decode_On();
 800116a:	f000 fd49 	bl	8001c00 <max7219_Decode_On>
	max7219_Clean ();
 800116e:	f000 fce5 	bl	8001b3c <max7219_Clean>
	if(number < 10){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b09      	cmp	r3, #9
 8001176:	dc04      	bgt.n	8001182 <segment_display_int+0x2e>
		max7219_PrintItos (DIGIT_1, number );
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fdaa 	bl	8001cd4 <max7219_PrintItos>
	}else if(number >= 10 && number < 100){
		max7219_PrintItos (DIGIT_2, number );
	}else{
		max7219_PrintItos (DIGIT_3, number );
	}
}
 8001180:	e00e      	b.n	80011a0 <segment_display_int+0x4c>
	}else if(number >= 10 && number < 100){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b09      	cmp	r3, #9
 8001186:	dd07      	ble.n	8001198 <segment_display_int+0x44>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b63      	cmp	r3, #99	; 0x63
 800118c:	dc04      	bgt.n	8001198 <segment_display_int+0x44>
		max7219_PrintItos (DIGIT_2, number );
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2002      	movs	r0, #2
 8001192:	f000 fd9f 	bl	8001cd4 <max7219_PrintItos>
}
 8001196:	e003      	b.n	80011a0 <segment_display_int+0x4c>
		max7219_PrintItos (DIGIT_3, number );
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2003      	movs	r0, #3
 800119c:	f000 fd9a 	bl	8001cd4 <max7219_PrintItos>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <segment_display_standby>:
	max7219_PrintDigit(DIGIT_1,BLANK,false);
	max7219_PrintDigit(DIGIT_2,BLANK,false);
	max7219_PrintDigit(DIGIT_3,BLANK,false);
}

void segment_display_standby(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	max7219_Clean ();
 80011ac:	f000 fcc6 	bl	8001b3c <max7219_Clean>
	max7219_Decode_On();
 80011b0:	f000 fd26 	bl	8001c00 <max7219_Decode_On>
	max7219_Clean ();
 80011b4:	f000 fcc2 	bl	8001b3c <max7219_Clean>

	switch(standby_counter){
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <segment_display_standby+0xf4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d84a      	bhi.n	8001258 <segment_display_standby+0xb0>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <segment_display_standby+0x20>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011d9 	.word	0x080011d9
 80011cc:	080011f9 	.word	0x080011f9
 80011d0:	08001219 	.word	0x08001219
 80011d4:	08001239 	.word	0x08001239
	case 0:
		max7219_PrintDigit(DIGIT_1,MINUS,false);
 80011d8:	2200      	movs	r2, #0
 80011da:	210a      	movs	r1, #10
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fd1f 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 80011e2:	2200      	movs	r2, #0
 80011e4:	210f      	movs	r1, #15
 80011e6:	2002      	movs	r0, #2
 80011e8:	f000 fd1a 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 80011ec:	2200      	movs	r2, #0
 80011ee:	210f      	movs	r1, #15
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 fd15 	bl	8001c20 <max7219_PrintDigit>
		break;
 80011f6:	e03f      	b.n	8001278 <segment_display_standby+0xd0>
	case 1:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 80011f8:	2200      	movs	r2, #0
 80011fa:	210f      	movs	r1, #15
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 fd0f 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 8001202:	2200      	movs	r2, #0
 8001204:	210a      	movs	r1, #10
 8001206:	2002      	movs	r0, #2
 8001208:	f000 fd0a 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 800120c:	2200      	movs	r2, #0
 800120e:	210f      	movs	r1, #15
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fd05 	bl	8001c20 <max7219_PrintDigit>
		break;
 8001216:	e02f      	b.n	8001278 <segment_display_standby+0xd0>
	case 2:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 8001218:	2200      	movs	r2, #0
 800121a:	210f      	movs	r1, #15
 800121c:	2001      	movs	r0, #1
 800121e:	f000 fcff 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,BLANK,false);
 8001222:	2200      	movs	r2, #0
 8001224:	210f      	movs	r1, #15
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fcfa 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,MINUS,false);
 800122c:	2200      	movs	r2, #0
 800122e:	210a      	movs	r1, #10
 8001230:	2003      	movs	r0, #3
 8001232:	f000 fcf5 	bl	8001c20 <max7219_PrintDigit>
		break;
 8001236:	e01f      	b.n	8001278 <segment_display_standby+0xd0>
	case 3:
		max7219_PrintDigit(DIGIT_1,BLANK,false);
 8001238:	2200      	movs	r2, #0
 800123a:	210f      	movs	r1, #15
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fcef 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 8001242:	2200      	movs	r2, #0
 8001244:	210a      	movs	r1, #10
 8001246:	2002      	movs	r0, #2
 8001248:	f000 fcea 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,BLANK,false);
 800124c:	2200      	movs	r2, #0
 800124e:	210f      	movs	r1, #15
 8001250:	2003      	movs	r0, #3
 8001252:	f000 fce5 	bl	8001c20 <max7219_PrintDigit>
		break;
 8001256:	e00f      	b.n	8001278 <segment_display_standby+0xd0>
	default:
		max7219_PrintDigit(DIGIT_1,MINUS,false);
 8001258:	2200      	movs	r2, #0
 800125a:	210a      	movs	r1, #10
 800125c:	2001      	movs	r0, #1
 800125e:	f000 fcdf 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_2,MINUS,false);
 8001262:	2200      	movs	r2, #0
 8001264:	210a      	movs	r1, #10
 8001266:	2002      	movs	r0, #2
 8001268:	f000 fcda 	bl	8001c20 <max7219_PrintDigit>
		max7219_PrintDigit(DIGIT_3,MINUS,false);
 800126c:	2200      	movs	r2, #0
 800126e:	210a      	movs	r1, #10
 8001270:	2003      	movs	r0, #3
 8001272:	f000 fcd5 	bl	8001c20 <max7219_PrintDigit>
		break;
 8001276:	bf00      	nop
	}
	if(standby_counter >= 3){
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <segment_display_standby+0xf4>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d903      	bls.n	800128a <segment_display_standby+0xe2>
		standby_counter = 0;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <segment_display_standby+0xf4>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
	}else{
		standby_counter += 1;
	}

}
 8001288:	e006      	b.n	8001298 <segment_display_standby+0xf0>
		standby_counter += 1;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <segment_display_standby+0xf4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b01      	ldr	r3, [pc, #4]	; (800129c <segment_display_standby+0xf4>)
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000d7 	.word	0x200000d7

080012a0 <add_bank_note_credit>:

void add_bank_note_credit(uint32_t pulse_width){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09e      	sub	sp, #120	; 0x78
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if (pulse_width <= bank_acceptor_pulse_width + creditPulseOffset
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <add_bank_note_credit+0x14c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <add_bank_note_credit+0x150>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d87b      	bhi.n	80013b6 <add_bank_note_credit+0x116>
			&& pulse_width
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <add_bank_note_credit+0x14c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <add_bank_note_credit+0x150>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	461a      	mov	r2, r3
			&& pulse_width
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d370      	bcc.n	80013b6 <add_bank_note_credit+0x116>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <add_bank_note_credit+0x154>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e0:	4945      	ldr	r1, [pc, #276]	; (80013f8 <add_bank_note_credit+0x158>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 f9e8 	bl	80056b8 <siprintf>
				bank_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80012e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff2d 	bl	800014c <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fe:	483f      	ldr	r0, [pc, #252]	; (80013fc <add_bank_note_credit+0x15c>)
 8001300:	f004 f83d 	bl	800537e <HAL_UART_Transmit>
		credit += bank_credit_per_pulse;
 8001304:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <add_bank_note_credit+0x154>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <add_bank_note_credit+0x160>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <add_bank_note_credit+0x160>)
 8001318:	801a      	strh	r2, [r3, #0]
		iot_round_counter = 0;
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <add_bank_note_credit+0x164>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
		last_note_money += bank_credit_per_pulse;
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <add_bank_note_credit+0x154>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <add_bank_note_credit+0x168>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <add_bank_note_credit+0x168>)
 8001332:	701a      	strb	r2, [r3, #0]
		if(credit >= 999){
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <add_bank_note_credit+0x160>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800133e:	4293      	cmp	r3, r2
 8001340:	d903      	bls.n	800134a <add_bank_note_credit+0xaa>
			credit = 999;
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <add_bank_note_credit+0x160>)
 8001344:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001348:	801a      	strh	r2, [r3, #0]
		}
		max7219_Turn_On();
 800134a:	f000 fc45 	bl	8001bd8 <max7219_Turn_On>
		segment_display_int(credit);
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <add_bank_note_credit+0x160>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fefd 	bl	8001154 <segment_display_int>
		is_standby = false;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <add_bank_note_credit+0x16c>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
		if (credit >= minimum_credit_to_start) {
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <add_bank_note_credit+0x160>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <add_bank_note_credit+0x170>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	db09      	blt.n	8001384 <add_bank_note_credit+0xe4>
			is_operation_running = true;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <add_bank_note_credit+0x174>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137a:	2219      	movs	r2, #25
 800137c:	4926      	ldr	r1, [pc, #152]	; (8001418 <add_bank_note_credit+0x178>)
 800137e:	481f      	ldr	r0, [pc, #124]	; (80013fc <add_bank_note_credit+0x15c>)
 8001380:	f003 fffd 	bl	800537e <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		char tmp_msg2[35];
		sprintf(tmp_msg2, "current credit : %d \r\n", (int)credit);
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <add_bank_note_credit+0x160>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4922      	ldr	r1, [pc, #136]	; (800141c <add_bank_note_credit+0x17c>)
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f990 	bl	80056b8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg2, strlen(tmp_msg2),
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4618      	mov	r0, r3
 800139e:	f7fe fed5 	bl	800014c <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f107 010c 	add.w	r1, r7, #12
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <add_bank_note_credit+0x15c>)
 80013b0:	f003 ffe5 	bl	800537e <HAL_UART_Transmit>
			>= bank_acceptor_pulse_width - creditPulseOffset) {
 80013b4:	e015      	b.n	80013e2 <add_bank_note_credit+0x142>
				HAL_MAX_DELAY);
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013bc:	4918      	ldr	r1, [pc, #96]	; (8001420 <add_bank_note_credit+0x180>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 f97a 	bl	80056b8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 80013c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe febf 	bl	800014c <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <add_bank_note_credit+0x15c>)
 80013dc:	f003 ffcf 	bl	800537e <HAL_UART_Transmit>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3778      	adds	r7, #120	; 0x78
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000006 	.word	0x20000006
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000009 	.word	0x20000009
 80013f8:	080060a0 	.word	0x080060a0
 80013fc:	2000024c 	.word	0x2000024c
 8001400:	200000d2 	.word	0x200000d2
 8001404:	200000cc 	.word	0x200000cc
 8001408:	200000fd 	.word	0x200000fd
 800140c:	20000000 	.word	0x20000000
 8001410:	2000000c 	.word	0x2000000c
 8001414:	200000d0 	.word	0x200000d0
 8001418:	080060b8 	.word	0x080060b8
 800141c:	080060d4 	.word	0x080060d4
 8001420:	080060ec 	.word	0x080060ec

08001424 <add_coin_credit>:

void add_coin_credit(uint32_t pulse_width) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	max7219_DisableDisplayTest();
 800142c:	f000 fb7e 	bl	8001b2c <max7219_DisableDisplayTest>
	if (pulse_width <= (coin_acceptor_pulse_width + creditPulseOffset)
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <add_coin_credit+0x120>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <add_coin_credit+0x124>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4413      	add	r3, r2
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4293      	cmp	r3, r2
 8001444:	d863      	bhi.n	800150e <add_coin_credit+0xea>
			&& (pulse_width
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <add_coin_credit+0x120>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <add_coin_credit+0x124>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	461a      	mov	r2, r3
			&& (pulse_width
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4293      	cmp	r3, r2
 800145a:	d358      	bcc.n	800150e <add_coin_credit+0xea>
		char tmp_msg[40];
		sprintf(tmp_msg, "added credit : %d \r\n",
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <add_coin_credit+0x128>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	4939      	ldr	r1, [pc, #228]	; (8001550 <add_coin_credit+0x12c>)
 800146a:	4618      	mov	r0, r3
 800146c:	f004 f924 	bl	80056b8 <siprintf>
				(int)coin_credit_per_pulse);
		HAL_UART_Transmit(&huart1, (uint8_t*)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe fe69 	bl	800014c <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 0108 	add.w	r1, r7, #8
 8001482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001486:	4833      	ldr	r0, [pc, #204]	; (8001554 <add_coin_credit+0x130>)
 8001488:	f003 ff79 	bl	800537e <HAL_UART_Transmit>
		credit += coin_credit_per_pulse;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <add_coin_credit+0x128>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <add_coin_credit+0x134>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <add_coin_credit+0x134>)
 80014a0:	801a      	strh	r2, [r3, #0]
		iot_round_counter = 0;
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <add_coin_credit+0x138>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
		last_coin_money += coin_credit_per_pulse;
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <add_coin_credit+0x128>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <add_coin_credit+0x13c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <add_coin_credit+0x13c>)
 80014ba:	701a      	strb	r2, [r3, #0]
		if(credit >= 999){
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <add_coin_credit+0x134>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	f240 32e6 	movw	r2, #998	; 0x3e6
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d903      	bls.n	80014d2 <add_coin_credit+0xae>
			credit = 999;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <add_coin_credit+0x134>)
 80014cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d0:	801a      	strh	r2, [r3, #0]
		}
		is_standby = false;
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <add_coin_credit+0x140>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		max7219_Turn_On();
 80014d8:	f000 fb7e 	bl	8001bd8 <max7219_Turn_On>
		segment_display_int(credit);
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <add_coin_credit+0x134>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fe36 	bl	8001154 <segment_display_int>

		if (credit >= minimum_credit_to_start) {
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <add_coin_credit+0x134>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <add_coin_credit+0x144>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	db20      	blt.n	800153a <add_coin_credit+0x116>
			is_operation_running = true;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <add_coin_credit+0x148>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)"front btn is now enable\r\n", 25,
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	2219      	movs	r2, #25
 8001504:	491a      	ldr	r1, [pc, #104]	; (8001570 <add_coin_credit+0x14c>)
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <add_coin_credit+0x130>)
 8001508:	f003 ff39 	bl	800537e <HAL_UART_Transmit>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 800150c:	e015      	b.n	800153a <add_coin_credit+0x116>
					HAL_MAX_DELAY);
		}
	}else{
		char pulseWmessage[30];
		sprintf(pulseWmessage, "PULSEWIDTH NOT MATCH : %d \r\n", (int)pulse_width);
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001514:	4917      	ldr	r1, [pc, #92]	; (8001574 <add_coin_credit+0x150>)
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f8ce 	bl	80056b8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pulseWmessage, strlen(pulseWmessage), HAL_MAX_DELAY);
 800151c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe13 	bl	800014c <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <add_coin_credit+0x130>)
 8001534:	f003 ff23 	bl	800537e <HAL_UART_Transmit>
	}
}
 8001538:	e000      	b.n	800153c <add_coin_credit+0x118>
					>= coin_acceptor_pulse_width - creditPulseOffset)) {
 800153a:	bf00      	nop
}
 800153c:	bf00      	nop
 800153e:	3750      	adds	r7, #80	; 0x50
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000007 	.word	0x20000007
 8001548:	20000008 	.word	0x20000008
 800154c:	2000000a 	.word	0x2000000a
 8001550:	080060a0 	.word	0x080060a0
 8001554:	2000024c 	.word	0x2000024c
 8001558:	200000d2 	.word	0x200000d2
 800155c:	200000cc 	.word	0x200000cc
 8001560:	200000fe 	.word	0x200000fe
 8001564:	20000000 	.word	0x20000000
 8001568:	2000000c 	.word	0x2000000c
 800156c:	200000d0 	.word	0x200000d0
 8001570:	080060b8 	.word	0x080060b8
 8001574:	080060ec 	.word	0x080060ec

08001578 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001580:	489a      	ldr	r0, [pc, #616]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 8001582:	f002 ffc9 	bl	8004518 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001586:	4b99      	ldr	r3, [pc, #612]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f06f 0201 	mvn.w	r2, #1
 8001596:	611a      	str	r2, [r3, #16]

	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	f040 808b 	bne.w	80016ba <HAL_TIM_IC_CaptureCallback+0x142>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7f1b      	ldrb	r3, [r3, #28]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	f040 8086 	bne.w	80016ba <HAL_TIM_IC_CaptureCallback+0x142>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH2 INT\r\n", 9, HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	2209      	movs	r2, #9
 80015b4:	498f      	ldr	r1, [pc, #572]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015b6:	4890      	ldr	r0, [pc, #576]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015b8:	f003 fee1 	bl	800537e <HAL_UART_Transmit>
		if (Is_First_Captured == 0) // if the first value is not captured
 80015bc:	4b8f      	ldr	r3, [pc, #572]	; (80017fc <HAL_TIM_IC_CaptureCallback+0x284>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11a      	bne.n	80015fc <HAL_TIM_IC_CaptureCallback+0x84>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80015c6:	2104      	movs	r1, #4
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f003 fb91 	bl	8004cf0 <HAL_TIM_ReadCapturedValue>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a8b      	ldr	r2, [pc, #556]	; (8001800 <HAL_TIM_IC_CaptureCallback+0x288>)
 80015d2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80015d4:	4b89      	ldr	r3, [pc, #548]	; (80017fc <HAL_TIM_IC_CaptureCallback+0x284>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015e8:	621a      	str	r2, [r3, #32]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a1a      	ldr	r2, [r3, #32]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0220 	orr.w	r2, r2, #32
 80015f8:	621a      	str	r2, [r3, #32]
 80015fa:	e05e      	b.n	80016ba <HAL_TIM_IC_CaptureCallback+0x142>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 80015fc:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <HAL_TIM_IC_CaptureCallback+0x284>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d159      	bne.n	80016ba <HAL_TIM_IC_CaptureCallback+0x142>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001606:	2104      	movs	r1, #4
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f003 fb71 	bl	8004cf0 <HAL_TIM_ReadCapturedValue>
 800160e:	4603      	mov	r3, r0
 8001610:	4a7c      	ldr	r2, [pc, #496]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001612:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b77      	ldr	r3, [pc, #476]	; (8001800 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d907      	bls.n	8001638 <HAL_TIM_IC_CaptureCallback+0xc0>
				Difference = IC_Val2 - IC_Val1;
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b74      	ldr	r3, [pc, #464]	; (8001800 <HAL_TIM_IC_CaptureCallback+0x288>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00f      	b.n	8001658 <HAL_TIM_IC_CaptureCallback+0xe0>
			}

			else if (IC_Val1 > IC_Val2) {
 8001638:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_TIM_IC_CaptureCallback+0x288>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d909      	bls.n	8001658 <HAL_TIM_IC_CaptureCallback+0xe0>
				Difference = ((uint16_t) 0xffff - IC_Val1) + IC_Val2;
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_TIM_IC_CaptureCallback+0x288>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001652:	33ff      	adds	r3, #255	; 0xff
 8001654:	4a6c      	ldr	r2, [pc, #432]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001656:	6013      	str	r3, [r2, #0]
			}
			Is_First_Captured = 0; // set it back to false
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_TIM_IC_CaptureCallback+0x284>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800166c:	621a      	str	r2, [r3, #32]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a12      	ldr	r2, [r2, #32]
 8001678:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);

			add_bank_note_credit(Difference/1000);
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x290>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_TIM_IC_CaptureCallback+0x294>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fe0a 	bl	80012a0 <add_bank_note_credit>

			char tmpp[35];
			sprintf(tmpp,"CH1:captured val : %d \r\n",(int)Difference);
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x290>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	495e      	ldr	r1, [pc, #376]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001698:	4618      	mov	r0, r3
 800169a:	f004 f80d 	bl	80056b8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd52 	bl	800014c <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f107 010c 	add.w	r1, r7, #12
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b4:	4850      	ldr	r0, [pc, #320]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80016b6:	f003 fe62 	bl	800537e <HAL_UART_Transmit>
		}
	}
	if (htim->Instance == TIM3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	f040 808b 	bne.w	80017dc <HAL_TIM_IC_CaptureCallback+0x264>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7f1b      	ldrb	r3, [r3, #28]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 8086 	bne.w	80017dc <HAL_TIM_IC_CaptureCallback+0x264>
		HAL_UART_Transmit(&huart1, (uint8_t*)"CH1 INT\r\n", 9, HAL_MAX_DELAY);
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	2209      	movs	r2, #9
 80016d6:	494f      	ldr	r1, [pc, #316]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80016d8:	4847      	ldr	r0, [pc, #284]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80016da:	f003 fe50 	bl	800537e <HAL_UART_Transmit>
		if (coin_Is_First_Captured == 0) // if the first value is not captured
 80016de:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11a      	bne.n	800171e <HAL_TIM_IC_CaptureCallback+0x1a6>
		{
			coin_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80016e8:	2100      	movs	r1, #0
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f003 fb00 	bl	8004cf0 <HAL_TIM_ReadCapturedValue>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80016f4:	6013      	str	r3, [r2, #0]
			coin_Is_First_Captured = 1;  // set the first captured as true
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 020a 	bic.w	r2, r2, #10
 800170a:	621a      	str	r2, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0202 	orr.w	r2, r2, #2
 800171a:	621a      	str	r2, [r3, #32]
 800171c:	e05e      	b.n	80017dc <HAL_TIM_IC_CaptureCallback+0x264>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (coin_Is_First_Captured == 1) // if the first is already captured
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d159      	bne.n	80017dc <HAL_TIM_IC_CaptureCallback+0x264>
		{
			coin_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001728:	2100      	movs	r1, #0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f003 fae0 	bl	8004cf0 <HAL_TIM_ReadCapturedValue>
 8001730:	4603      	mov	r3, r0
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001734:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
			if (coin_IC_Val2 > coin_IC_Val1) {
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d907      	bls.n	800175a <HAL_TIM_IC_CaptureCallback+0x1e2>
				coin_Difference = coin_IC_Val2 - coin_IC_Val1;
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a33      	ldr	r2, [pc, #204]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e00f      	b.n	800177a <HAL_TIM_IC_CaptureCallback+0x202>
			}

			else if (coin_IC_Val1 > coin_IC_Val2) {
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d909      	bls.n	800177a <HAL_TIM_IC_CaptureCallback+0x202>
				coin_Difference = ((uint16_t) 0xffff - coin_IC_Val1) + coin_IC_Val2;
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001774:	33ff      	adds	r3, #255	; 0xff
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001778:	6013      	str	r3, [r2, #0]
			}
			coin_Is_First_Captured = 0; // set it back to false
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020a 	bic.w	r2, r2, #10
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a12      	ldr	r2, [r2, #32]
 800179a:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			add_coin_credit(coin_Difference/1000);
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1a      	ldr	r2, [pc, #104]	; (800180c <HAL_TIM_IC_CaptureCallback+0x294>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe3b 	bl	8001424 <add_coin_credit>

			char tmpp[35];
			sprintf(tmpp,"CH2:captured val : %d \r\n",(int)coin_Difference);
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 ff7c 	bl	80056b8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tmpp, strlen(tmpp), HAL_MAX_DELAY);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fcc1 	bl	800014c <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f107 010c 	add.w	r1, r7, #12
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80017d8:	f003 fdd1 	bl	800537e <HAL_UART_Transmit>
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 80017de:	f002 fe49 	bl	8004474 <HAL_TIM_Base_Start_IT>
}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	; 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001c0 	.word	0x200001c0
 80017f0:	40000400 	.word	0x40000400
 80017f4:	0800610c 	.word	0x0800610c
 80017f8:	2000024c 	.word	0x2000024c
 80017fc:	200000ec 	.word	0x200000ec
 8001800:	200000e0 	.word	0x200000e0
 8001804:	200000e4 	.word	0x200000e4
 8001808:	200000e8 	.word	0x200000e8
 800180c:	10624dd3 	.word	0x10624dd3
 8001810:	08006118 	.word	0x08006118
 8001814:	08006134 	.word	0x08006134
 8001818:	200000fc 	.word	0x200000fc
 800181c:	200000f0 	.word	0x200000f0
 8001820:	200000f4 	.word	0x200000f4
 8001824:	200000f8 	.word	0x200000f8
 8001828:	08006140 	.word	0x08006140

0800182c <read_settings_from_eeprom>:
void read_settings_from_eeprom(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
	F1_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001832:	2101      	movs	r1, #1
 8001834:	4891      	ldr	r0, [pc, #580]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001836:	f002 fb4b 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800183a:	4603      	mov	r3, r0
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b90      	ldr	r3, [pc, #576]	; (8001a80 <read_settings_from_eeprom+0x254>)
 8001840:	701a      	strb	r2, [r3, #0]
	F2_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001842:	2102      	movs	r1, #2
 8001844:	488d      	ldr	r0, [pc, #564]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001846:	f002 fb43 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800184a:	4603      	mov	r3, r0
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b8d      	ldr	r3, [pc, #564]	; (8001a84 <read_settings_from_eeprom+0x258>)
 8001850:	701a      	strb	r2, [r3, #0]
	F3_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8001852:	2103      	movs	r1, #3
 8001854:	4889      	ldr	r0, [pc, #548]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001856:	f002 fb3b 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800185a:	4603      	mov	r3, r0
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b8a      	ldr	r3, [pc, #552]	; (8001a88 <read_settings_from_eeprom+0x25c>)
 8001860:	701a      	strb	r2, [r3, #0]
	F4_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8001862:	2104      	movs	r1, #4
 8001864:	4885      	ldr	r0, [pc, #532]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001866:	f002 fb33 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800186a:	4603      	mov	r3, r0
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b87      	ldr	r3, [pc, #540]	; (8001a8c <read_settings_from_eeprom+0x260>)
 8001870:	701a      	strb	r2, [r3, #0]
	F5_DURATION = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 8001872:	2105      	movs	r1, #5
 8001874:	4881      	ldr	r0, [pc, #516]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001876:	f002 fb2b 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800187a:	4603      	mov	r3, r0
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <read_settings_from_eeprom+0x264>)
 8001880:	701a      	strb	r2, [r3, #0]
	credit = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 8001882:	2106      	movs	r1, #6
 8001884:	487d      	ldr	r0, [pc, #500]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001886:	f002 fb23 	bl	8003ed0 <HAL_RTCEx_BKUPRead>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <read_settings_from_eeprom+0x268>)
 8001890:	801a      	strh	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(USER_SEL_GPIO_Port, USER_SEL_Pin) == GPIO_PIN_SET){
 8001892:	2102      	movs	r1, #2
 8001894:	4880      	ldr	r0, [pc, #512]	; (8001a98 <read_settings_from_eeprom+0x26c>)
 8001896:	f001 f98b 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	d103      	bne.n	80018a8 <read_settings_from_eeprom+0x7c>
		credit = 999;
 80018a0:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <read_settings_from_eeprom+0x268>)
 80018a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a6:	801a      	strh	r2, [r3, #0]
	}
	if(credit >= 2){
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <read_settings_from_eeprom+0x268>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d90c      	bls.n	80018cc <read_settings_from_eeprom+0xa0>
		is_operation_running = true;
 80018b2:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <read_settings_from_eeprom+0x270>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
		is_standby = false;
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <read_settings_from_eeprom+0x274>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		consume_credit = false;
 80018be:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <read_settings_from_eeprom+0x278>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
		credit_consume_counter = 0;
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <read_settings_from_eeprom+0x27c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e001      	b.n	80018d0 <read_settings_from_eeprom+0xa4>

	}else{
		reset_all_state();
 80018cc:	f7ff f8f4 	bl	8000ab8 <reset_all_state>
	}
	char tmp_msg[35];
	sprintf(tmp_msg,"eeprom read DURATION 1 is %d \r\n",F1_DURATION);
 80018d0:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <read_settings_from_eeprom+0x254>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4974      	ldr	r1, [pc, #464]	; (8001aac <read_settings_from_eeprom+0x280>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 feeb 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc31 	bl	800014c <strlen>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	1d39      	adds	r1, r7, #4
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f4:	486e      	ldr	r0, [pc, #440]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 80018f6:	f003 fd42 	bl	800537e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 2 is %d \r\n",F2_DURATION);
 80018fa:	4b62      	ldr	r3, [pc, #392]	; (8001a84 <read_settings_from_eeprom+0x258>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	496b      	ldr	r1, [pc, #428]	; (8001ab4 <read_settings_from_eeprom+0x288>)
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fed6 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc1c 	bl	800014c <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	1d39      	adds	r1, r7, #4
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	4864      	ldr	r0, [pc, #400]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 8001920:	f003 fd2d 	bl	800537e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 3 is %d \r\n",F3_DURATION);
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <read_settings_from_eeprom+0x25c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4962      	ldr	r1, [pc, #392]	; (8001ab8 <read_settings_from_eeprom+0x28c>)
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fec1 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc07 	bl	800014c <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	1d39      	adds	r1, r7, #4
 8001944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001948:	4859      	ldr	r0, [pc, #356]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 800194a:	f003 fd18 	bl	800537e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 4 is %d \r\n",F4_DURATION);
 800194e:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <read_settings_from_eeprom+0x260>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4958      	ldr	r1, [pc, #352]	; (8001abc <read_settings_from_eeprom+0x290>)
 800195a:	4618      	mov	r0, r3
 800195c:	f003 feac 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fbf2 	bl	800014c <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	1d39      	adds	r1, r7, #4
 800196e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001972:	484f      	ldr	r0, [pc, #316]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 8001974:	f003 fd03 	bl	800537e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read DURATION 5 is %d \r\n",F5_DURATION);
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <read_settings_from_eeprom+0x264>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	494f      	ldr	r1, [pc, #316]	; (8001ac0 <read_settings_from_eeprom+0x294>)
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fe97 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fbdd 	bl	800014c <strlen>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	1d39      	adds	r1, r7, #4
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199c:	4844      	ldr	r0, [pc, #272]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 800199e:	f003 fcee 	bl	800537e <HAL_UART_Transmit>
	sprintf(tmp_msg,"eeprom read CREDIT is %d \r\n",(int)credit);
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <read_settings_from_eeprom+0x268>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4945      	ldr	r1, [pc, #276]	; (8001ac4 <read_settings_from_eeprom+0x298>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fe82 	bl	80056b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)tmp_msg, strlen(tmp_msg), HAL_MAX_DELAY);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fbc8 	bl	800014c <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	483a      	ldr	r0, [pc, #232]	; (8001ab0 <read_settings_from_eeprom+0x284>)
 80019c8:	f003 fcd9 	bl	800537e <HAL_UART_Transmit>

	if(F1_DURATION == 0 || F2_DURATION == 0 || F3_DURATION == 0 || F4_DURATION == 0 || F5_DURATION == 0){
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <read_settings_from_eeprom+0x254>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d013      	beq.n	80019fe <read_settings_from_eeprom+0x1d2>
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <read_settings_from_eeprom+0x258>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00e      	beq.n	80019fe <read_settings_from_eeprom+0x1d2>
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <read_settings_from_eeprom+0x25c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <read_settings_from_eeprom+0x1d2>
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <read_settings_from_eeprom+0x260>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <read_settings_from_eeprom+0x1d2>
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <read_settings_from_eeprom+0x264>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d136      	bne.n	8001a6c <read_settings_from_eeprom+0x240>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, default_credit_duration);
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	2101      	movs	r1, #1
 8001a06:	481d      	ldr	r0, [pc, #116]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001a08:	f002 fa48 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, default_credit_duration);
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	2102      	movs	r1, #2
 8001a14:	4819      	ldr	r0, [pc, #100]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001a16:	f002 fa41 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, default_credit_duration);
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2103      	movs	r1, #3
 8001a22:	4816      	ldr	r0, [pc, #88]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001a24:	f002 fa3a 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, default_credit_duration);
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4812      	ldr	r0, [pc, #72]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001a32:	f002 fa33 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, default_credit_duration);
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <read_settings_from_eeprom+0x250>)
 8001a40:	f002 fa2c 	bl	8003e9c <HAL_RTCEx_BKUPWrite>
		F1_DURATION = default_credit_duration;
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <read_settings_from_eeprom+0x254>)
 8001a4a:	701a      	strb	r2, [r3, #0]
		F2_DURATION = default_credit_duration;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <read_settings_from_eeprom+0x258>)
 8001a52:	701a      	strb	r2, [r3, #0]
		F3_DURATION = default_credit_duration;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <read_settings_from_eeprom+0x25c>)
 8001a5a:	701a      	strb	r2, [r3, #0]
		F4_DURATION = default_credit_duration;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <read_settings_from_eeprom+0x260>)
 8001a62:	701a      	strb	r2, [r3, #0]
		F5_DURATION = default_credit_duration;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <read_settings_from_eeprom+0x29c>)
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <read_settings_from_eeprom+0x264>)
 8001a6a:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(300);
 8001a6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a70:	f000 fde8 	bl	8002644 <HAL_Delay>
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000010c 	.word	0x2000010c
 8001a80:	20000001 	.word	0x20000001
 8001a84:	20000002 	.word	0x20000002
 8001a88:	20000003 	.word	0x20000003
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	20000005 	.word	0x20000005
 8001a94:	200000d2 	.word	0x200000d2
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	200000d0 	.word	0x200000d0
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	200000d8 	.word	0x200000d8
 8001aa8:	200000de 	.word	0x200000de
 8001aac:	0800615c 	.word	0x0800615c
 8001ab0:	2000024c 	.word	0x2000024c
 8001ab4:	0800617c 	.word	0x0800617c
 8001ab8:	0800619c 	.word	0x0800619c
 8001abc:	080061bc 	.word	0x080061bc
 8001ac0:	080061dc 	.word	0x080061dc
 8001ac4:	080061fc 	.word	0x080061fc
 8001ac8:	20000010 	.word	0x20000010

08001acc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>

08001ad6 <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_Off();
 8001ae0:	f000 f884 	bl	8001bec <max7219_Turn_Off>
	max7219_DisableDisplayTest();
 8001ae4:	f000 f822 	bl	8001b2c <max7219_DisableDisplayTest>
	max7219_Turn_On();
 8001ae8:	f000 f876 	bl	8001bd8 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8001aec:	2107      	movs	r1, #7
 8001aee:	200b      	movs	r0, #11
 8001af0:	f000 f848 	bl	8001b84 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f806 	bl	8001b08 <max7219_SetIntensivity>
	max7219_Clean();
 8001afc:	f000 f81e 	bl	8001b3c <max7219_Clean>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d805      	bhi.n	8001b24 <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f000 f831 	bl	8001b84 <max7219_SendData>
 8001b22:	e000      	b.n	8001b26 <max7219_SetIntensivity+0x1e>
		return;
 8001b24:	bf00      	nop
}
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <max7219_DisableDisplayTest>:

void max7219_DisableDisplayTest()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	max7219_SendData(REG_DISPLAY_TEST, REG_NO_OP);
 8001b30:	2100      	movs	r1, #0
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f826 	bl	8001b84 <max7219_SendData>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <max7219_Clean>:

void max7219_Clean()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <max7219_Clean+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2bff      	cmp	r3, #255	; 0xff
 8001b4c:	d101      	bne.n	8001b52 <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001b4e:	230f      	movs	r3, #15
 8001b50:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	e00b      	b.n	8001b70 <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f80d 	bl	8001b84 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	ddf0      	ble.n	8001b58 <max7219_Clean+0x1c>
	}
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000ff 	.word	0x200000ff

08001b84 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <max7219_SendData+0x4c>)
 8001b9c:	f001 f81f 	bl	8002bde <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001ba0:	1df9      	adds	r1, r7, #7
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <max7219_SendData+0x50>)
 8001baa:	f002 fa31 	bl	8004010 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001bae:	1db9      	adds	r1, r7, #6
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <max7219_SendData+0x50>)
 8001bb8:	f002 fa2a 	bl	8004010 <HAL_SPI_Transmit>
	CS_RESET();
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <max7219_SendData+0x4c>)
 8001bc4:	f001 f80b 	bl	8002bde <HAL_GPIO_WritePin>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	20000120 	.word	0x20000120

08001bd8 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001bdc:	f7ff ffa6 	bl	8001b2c <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001be0:	2101      	movs	r1, #1
 8001be2:	200c      	movs	r0, #12
 8001be4:	f7ff ffce 	bl	8001b84 <max7219_SendData>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <max7219_Turn_Off>:

void max7219_Turn_Off(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	max7219_DisableDisplayTest();
 8001bf0:	f7ff ff9c 	bl	8001b2c <max7219_DisableDisplayTest>
	max7219_SendData(REG_SHUTDOWN, 0x00);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	200c      	movs	r0, #12
 8001bf8:	f7ff ffc4 	bl	8001b84 <max7219_SendData>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <max7219_Decode_On>:

void max7219_Decode_On(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <max7219_Decode_On+0x1c>)
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <max7219_Decode_On+0x1c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	2009      	movs	r0, #9
 8001c12:	f7ff ffb7 	bl	8001b84 <max7219_SendData>
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000ff 	.word	0x200000ff

08001c20 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	717b      	strb	r3, [r7, #5]
	max7219_DisableDisplayTest();
 8001c32:	f7ff ff7b 	bl	8001b2c <max7219_DisableDisplayTest>
	if(position > NUMBER_OF_DIGITS)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d844      	bhi.n	8001cc6 <max7219_PrintDigit+0xa6>
	{
		return;
	}

	if(point)
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d020      	beq.n	8001c84 <max7219_PrintDigit+0x64>
	{
		if(decodeMode == 0x00)
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <max7219_PrintDigit+0xb0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10e      	bne.n	8001c68 <max7219_PrintDigit+0x48>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f8bb 	bl	8001dc8 <getSymbol>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff8f 	bl	8001b84 <max7219_SendData>
 8001c66:	e02f      	b.n	8001cc8 <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <max7219_PrintDigit+0xb0>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2bff      	cmp	r3, #255	; 0xff
 8001c6e:	d12b      	bne.n	8001cc8 <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff81 	bl	8001b84 <max7219_SendData>
 8001c82:	e021      	b.n	8001cc8 <max7219_PrintDigit+0xa8>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <max7219_PrintDigit+0xb0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10e      	bne.n	8001caa <max7219_PrintDigit+0x8a>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001c8c:	79bb      	ldrb	r3, [r7, #6]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f89a 	bl	8001dc8 <getSymbol>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff6e 	bl	8001b84 <max7219_SendData>
 8001ca8:	e00e      	b.n	8001cc8 <max7219_PrintDigit+0xa8>
		}
		else if(decodeMode == 0xFF)
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <max7219_PrintDigit+0xb0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d10a      	bne.n	8001cc8 <max7219_PrintDigit+0xa8>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff60 	bl	8001b84 <max7219_SendData>
 8001cc4:	e000      	b.n	8001cc8 <max7219_PrintDigit+0xa8>
		return;
 8001cc6:	bf00      	nop
		}
	}
}
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000ff 	.word	0x200000ff

08001cd4 <max7219_PrintItos>:

MAX7219_Digits max7219_PrintItos(MAX7219_Digits position, int value)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
	max7219_DisableDisplayTest();
 8001ce0:	f7ff ff24 	bl	8001b2c <max7219_DisableDisplayTest>
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 8001ce4:	21ff      	movs	r1, #255	; 0xff
 8001ce6:	2009      	movs	r0, #9
 8001ce8:	f7ff ff4c 	bl	8001b84 <max7219_SendData>

	int32_t i;

	if (value < 0)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da0d      	bge.n	8001d0e <max7219_PrintItos+0x3a>
	{
		if(position > 0)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <max7219_PrintItos+0x34>
		{
			max7219_SendData(position, MINUS);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	210a      	movs	r1, #10
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff41 	bl	8001b84 <max7219_SendData>
			position--;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	71fb      	strb	r3, [r7, #7]
		}
		value = -value;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]

	while ((value / i) > 9)
 8001d12:	e005      	b.n	8001d20 <max7219_PrintItos+0x4c>
	{
		i *= 10;
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	dcf3      	bgt.n	8001d14 <max7219_PrintItos+0x40>
	}

	if(position > 0)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <max7219_PrintItos+0x78>
	{
		max7219_SendData(position, value/i);
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff1f 	bl	8001b84 <max7219_SendData>
		position--;
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	71fb      	strb	r3, [r7, #7]
	}

	i /= 10;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <max7219_PrintItos+0xec>)
 8001d50:	fb82 1203 	smull	r1, r2, r2, r3
 8001d54:	1092      	asrs	r2, r2, #2
 8001d56:	17db      	asrs	r3, r3, #31
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 8001d5c:	e022      	b.n	8001da4 <max7219_PrintItos+0xd0>
	{
		if(position > 0)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <max7219_PrintItos+0xc0>
		{
			max7219_SendData(position, (value % (i * 10)) / i);
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d76:	fb02 f201 	mul.w	r2, r2, r1
 8001d7a:	1a9a      	subs	r2, r3, r2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fefb 	bl	8001b84 <max7219_SendData>
			position--;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	71fb      	strb	r3, [r7, #7]
		}

		i /= 10;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <max7219_PrintItos+0xec>)
 8001d98:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9c:	1092      	asrs	r2, r2, #2
 8001d9e:	17db      	asrs	r3, r3, #31
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dcd9      	bgt.n	8001d5e <max7219_PrintItos+0x8a>
	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <max7219_PrintItos+0xf0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	2009      	movs	r0, #9
 8001db2:	f7ff fee7 	bl	8001b84 <max7219_SendData>

	return position;
 8001db6:	79fb      	ldrb	r3, [r7, #7]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	66666667 	.word	0x66666667
 8001dc4:	200000ff 	.word	0x200000ff

08001dc8 <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <getSymbol+0x1c>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	b29b      	uxth	r3, r3
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000014 	.word	0x20000014

08001de8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2100      	movs	r1, #0
 8001df2:	460a      	mov	r2, r1
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	460a      	mov	r2, r1
 8001df8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <MX_RTC_Init+0x90>)
 8001e02:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e12:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e16:	f001 fcb3 	bl	8003780 <HAL_RTC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001e20:	f7ff fe54 	bl	8001acc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2201      	movs	r2, #1
 8001e34:	4619      	mov	r1, r3
 8001e36:	480f      	ldr	r0, [pc, #60]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e38:	f001 fd38 	bl	80038ac <HAL_RTC_SetTime>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001e42:	f7ff fe43 	bl	8001acc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e46:	2301      	movs	r3, #1
 8001e48:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_RTC_Init+0x8c>)
 8001e5e:	f001 fdbd 	bl	80039dc <HAL_RTC_SetDate>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001e68:	f7ff fe30 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000010c 	.word	0x2000010c
 8001e78:	40002800 	.word	0x40002800

08001e7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <HAL_RTC_MspInit+0x3c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d110      	bne.n	8001eb0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001e8e:	f000 fed7 	bl	8002c40 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RTC_MspInit+0x40>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RTC_MspInit+0x40>)
 8001e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_RTC_MspInit+0x40>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RTC_MspInit+0x44>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40002800 	.word	0x40002800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	4242043c 	.word	0x4242043c

08001ec4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <MX_SPI2_Init+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001ef8:	2208      	movs	r2, #8
 8001efa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001f10:	220a      	movs	r2, #10
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_SPI2_Init+0x64>)
 8001f16:	f001 fff7 	bl	8003f08 <HAL_SPI_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f20:	f7ff fdd4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000120 	.word	0x20000120
 8001f2c:	40003800 	.word	0x40003800

08001f30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_SPI_MspInit+0x74>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d124      	bne.n	8001f9a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5a:	61d3      	str	r3, [r2, #28]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_SPI_MspInit+0x78>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f80:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_SPI_MspInit+0x7c>)
 8001f96:	f000 fc87 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40003800 	.word	0x40003800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010c00 	.word	0x40010c00

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_MspInit+0x5c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_MspInit+0x5c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x5c>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x5c>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x5c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x5c>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_MspInit+0x60>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_MspInit+0x60>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205a:	f000 fad7 	bl	800260c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM2_IRQHandler+0x10>)
 800206a:	f002 fbe1 	bl	8004830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200001c0 	.word	0x200001c0

08002078 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <TIM3_IRQHandler+0x10>)
 800207e:	f002 fbd7 	bl	8004830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000178 	.word	0x20000178

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f003 faca 	bl	8005654 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20005000 	.word	0x20005000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20000100 	.word	0x20000100
 80020f4:	200002a8 	.word	0x200002a8

080020f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_TIM2_Init+0x94>)
 8002122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_TIM2_Init+0x94>)
 800212a:	2277      	movs	r2, #119	; 0x77
 800212c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_TIM2_Init+0x94>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5999;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_TIM2_Init+0x94>)
 8002136:	f241 726f 	movw	r2, #5999	; 0x176f
 800213a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_TIM2_Init+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_TIM2_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002148:	4813      	ldr	r0, [pc, #76]	; (8002198 <MX_TIM2_Init+0x94>)
 800214a:	f002 f943 	bl	80043d4 <HAL_TIM_Base_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002154:	f7ff fcba 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	4619      	mov	r1, r3
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <MX_TIM2_Init+0x94>)
 8002166:	f002 fcff 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002170:	f7ff fcac 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_TIM2_Init+0x94>)
 8002182:	f003 f83f 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800218c:	f7ff fc9e 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200001c0 	.word	0x200001c0

0800219c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021ba:	463b      	mov	r3, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <MX_TIM3_Init+0xf0>)
 80021c8:	4a31      	ldr	r2, [pc, #196]	; (8002290 <MX_TIM3_Init+0xf4>)
 80021ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <MX_TIM3_Init+0xf0>)
 80021ce:	2247      	movs	r2, #71	; 0x47
 80021d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <MX_TIM3_Init+0xf0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <MX_TIM3_Init+0xf0>)
 80021da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <MX_TIM3_Init+0xf0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <MX_TIM3_Init+0xf0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021ec:	4827      	ldr	r0, [pc, #156]	; (800228c <MX_TIM3_Init+0xf0>)
 80021ee:	f002 f8f1 	bl	80043d4 <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80021f8:	f7ff fc68 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002200:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	4619      	mov	r1, r3
 8002208:	4820      	ldr	r0, [pc, #128]	; (800228c <MX_TIM3_Init+0xf0>)
 800220a:	f002 fcad 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002214:	f7ff fc5a 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002218:	481c      	ldr	r0, [pc, #112]	; (800228c <MX_TIM3_Init+0xf0>)
 800221a:	f002 f9ab 	bl	8004574 <HAL_TIM_IC_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002224:	f7ff fc52 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4619      	mov	r1, r3
 8002236:	4815      	ldr	r0, [pc, #84]	; (800228c <MX_TIM3_Init+0xf0>)
 8002238:	f002 ffe4 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002242:	f7ff fc43 	bl	8001acc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800224a:	2301      	movs	r3, #1
 800224c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002256:	463b      	mov	r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	4619      	mov	r1, r3
 800225c:	480b      	ldr	r0, [pc, #44]	; (800228c <MX_TIM3_Init+0xf0>)
 800225e:	f002 fbef 	bl	8004a40 <HAL_TIM_IC_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002268:	f7ff fc30 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	2204      	movs	r2, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <MX_TIM3_Init+0xf0>)
 8002274:	f002 fbe4 	bl	8004a40 <HAL_TIM_IC_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800227e:	f7ff fc25 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	3728      	adds	r7, #40	; 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000178 	.word	0x20000178
 8002290:	40000400 	.word	0x40000400

08002294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b2:	d114      	bne.n	80022de <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a2c      	ldr	r2, [pc, #176]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	61d3      	str	r3, [r2, #28]
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2103      	movs	r1, #3
 80022d0:	201c      	movs	r0, #28
 80022d2:	f000 fab2 	bl	800283a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022d6:	201c      	movs	r0, #28
 80022d8:	f000 facb 	bl	8002872 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022dc:	e042      	b.n	8002364 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_TIM_Base_MspInit+0xdc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d13d      	bne.n	8002364 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	61d3      	str	r3, [r2, #28]
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 8002306:	f043 0308 	orr.w	r3, r3, #8
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_TIM_Base_MspInit+0xd8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002318:	2330      	movs	r3, #48	; 0x30
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002320:	2302      	movs	r3, #2
 8002322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4812      	ldr	r0, [pc, #72]	; (8002374 <HAL_TIM_Base_MspInit+0xe0>)
 800232c:	f000 fabc 	bl	80028a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_Base_MspInit+0xe4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_TIM_Base_MspInit+0xe4>)
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	201d      	movs	r0, #29
 800235a:	f000 fa6e 	bl	800283a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800235e:	201d      	movs	r0, #29
 8002360:	f000 fa87 	bl	8002872 <HAL_NVIC_EnableIRQ>
}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40000400 	.word	0x40000400
 8002374:	40010c00 	.word	0x40010c00
 8002378:	40010000 	.word	0x40010000

0800237c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_USART1_UART_Init+0x50>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023b4:	f002 ff96 	bl	80052e4 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023be:	f7ff fb85 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000024c 	.word	0x2000024c
 80023cc:	40013800 	.word	0x40013800

080023d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <MX_USART3_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART3_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART3_UART_Init+0x4c>)
 8002408:	f002 ff6c 	bl	80052e4 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fb5b 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000208 	.word	0x20000208
 8002420:	40004800 	.word	0x40004800

08002424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a38      	ldr	r2, [pc, #224]	; (8002520 <HAL_UART_MspInit+0xfc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d132      	bne.n	80024aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_UART_MspInit+0x100>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a36      	ldr	r2, [pc, #216]	; (8002524 <HAL_UART_MspInit+0x100>)
 800244a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_UART_MspInit+0x100>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_UART_MspInit+0x100>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a30      	ldr	r2, [pc, #192]	; (8002524 <HAL_UART_MspInit+0x100>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_UART_MspInit+0x100>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	4619      	mov	r1, r3
 8002488:	4827      	ldr	r0, [pc, #156]	; (8002528 <HAL_UART_MspInit+0x104>)
 800248a:	f000 fa0d 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800248e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4619      	mov	r1, r3
 80024a2:	4821      	ldr	r0, [pc, #132]	; (8002528 <HAL_UART_MspInit+0x104>)
 80024a4:	f000 fa00 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024a8:	e036      	b.n	8002518 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_UART_MspInit+0x108>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d131      	bne.n	8002518 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_UART_MspInit+0x100>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	4619      	mov	r1, r3
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <HAL_UART_MspInit+0x10c>)
 80024fa:	f000 f9d5 	bl	80028a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <HAL_UART_MspInit+0x10c>)
 8002514:	f000 f9c8 	bl	80028a8 <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013800 	.word	0x40013800
 8002524:	40021000 	.word	0x40021000
 8002528:	40010800 	.word	0x40010800
 800252c:	40004800 	.word	0x40004800
 8002530:	40010c00 	.word	0x40010c00

08002534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	; (800256c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800255a:	f7ff fdcd 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f003 f87f 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002562:	f7fd fe85 	bl	8000270 <main>
  bx lr
 8002566:	4770      	bx	lr
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002570:	0800628c 	.word	0x0800628c
  ldr r2, =_sbss
 8002574:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002578:	200002a4 	.word	0x200002a4

0800257c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC1_2_IRQHandler>
	...

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_Init+0x28>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_Init+0x28>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002590:	2003      	movs	r0, #3
 8002592:	f000 f947 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002596:	200f      	movs	r0, #15
 8002598:	f000 f808 	bl	80025ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800259c:	f7ff fd08 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_InitTick+0x54>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x58>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f95f 	bl	800288e <HAL_SYSTICK_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00e      	b.n	80025f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d80a      	bhi.n	80025f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e0:	2200      	movs	r2, #0
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e8:	f000 f927 	bl	800283a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_InitTick+0x5c>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000002c 	.word	0x2000002c
 8002604:	20000034 	.word	0x20000034
 8002608:	20000030 	.word	0x20000030

0800260c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_IncTick+0x1c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_IncTick+0x20>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_IncTick+0x20>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000034 	.word	0x20000034
 800262c:	20000290 	.word	0x20000290

08002630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <HAL_GetTick+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000290 	.word	0x20000290

08002644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fff0 	bl	8002630 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265c:	d005      	beq.n	800266a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_Delay+0x44>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	bf00      	nop
 800266c:	f7ff ffe0 	bl	8002630 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d8f7      	bhi.n	800266c <HAL_Delay+0x28>
  {
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000034 	.word	0x20000034

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4906      	ldr	r1, [pc, #24]	; (8002724 <__NVIC_EnableIRQ+0x34>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002804:	f7ff ff90 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff2d 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800284c:	f7ff ff42 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff90 	bl	800277c <NVIC_EncodePriority>
 800285c:	4602      	mov	r2, r0
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff5f 	bl	8002728 <__NVIC_SetPriority>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff35 	bl	80026f0 <__NVIC_EnableIRQ>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffa2 	bl	80027e0 <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e169      	b.n	8002b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028bc:	2201      	movs	r2, #1
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8158 	bne.w	8002b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a9a      	ldr	r2, [pc, #616]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d05e      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028e4:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d875      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028ea:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d058      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028f0:	4a96      	ldr	r2, [pc, #600]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d86f      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028f6:	4a96      	ldr	r2, [pc, #600]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d052      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028fc:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d869      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002902:	4a94      	ldr	r2, [pc, #592]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04c      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002908:	4a92      	ldr	r2, [pc, #584]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d863      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800290e:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d046      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002914:	4a90      	ldr	r2, [pc, #576]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d85d      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800291a:	2b12      	cmp	r3, #18
 800291c:	d82a      	bhi.n	8002974 <HAL_GPIO_Init+0xcc>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d859      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_GPIO_Init+0x80>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	080029a3 	.word	0x080029a3
 800292c:	0800297d 	.word	0x0800297d
 8002930:	0800298f 	.word	0x0800298f
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029d7 	.word	0x080029d7
 800293c:	080029d7 	.word	0x080029d7
 8002940:	080029d7 	.word	0x080029d7
 8002944:	080029d7 	.word	0x080029d7
 8002948:	080029d7 	.word	0x080029d7
 800294c:	080029d7 	.word	0x080029d7
 8002950:	080029d7 	.word	0x080029d7
 8002954:	080029d7 	.word	0x080029d7
 8002958:	080029d7 	.word	0x080029d7
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029d7 	.word	0x080029d7
 8002964:	080029d7 	.word	0x080029d7
 8002968:	080029d7 	.word	0x080029d7
 800296c:	08002985 	.word	0x08002985
 8002970:	08002999 	.word	0x08002999
 8002974:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_GPIO_Init+0x2b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e029      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e024      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01f      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e01a      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e013      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e009      	b.n	80029d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          break;
 80029d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d801      	bhi.n	80029e2 <HAL_GPIO_Init+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_Init+0x13e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2bff      	cmp	r3, #255	; 0xff
 80029ec:	d802      	bhi.n	80029f4 <HAL_GPIO_Init+0x14c>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x152>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3b08      	subs	r3, #8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	210f      	movs	r1, #15
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b1 	beq.w	8002b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <HAL_GPIO_Init+0x2c0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_GPIO_Init+0x2c4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00d      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <HAL_GPIO_Init+0x2c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d007      	beq.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_GPIO_Init+0x1e0>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a94:	2300      	movs	r3, #0
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa6:	492f      	ldr	r1, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4928      	ldr	r1, [pc, #160]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4922      	ldr	r1, [pc, #136]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	491e      	ldr	r1, [pc, #120]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4918      	ldr	r1, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4914      	ldr	r1, [pc, #80]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d021      	beq.n	8002b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
 8002b44:	e021      	b.n	8002b8a <HAL_GPIO_Init+0x2e2>
 8002b46:	bf00      	nop
 8002b48:	10320000 	.word	0x10320000
 8002b4c:	10310000 	.word	0x10310000
 8002b50:	10220000 	.word	0x10220000
 8002b54:	10210000 	.word	0x10210000
 8002b58:	10120000 	.word	0x10120000
 8002b5c:	10110000 	.word	0x10110000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	40010c00 	.word	0x40010c00
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f ae8e 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	372c      	adds	r7, #44	; 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bee:	787b      	ldrb	r3, [r7, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bfa:	e003      	b.n	8002c04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	611a      	str	r2, [r3, #16]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	041a      	lsls	r2, r3, #16
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	400b      	ands	r3, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	611a      	str	r2, [r3, #16]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	420e0020 	.word	0x420e0020

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e26c      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8087 	beq.w	8002d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c78:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d00c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c84:	4b8f      	ldr	r3, [pc, #572]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d112      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5e>
 8002c90:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06c      	beq.n	8002d84 <HAL_RCC_OscConfig+0x12c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d168      	bne.n	8002d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e246      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x76>
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7f      	ldr	r2, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e02e      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e01d      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0xbc>
 8002cfa:	4b72      	ldr	r3, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a71      	ldr	r2, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff fc7c 	bl	8002630 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fc78 	bl	8002630 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1fa      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe4>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fc68 	bl	8002630 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7ff fc64 	bl	8002630 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1e6      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x10c>
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d92:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d11c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x18c>
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_RCC_OscConfig+0x176>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e1ba      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4939      	ldr	r1, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	e03a      	b.n	8002e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d020      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff fc1d 	bl	8002630 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7ff fc19 	bl	8002630 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e19b      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4927      	ldr	r1, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
 8002e2c:	e015      	b.n	8002e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff fbfc 	bl	8002630 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fbf8 	bl	8002630 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e17a      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03a      	beq.n	8002edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d019      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e74:	f7ff fbdc 	bl	8002630 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fbd8 	bl	8002630 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e15a      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 fad8 	bl	8003450 <RCC_Delay>
 8002ea0:	e01c      	b.n	8002edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7ff fbc2 	bl	8002630 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eae:	e00f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fbbe 	bl	8002630 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e140      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	42420000 	.word	0x42420000
 8002ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b9e      	ldr	r3, [pc, #632]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e9      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a6 	beq.w	8003036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b97      	ldr	r3, [pc, #604]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b94      	ldr	r3, [pc, #592]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a93      	ldr	r2, [pc, #588]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	61d3      	str	r3, [r2, #28]
 8002f06:	4b91      	ldr	r3, [pc, #580]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a8a      	ldr	r2, [pc, #552]	; (8003150 <HAL_RCC_OscConfig+0x4f8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fb7f 	bl	8002630 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7ff fb7b 	bl	8002630 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0fd      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <HAL_RCC_OscConfig+0x4f8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x312>
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a7a      	ldr	r2, [pc, #488]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e02d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x334>
 8002f72:	4b76      	ldr	r3, [pc, #472]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a75      	ldr	r2, [pc, #468]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	4b73      	ldr	r3, [pc, #460]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a72      	ldr	r2, [pc, #456]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6213      	str	r3, [r2, #32]
 8002f8a:	e01c      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d10c      	bne.n	8002fae <HAL_RCC_OscConfig+0x356>
 8002f94:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a6c      	ldr	r2, [pc, #432]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a69      	ldr	r2, [pc, #420]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a66      	ldr	r2, [pc, #408]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a63      	ldr	r2, [pc, #396]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d015      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7ff fb2f 	bl	8002630 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7ff fb2b 	bl	8002630 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0ab      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ee      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x37e>
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7ff fb19 	bl	8002630 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7ff fb15 	bl	8002630 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e095      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ee      	bne.n	8003002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b48      	ldr	r3, [pc, #288]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a47      	ldr	r2, [pc, #284]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8081 	beq.w	8003142 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d061      	beq.n	8003110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d146      	bne.n	80030e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x4fc>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff fae9 	bl	8002630 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff fae5 	bl	8002630 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e067      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003074:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d108      	bne.n	800309c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	492d      	ldr	r1, [pc, #180]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a19      	ldr	r1, [r3, #32]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	430b      	orrs	r3, r1
 80030ae:	4927      	ldr	r1, [pc, #156]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x4fc>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7ff fab9 	bl	8002630 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7ff fab5 	bl	8002630 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e037      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46a>
 80030e0:	e02f      	b.n	8003142 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_RCC_OscConfig+0x4fc>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff faa2 	bl	8002630 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7ff fa9e 	bl	8002630 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e020      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x498>
 800310e:	e018      	b.n	8003142 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e013      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_OscConfig+0x4f4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	429a      	cmp	r2, r3
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	40007000 	.word	0x40007000
 8003154:	42420060 	.word	0x42420060

08003158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0d0      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4965      	ldr	r1, [pc, #404]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b8      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d040      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d115      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07f      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e073      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e06b      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4936      	ldr	r1, [pc, #216]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7ff f9f2 	bl	8002630 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7ff f9ee 	bl	8002630 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e053      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d210      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0207 	bic.w	r2, r3, #7
 800328e:	4922      	ldr	r1, [pc, #136]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e032      	b.n	800330e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e6:	f000 f821 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490a      	ldr	r1, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1cc>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1d0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f950 	bl	80025ac <HAL_InitTick>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40022000 	.word	0x40022000
 800331c:	40021000 	.word	0x40021000
 8003320:	08006238 	.word	0x08006238
 8003324:	2000002c 	.word	0x2000002c
 8003328:	20000030 	.word	0x20000030

0800332c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b490      	push	{r4, r7}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003334:	1d3c      	adds	r4, r7, #4
 8003336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800333c:	f240 2301 	movw	r3, #513	; 0x201
 8003340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b04      	cmp	r3, #4
 8003364:	d002      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x40>
 8003366:	2b08      	cmp	r3, #8
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x46>
 800336a:	e02d      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336e:	623b      	str	r3, [r7, #32]
      break;
 8003370:	e02d      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800337e:	4413      	add	r3, r2
 8003380:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003384:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c5b      	lsrs	r3, r3, #17
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800339e:	4413      	add	r3, r2
 80033a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033aa:	fb02 f203 	mul.w	r2, r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e004      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	623b      	str	r3, [r7, #32]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ca:	623b      	str	r3, [r7, #32]
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	6a3b      	ldr	r3, [r7, #32]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc90      	pop	{r4, r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	08006218 	.word	0x08006218
 80033e0:	40021000 	.word	0x40021000
 80033e4:	007a1200 	.word	0x007a1200
 80033e8:	003d0900 	.word	0x003d0900

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_RCC_GetHCLKFreq+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	2000002c 	.word	0x2000002c

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff2 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08006248 	.word	0x08006248

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffde 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0adb      	lsrs	r3, r3, #11
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	08006248 	.word	0x08006248

08003450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <RCC_Delay+0x34>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <RCC_Delay+0x38>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0a5b      	lsrs	r3, r3, #9
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800346c:	bf00      	nop
  }
  while (Delay --);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	60fa      	str	r2, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <RCC_Delay+0x1c>
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	2000002c 	.word	0x2000002c
 8003488:	10624dd3 	.word	0x10624dd3

0800348c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d07d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
 80034c4:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d118      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7ff f8a0 	bl	8002630 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	e008      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7ff f89c 	bl	8002630 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e06d      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d027      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003530:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7ff f86b 	bl	8002630 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7ff f867 	bl	8002630 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e036      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4917      	ldr	r1, [pc, #92]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	4313      	orrs	r3, r2
 8003590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	490b      	ldr	r1, [pc, #44]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42420440 	.word	0x42420440

080035f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b08d      	sub	sp, #52	; 0x34
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003602:	f107 040c 	add.w	r4, r7, #12
 8003606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800360c:	f240 2301 	movw	r3, #513	; 0x201
 8003610:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	2300      	movs	r3, #0
 800361c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	2300      	movs	r3, #0
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b10      	cmp	r3, #16
 8003630:	f200 8091 	bhi.w	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d04c      	beq.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d07c      	beq.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003640:	e089      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003642:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003648:	4b49      	ldr	r3, [pc, #292]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8082 	beq.w	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	0c9b      	lsrs	r3, r3, #18
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003662:	4413      	add	r3, r2
 8003664:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003668:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d018      	beq.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	0c5b      	lsrs	r3, r3, #17
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003682:	4413      	add	r3, r2
 8003684:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003694:	4a37      	ldr	r2, [pc, #220]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	fbb2 f2f3 	udiv	r2, r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a4:	e004      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	4a33      	ldr	r2, [pc, #204]	; (8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d102      	bne.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036c2:	e04a      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036d2:	e042      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e4:	d108      	bne.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80036f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	e01f      	b.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003710:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
 8003716:	e00f      	b.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003722:	d11c      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003730:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003736:	e012      	b.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003738:	e011      	b.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800373a:	f7ff fe75 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0b9b      	lsrs	r3, r3, #14
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800375e:	bf00      	nop
    }
  }
  return (frequency);
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003762:	4618      	mov	r0, r3
 8003764:	3734      	adds	r7, #52	; 0x34
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}
 800376a:	bf00      	nop
 800376c:	08006228 	.word	0x08006228
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	003d0900 	.word	0x003d0900
 800377c:	aaaaaaab 	.word	0xaaaaaaab

08003780 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e084      	b.n	80038a0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7c5b      	ldrb	r3, [r3, #17]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fe fb68 	bl	8001e7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9c8 	bl	8003b48 <HAL_RTC_WaitForSynchro>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2204      	movs	r2, #4
 80037c2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e06b      	b.n	80038a0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa81 	bl	8003cd0 <RTC_EnterInitMode>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e060      	b.n	80038a0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0207 	bic.w	r2, r2, #7
 80037ec:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80037f6:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RTC_Init+0x128>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <HAL_RTC_Init+0x128>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RTC_Init+0x128>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4926      	ldr	r1, [pc, #152]	; (80038a8 <HAL_RTC_Init+0x128>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381c:	d003      	beq.n	8003826 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e00e      	b.n	8003844 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003826:	2001      	movs	r0, #1
 8003828:	f7ff fee6 	bl	80035f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800382c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2204      	movs	r2, #4
 8003838:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e030      	b.n	80038a0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b01      	subs	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 010f 	bic.w	r1, r3, #15
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0c1a      	lsrs	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	b291      	uxth	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	430b      	orrs	r3, r1
 800386e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa55 	bl	8003d20 <RTC_ExitInitMode>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2204      	movs	r2, #4
 8003880:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00c      	b.n	80038a0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800389e:	2300      	movs	r3, #0
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40006c00 	.word	0x40006c00

080038ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_RTC_SetTime+0x20>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e080      	b.n	80039d2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	7c1b      	ldrb	r3, [r3, #16]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_RTC_SetTime+0x30>
 80038d8:	2302      	movs	r3, #2
 80038da:	e07a      	b.n	80039d2 <HAL_RTC_SetTime+0x126>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038f8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	4619      	mov	r1, r3
 8003902:	460b      	mov	r3, r1
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a5b      	subs	r3, r3, r1
 8003908:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800390a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003910:	4413      	add	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e01e      	b.n	8003954 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa28 	bl	8003d70 <RTC_Bcd2ToByte>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003928:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa1d 	bl	8003d70 <RTC_Bcd2ToByte>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003942:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	789b      	ldrb	r3, [r3, #2]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fa11 	bl	8003d70 <RTC_Bcd2ToByte>
 800394e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003950:	4423      	add	r3, r4
 8003952:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f953 	bl	8003c02 <RTC_WriteTimeCounter>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2204      	movs	r2, #4
 8003966:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e02f      	b.n	80039d2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0205 	bic.w	r2, r2, #5
 8003980:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f964 	bl	8003c50 <RTC_ReadAlarmCounter>
 8003988:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003990:	d018      	beq.n	80039c4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	429a      	cmp	r2, r3
 8003998:	d214      	bcs.n	80039c4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80039a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039a4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f96a 	bl	8003c82 <RTC_WriteAlarmCounter>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2204      	movs	r2, #4
 80039b8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e006      	b.n	80039d2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd90      	pop	{r4, r7, pc}
	...

080039dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_RTC_SetDate+0x24>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e097      	b.n	8003b34 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	7c1b      	ldrb	r3, [r3, #16]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_RTC_SetDate+0x34>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e091      	b.n	8003b34 <HAL_RTC_SetDate+0x158>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	78da      	ldrb	r2, [r3, #3]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	785a      	ldrb	r2, [r3, #1]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	789a      	ldrb	r2, [r3, #2]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	739a      	strb	r2, [r3, #14]
 8003a3a:	e01a      	b.n	8003a72 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	78db      	ldrb	r3, [r3, #3]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f995 	bl	8003d70 <RTC_Bcd2ToByte>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	785b      	ldrb	r3, [r3, #1]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f98c 	bl	8003d70 <RTC_Bcd2ToByte>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	789b      	ldrb	r3, [r3, #2]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f983 	bl	8003d70 <RTC_Bcd2ToByte>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	7bdb      	ldrb	r3, [r3, #15]
 8003a76:	4618      	mov	r0, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	7b59      	ldrb	r1, [r3, #13]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	7b9b      	ldrb	r3, [r3, #14]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f000 f993 	bl	8003dac <RTC_WeekDayNum>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	7b1a      	ldrb	r2, [r3, #12]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f883 	bl	8003ba2 <RTC_ReadTimeCounter>
 8003a9c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <HAL_RTC_SetDate+0x160>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b18      	cmp	r3, #24
 8003aae:	d93a      	bls.n	8003b26 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_RTC_SetDate+0x164>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_RTC_SetDate+0x168>)
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f89a 	bl	8003c02 <RTC_WriteTimeCounter>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e027      	b.n	8003b34 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f8b3 	bl	8003c50 <RTC_ReadAlarmCounter>
 8003aea:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af2:	d018      	beq.n	8003b26 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d214      	bcs.n	8003b26 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003b02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b06:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8b9 	bl	8003c82 <RTC_WriteAlarmCounter>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e006      	b.n	8003b34 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	91a2b3c5 	.word	0x91a2b3c5
 8003b40:	aaaaaaab 	.word	0xaaaaaaab
 8003b44:	00015180 	.word	0x00015180

08003b48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e01d      	b.n	8003b9a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0208 	bic.w	r2, r2, #8
 8003b6c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b6e:	f7fe fd5f 	bl	8002630 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b74:	e009      	b.n	8003b8a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b76:	f7fe fd5b 	bl	8002630 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b84:	d901      	bls.n	8003b8a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e007      	b.n	8003b9a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ee      	beq.n	8003b76 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b087      	sub	sp, #28
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	827b      	strh	r3, [r7, #18]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	823b      	strh	r3, [r7, #16]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003bd2:	8a7a      	ldrh	r2, [r7, #18]
 8003bd4:	8a3b      	ldrh	r3, [r7, #16]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d008      	beq.n	8003bec <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003bda:	8a3b      	ldrh	r3, [r7, #16]
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e004      	b.n	8003bf6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
 8003bee:	041a      	lsls	r2, r3, #16
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f85d 	bl	8003cd0 <RTC_EnterInitMode>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	e011      	b.n	8003c46 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	0c12      	lsrs	r2, r2, #16
 8003c2a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	b292      	uxth	r2, r2
 8003c34:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f872 	bl	8003d20 <RTC_ExitInitMode>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	81fb      	strh	r3, [r7, #14]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003c70:	89fb      	ldrh	r3, [r7, #14]
 8003c72:	041a      	lsls	r2, r3, #16
 8003c74:	89bb      	ldrh	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f81d 	bl	8003cd0 <RTC_EnterInitMode>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e011      	b.n	8003cc6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	0c12      	lsrs	r2, r2, #16
 8003caa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f832 	bl	8003d20 <RTC_ExitInitMode>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003cdc:	f7fe fca8 	bl	8002630 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ce2:	e009      	b.n	8003cf8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ce4:	f7fe fca4 	bl	8002630 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf2:	d901      	bls.n	8003cf8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e00f      	b.n	8003d18 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ee      	beq.n	8003ce4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0210 	orr.w	r2, r2, #16
 8003d14:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0210 	bic.w	r2, r2, #16
 8003d3a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d3c:	f7fe fc78 	bl	8002630 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d42:	e009      	b.n	8003d58 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d44:	f7fe fc74 	bl	8002630 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d52:	d901      	bls.n	8003d58 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e007      	b.n	8003d68 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b2db      	uxtb	r3, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
 8003db8:	4613      	mov	r3, r2
 8003dba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d82d      	bhi.n	8003e2e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <RTC_WeekDayNum+0xe4>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	085a      	lsrs	r2, r3, #1
 8003de6:	78bb      	ldrb	r3, [r7, #2]
 8003de8:	441a      	add	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	441a      	add	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4926      	ldr	r1, [pc, #152]	; (8003e94 <RTC_WeekDayNum+0xe8>)
 8003dfc:	fba1 1303 	umull	r1, r3, r1, r3
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	4922      	ldr	r1, [pc, #136]	; (8003e94 <RTC_WeekDayNum+0xe8>)
 8003e0a:	fba1 1303 	umull	r1, r3, r1, r3
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	4413      	add	r3, r2
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <RTC_WeekDayNum+0xec>)
 8003e16:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1a:	1ad1      	subs	r1, r2, r3
 8003e1c:	0849      	lsrs	r1, r1, #1
 8003e1e:	440b      	add	r3, r1
 8003e20:	0899      	lsrs	r1, r3, #2
 8003e22:	460b      	mov	r3, r1
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e029      	b.n	8003e82 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <RTC_WeekDayNum+0xe4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	085a      	lsrs	r2, r3, #1
 8003e42:	78bb      	ldrb	r3, [r7, #2]
 8003e44:	441a      	add	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	441a      	add	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4910      	ldr	r1, [pc, #64]	; (8003e94 <RTC_WeekDayNum+0xe8>)
 8003e54:	fba1 1303 	umull	r1, r3, r1, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	490d      	ldr	r1, [pc, #52]	; (8003e94 <RTC_WeekDayNum+0xe8>)
 8003e60:	fba1 1303 	umull	r1, r3, r1, r3
 8003e64:	09db      	lsrs	r3, r3, #7
 8003e66:	4413      	add	r3, r2
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <RTC_WeekDayNum+0xec>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	1ad1      	subs	r1, r2, r3
 8003e72:	0849      	lsrs	r1, r1, #1
 8003e74:	440b      	add	r3, r1
 8003e76:	0899      	lsrs	r1, r3, #2
 8003e78:	460b      	mov	r3, r1
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a5b      	subs	r3, r3, r1
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	b2db      	uxtb	r3, r3
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	38e38e39 	.word	0x38e38e39
 8003e94:	51eb851f 	.word	0x51eb851f
 8003e98:	24924925 	.word	0x24924925

08003e9c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_RTCEx_BKUPWrite+0x30>)
 8003eae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40006c00 	.word	0x40006c00

08003ed0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_RTCEx_BKUPRead+0x34>)
 8003ee4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	40006c00 	.word	0x40006c00

08003f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e076      	b.n	8004008 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2a:	d009      	beq.n	8003f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
 8003f32:	e005      	b.n	8003f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd ffe8 	bl	8001f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	ea42 0103 	orr.w	r1, r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	0c1a      	lsrs	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 0204 	and.w	r2, r2, #4
 8003fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Transmit+0x22>
 800402e:	2302      	movs	r3, #2
 8004030:	e126      	b.n	8004280 <HAL_SPI_Transmit+0x270>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403a:	f7fe faf9 	bl	8002630 <HAL_GetTick>
 800403e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004054:	e10b      	b.n	800426e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_Transmit+0x52>
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004066:	e102      	b.n	800426e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ae:	d10f      	bne.n	80040d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d007      	beq.n	80040ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f6:	d14b      	bne.n	8004190 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Transmit+0xf6>
 8004100:	8afb      	ldrh	r3, [r7, #22]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d13e      	bne.n	8004184 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	881a      	ldrh	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	1c9a      	adds	r2, r3, #2
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800412a:	e02b      	b.n	8004184 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d112      	bne.n	8004160 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	881a      	ldrh	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	86da      	strh	r2, [r3, #54]	; 0x36
 800415e:	e011      	b.n	8004184 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004160:	f7fe fa66 	bl	8002630 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d803      	bhi.n	8004178 <HAL_SPI_Transmit+0x168>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004176:	d102      	bne.n	800417e <HAL_SPI_Transmit+0x16e>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004182:	e074      	b.n	800426e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ce      	bne.n	800412c <HAL_SPI_Transmit+0x11c>
 800418e:	e04c      	b.n	800422a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_Transmit+0x18e>
 8004198:	8afb      	ldrh	r3, [r7, #22]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d140      	bne.n	8004220 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041c4:	e02c      	b.n	8004220 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d113      	bne.n	80041fc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80041fa:	e011      	b.n	8004220 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fc:	f7fe fa18 	bl	8002630 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d803      	bhi.n	8004214 <HAL_SPI_Transmit+0x204>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004212:	d102      	bne.n	800421a <HAL_SPI_Transmit+0x20a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800421e:	e026      	b.n	800426e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cd      	bne.n	80041c6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8b2 	bl	8004398 <SPI_EndRxTxTransaction>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e000      	b.n	800426e <HAL_SPI_Transmit+0x25e>
  }

error:
 800426c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800427e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004298:	f7fe f9ca 	bl	8002630 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a8:	f7fe f9c2 	bl	8002630 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	e054      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c6:	d050      	beq.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c8:	f7fe f9b2 	bl	8002630 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d902      	bls.n	80042de <SPI_WaitFlagStateUntilTimeout+0x56>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13d      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d111      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d004      	beq.n	800430c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d107      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d10f      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e017      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3b01      	subs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d19b      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2000002c 	.word	0x2000002c

08004398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff6a 	bl	8004288 <SPI_WaitFlagStateUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e000      	b.n	80043cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd ff4a 	bl	8002294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fccc 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e03a      	b.n	8004502 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_TIM_Base_Start_IT+0x98>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x58>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d009      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x58>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <HAL_TIM_Base_Start_IT+0x9c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x58>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <HAL_TIM_Base_Start_IT+0xa0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d010      	beq.n	8004500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	e007      	b.n	8004500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800

08004518 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	f241 1311 	movw	r3, #4369	; 0x1111
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <HAL_TIM_Base_Stop_IT+0x48>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	f240 4344 	movw	r3, #1092	; 0x444
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_TIM_Base_Stop_IT+0x48>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f839 	bl	8004612 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fbfc 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_TIM_IC_Start_IT+0x1a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e013      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x42>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d104      	bne.n	800464e <HAL_TIM_IC_Start_IT+0x2a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e00b      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x42>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d104      	bne.n	800465e <HAL_TIM_IC_Start_IT+0x3a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e003      	b.n	8004666 <HAL_TIM_IC_Start_IT+0x42>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_TIM_IC_Start_IT+0x54>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e013      	b.n	80046a0 <HAL_TIM_IC_Start_IT+0x7c>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b04      	cmp	r3, #4
 800467c:	d104      	bne.n	8004688 <HAL_TIM_IC_Start_IT+0x64>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e00b      	b.n	80046a0 <HAL_TIM_IC_Start_IT+0x7c>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d104      	bne.n	8004698 <HAL_TIM_IC_Start_IT+0x74>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e003      	b.n	80046a0 <HAL_TIM_IC_Start_IT+0x7c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0b3      	b.n	800481a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Start_IT+0x9e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c0:	e013      	b.n	80046ea <HAL_TIM_IC_Start_IT+0xc6>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_IC_Start_IT+0xae>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	e00b      	b.n	80046ea <HAL_TIM_IC_Start_IT+0xc6>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_IC_Start_IT+0xbe>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e0:	e003      	b.n	80046ea <HAL_TIM_IC_Start_IT+0xc6>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_IC_Start_IT+0xd6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f8:	e013      	b.n	8004722 <HAL_TIM_IC_Start_IT+0xfe>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d104      	bne.n	800470a <HAL_TIM_IC_Start_IT+0xe6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004708:	e00b      	b.n	8004722 <HAL_TIM_IC_Start_IT+0xfe>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d104      	bne.n	800471a <HAL_TIM_IC_Start_IT+0xf6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004718:	e003      	b.n	8004722 <HAL_TIM_IC_Start_IT+0xfe>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d841      	bhi.n	80047ac <HAL_TIM_IC_Start_IT+0x188>
 8004728:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_TIM_IC_Start_IT+0x10c>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004765 	.word	0x08004765
 8004734:	080047ad 	.word	0x080047ad
 8004738:	080047ad 	.word	0x080047ad
 800473c:	080047ad 	.word	0x080047ad
 8004740:	08004777 	.word	0x08004777
 8004744:	080047ad 	.word	0x080047ad
 8004748:	080047ad 	.word	0x080047ad
 800474c:	080047ad 	.word	0x080047ad
 8004750:	08004789 	.word	0x08004789
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047ad 	.word	0x080047ad
 800475c:	080047ad 	.word	0x080047ad
 8004760:	0800479b 	.word	0x0800479b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0202 	orr.w	r2, r2, #2
 8004772:	60da      	str	r2, [r3, #12]
      break;
 8004774:	e01b      	b.n	80047ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0204 	orr.w	r2, r2, #4
 8004784:	60da      	str	r2, [r3, #12]
      break;
 8004786:	e012      	b.n	80047ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0208 	orr.w	r2, r2, #8
 8004796:	60da      	str	r2, [r3, #12]
      break;
 8004798:	e009      	b.n	80047ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0210 	orr.w	r2, r2, #16
 80047a8:	60da      	str	r2, [r3, #12]
      break;
 80047aa:	e000      	b.n	80047ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80047ac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fcff 	bl	80051ba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIM_IC_Start_IT+0x200>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <HAL_TIM_IC_Start_IT+0x204>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <HAL_TIM_IC_Start_IT+0x208>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d010      	beq.n	8004818 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e007      	b.n	8004818 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800

08004830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0202 	mvn.w	r2, #2
 800485c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fe80 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa7c 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa82 	bl	8004d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b04      	cmp	r3, #4
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0204 	mvn.w	r2, #4
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fe56 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa52 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fa58 	bl	8004d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0208 	mvn.w	r2, #8
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fe2c 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa28 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fa2e 	bl	8004d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b10      	cmp	r3, #16
 8004940:	d122      	bne.n	8004988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b10      	cmp	r3, #16
 800494e:	d11b      	bne.n	8004988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0210 	mvn.w	r2, #16
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2208      	movs	r2, #8
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc fe02 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9fe 	bl	8004d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa04 	bl	8004d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b01      	cmp	r3, #1
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0201 	mvn.w	r2, #1
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fb ffa6 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d10e      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b80      	cmp	r3, #128	; 0x80
 80049ce:	d107      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fc79 	bl	80052d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9c8 	bl	8004d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0220 	mvn.w	r2, #32
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fc44 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e082      	b.n	8004b60 <HAL_TIM_IC_ConfigChannel+0x120>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 f9fc 	bl	8004e74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 020c 	bic.w	r2, r2, #12
 8004a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
 8004a9e:	e05a      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d11c      	bne.n	8004ae0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f000 fa65 	bl	8004f84 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6999      	ldr	r1, [r3, #24]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	021a      	lsls	r2, r3, #8
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	e03a      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f000 fab0 	bl	800505a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020c 	bic.w	r2, r2, #12
 8004b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
 8004b1c:	e01b      	b.n	8004b56 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f000 facf 	bl	80050d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0b3      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x180>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb8:	d03e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0xd0>
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	f200 8087 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	f000 8085 	beq.w	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bce:	d87f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004bd0:	2b70      	cmp	r3, #112	; 0x70
 8004bd2:	d01a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xa2>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d87b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d050      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x116>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d877      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004be0:	2b50      	cmp	r3, #80	; 0x50
 8004be2:	d03c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xf6>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d873      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x136>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d86f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d064      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x156>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d86b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d060      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x156>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d867      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x156>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d05a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f000 faaf 	bl	800517c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e04e      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f000 fa98 	bl	800517c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e03b      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 f95c 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2150      	movs	r1, #80	; 0x50
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa66 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e02b      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 f9b6 	bl	8004ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2160      	movs	r1, #96	; 0x60
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa56 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e01b      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 f93c 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fa46 	bl	8005148 <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e00b      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fa3d 	bl	8005148 <TIM_ITRx_SetConfig>
        break;
 8004cce:	e002      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d831      	bhi.n	8004d68 <HAL_TIM_ReadCapturedValue+0x78>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d4b 	.word	0x08004d4b
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d5f 	.word	0x08004d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	60fb      	str	r3, [r7, #12]

      break;
 8004d48:	e00f      	b.n	8004d6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	60fb      	str	r3, [r7, #12]

      break;
 8004d52:	e00a      	b.n	8004d6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	60fb      	str	r3, [r7, #12]

      break;
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	60fb      	str	r3, [r7, #12]

      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  return tmpreg;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <TIM_Base_SetConfig+0xbc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x30>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <TIM_Base_SetConfig+0xc0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d007      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <TIM_Base_SetConfig+0xbc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_Base_SetConfig+0x62>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <TIM_Base_SetConfig+0xc0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <TIM_Base_SetConfig+0xb8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d103      	bne.n	8004e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	615a      	str	r2, [r3, #20]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800

08004e74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <TIM_TI1_SetConfig+0xa8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_TI1_SetConfig+0x46>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d007      	beq.n	8004eba <TIM_TI1_SetConfig+0x46>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <TIM_TI1_SetConfig+0xac>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_TI1_SetConfig+0x46>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <TIM_TI1_SetConfig+0xb0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <TIM_TI1_SetConfig+0x4a>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <TIM_TI1_SetConfig+0x4c>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e003      	b.n	8004ede <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 030a 	and.w	r3, r3, #10
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800

08004f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 030a 	bic.w	r3, r3, #10
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	031b      	lsls	r3, r3, #12
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f023 0210 	bic.w	r2, r3, #16
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	031b      	lsls	r3, r3, #12
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	b2db      	uxtb	r3, r3
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800510e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	b29b      	uxth	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	031b      	lsls	r3, r3, #12
 8005128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	f043 0307 	orr.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b087      	sub	sp, #28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e046      	b.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d009      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a10      	ldr	r2, [pc, #64]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10c      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e03f      	b.n	8005376 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd f88a 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f905 	bl	8005538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	; 0x28
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	d17c      	bne.n	8005498 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_UART_Transmit+0x2c>
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e075      	b.n	800549a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Transmit+0x3e>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e06e      	b.n	800549a <HAL_UART_Transmit+0x11c>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053d2:	f7fd f92d 	bl	8002630 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x82>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005410:	e02a      	b.n	8005468 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f840 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e036      	b.n	800549a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3302      	adds	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e007      	b.n	800545a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1cf      	bne.n	8005412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2200      	movs	r2, #0
 800547a:	2140      	movs	r1, #64	; 0x40
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f810 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e006      	b.n	800549a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b2:	e02c      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ba:	d028      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054c2:	f7fd f8b5 	bl	8002630 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d21d      	bcs.n	800550e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00f      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d0c3      	beq.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005572:	f023 030c 	bic.w	r3, r3, #12
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	430b      	orrs	r3, r1
 800557e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <UART_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d103      	bne.n	80055a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7fd ff42 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	e002      	b.n	80055ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055a8:	f7fd ff2a 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80055ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <UART_SetConfig+0x118>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	0119      	lsls	r1, r3, #4
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009a      	lsls	r2, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <UART_SetConfig+0x118>)
 80055e6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2064      	movs	r0, #100	; 0x64
 80055ee:	fb00 f303 	mul.w	r3, r0, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <UART_SetConfig+0x118>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	4419      	add	r1, r3
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009a      	lsls	r2, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	fbb2 f2f3 	udiv	r2, r2, r3
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <UART_SetConfig+0x118>)
 800561e:	fba3 0302 	umull	r0, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2064      	movs	r0, #100	; 0x64
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	3332      	adds	r3, #50	; 0x32
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	440a      	add	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40013800 	.word	0x40013800
 8005650:	51eb851f 	.word	0x51eb851f

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000038 	.word	0x20000038

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2600      	movs	r6, #0
 8005664:	4d0c      	ldr	r5, [pc, #48]	; (8005698 <__libc_init_array+0x38>)
 8005666:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	f000 fc5c 	bl	8005f2c <_init>
 8005674:	2600      	movs	r6, #0
 8005676:	4d0a      	ldr	r5, [pc, #40]	; (80056a0 <__libc_init_array+0x40>)
 8005678:	4c0a      	ldr	r4, [pc, #40]	; (80056a4 <__libc_init_array+0x44>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08006284 	.word	0x08006284
 800569c:	08006284 	.word	0x08006284
 80056a0:	08006284 	.word	0x08006284
 80056a4:	08006288 	.word	0x08006288

080056a8 <memset>:
 80056a8:	4603      	mov	r3, r0
 80056aa:	4402      	add	r2, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <siprintf>:
 80056b8:	b40e      	push	{r1, r2, r3}
 80056ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056be:	b500      	push	{lr}
 80056c0:	b09c      	sub	sp, #112	; 0x70
 80056c2:	ab1d      	add	r3, sp, #116	; 0x74
 80056c4:	9002      	str	r0, [sp, #8]
 80056c6:	9006      	str	r0, [sp, #24]
 80056c8:	9107      	str	r1, [sp, #28]
 80056ca:	9104      	str	r1, [sp, #16]
 80056cc:	4808      	ldr	r0, [pc, #32]	; (80056f0 <siprintf+0x38>)
 80056ce:	4909      	ldr	r1, [pc, #36]	; (80056f4 <siprintf+0x3c>)
 80056d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d4:	9105      	str	r1, [sp, #20]
 80056d6:	6800      	ldr	r0, [r0, #0]
 80056d8:	a902      	add	r1, sp, #8
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	f000 f868 	bl	80057b0 <_svfiprintf_r>
 80056e0:	2200      	movs	r2, #0
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	b01c      	add	sp, #112	; 0x70
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	20000038 	.word	0x20000038
 80056f4:	ffff0208 	.word	0xffff0208

080056f8 <__ssputs_r>:
 80056f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	688e      	ldr	r6, [r1, #8]
 80056fe:	4682      	mov	sl, r0
 8005700:	429e      	cmp	r6, r3
 8005702:	460c      	mov	r4, r1
 8005704:	4690      	mov	r8, r2
 8005706:	461f      	mov	r7, r3
 8005708:	d838      	bhi.n	800577c <__ssputs_r+0x84>
 800570a:	898a      	ldrh	r2, [r1, #12]
 800570c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005710:	d032      	beq.n	8005778 <__ssputs_r+0x80>
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	6909      	ldr	r1, [r1, #16]
 8005716:	3301      	adds	r3, #1
 8005718:	eba5 0901 	sub.w	r9, r5, r1
 800571c:	6965      	ldr	r5, [r4, #20]
 800571e:	444b      	add	r3, r9
 8005720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005728:	106d      	asrs	r5, r5, #1
 800572a:	429d      	cmp	r5, r3
 800572c:	bf38      	it	cc
 800572e:	461d      	movcc	r5, r3
 8005730:	0553      	lsls	r3, r2, #21
 8005732:	d531      	bpl.n	8005798 <__ssputs_r+0xa0>
 8005734:	4629      	mov	r1, r5
 8005736:	f000 fb53 	bl	8005de0 <_malloc_r>
 800573a:	4606      	mov	r6, r0
 800573c:	b950      	cbnz	r0, 8005754 <__ssputs_r+0x5c>
 800573e:	230c      	movs	r3, #12
 8005740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005744:	f8ca 3000 	str.w	r3, [sl]
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	464a      	mov	r2, r9
 8005756:	6921      	ldr	r1, [r4, #16]
 8005758:	f000 face 	bl	8005cf8 <memcpy>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	6126      	str	r6, [r4, #16]
 800576a:	444e      	add	r6, r9
 800576c:	6026      	str	r6, [r4, #0]
 800576e:	463e      	mov	r6, r7
 8005770:	6165      	str	r5, [r4, #20]
 8005772:	eba5 0509 	sub.w	r5, r5, r9
 8005776:	60a5      	str	r5, [r4, #8]
 8005778:	42be      	cmp	r6, r7
 800577a:	d900      	bls.n	800577e <__ssputs_r+0x86>
 800577c:	463e      	mov	r6, r7
 800577e:	4632      	mov	r2, r6
 8005780:	4641      	mov	r1, r8
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	f000 fac6 	bl	8005d14 <memmove>
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	1b9b      	subs	r3, r3, r6
 800578e:	4432      	add	r2, r6
 8005790:	2000      	movs	r0, #0
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	6022      	str	r2, [r4, #0]
 8005796:	e7db      	b.n	8005750 <__ssputs_r+0x58>
 8005798:	462a      	mov	r2, r5
 800579a:	f000 fb7b 	bl	8005e94 <_realloc_r>
 800579e:	4606      	mov	r6, r0
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1e1      	bne.n	8005768 <__ssputs_r+0x70>
 80057a4:	4650      	mov	r0, sl
 80057a6:	6921      	ldr	r1, [r4, #16]
 80057a8:	f000 face 	bl	8005d48 <_free_r>
 80057ac:	e7c7      	b.n	800573e <__ssputs_r+0x46>
	...

080057b0 <_svfiprintf_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4698      	mov	r8, r3
 80057b6:	898b      	ldrh	r3, [r1, #12]
 80057b8:	4607      	mov	r7, r0
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	460d      	mov	r5, r1
 80057be:	4614      	mov	r4, r2
 80057c0:	b09d      	sub	sp, #116	; 0x74
 80057c2:	d50e      	bpl.n	80057e2 <_svfiprintf_r+0x32>
 80057c4:	690b      	ldr	r3, [r1, #16]
 80057c6:	b963      	cbnz	r3, 80057e2 <_svfiprintf_r+0x32>
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	f000 fb09 	bl	8005de0 <_malloc_r>
 80057ce:	6028      	str	r0, [r5, #0]
 80057d0:	6128      	str	r0, [r5, #16]
 80057d2:	b920      	cbnz	r0, 80057de <_svfiprintf_r+0x2e>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057dc:	e0d1      	b.n	8005982 <_svfiprintf_r+0x1d2>
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	616b      	str	r3, [r5, #20]
 80057e2:	2300      	movs	r3, #0
 80057e4:	9309      	str	r3, [sp, #36]	; 0x24
 80057e6:	2320      	movs	r3, #32
 80057e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ec:	2330      	movs	r3, #48	; 0x30
 80057ee:	f04f 0901 	mov.w	r9, #1
 80057f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800599c <_svfiprintf_r+0x1ec>
 80057fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057fe:	4623      	mov	r3, r4
 8005800:	469a      	mov	sl, r3
 8005802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005806:	b10a      	cbz	r2, 800580c <_svfiprintf_r+0x5c>
 8005808:	2a25      	cmp	r2, #37	; 0x25
 800580a:	d1f9      	bne.n	8005800 <_svfiprintf_r+0x50>
 800580c:	ebba 0b04 	subs.w	fp, sl, r4
 8005810:	d00b      	beq.n	800582a <_svfiprintf_r+0x7a>
 8005812:	465b      	mov	r3, fp
 8005814:	4622      	mov	r2, r4
 8005816:	4629      	mov	r1, r5
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff ff6d 	bl	80056f8 <__ssputs_r>
 800581e:	3001      	adds	r0, #1
 8005820:	f000 80aa 	beq.w	8005978 <_svfiprintf_r+0x1c8>
 8005824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005826:	445a      	add	r2, fp
 8005828:	9209      	str	r2, [sp, #36]	; 0x24
 800582a:	f89a 3000 	ldrb.w	r3, [sl]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80a2 	beq.w	8005978 <_svfiprintf_r+0x1c8>
 8005834:	2300      	movs	r3, #0
 8005836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800583a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800583e:	f10a 0a01 	add.w	sl, sl, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	9307      	str	r3, [sp, #28]
 8005846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800584a:	931a      	str	r3, [sp, #104]	; 0x68
 800584c:	4654      	mov	r4, sl
 800584e:	2205      	movs	r2, #5
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	4851      	ldr	r0, [pc, #324]	; (800599c <_svfiprintf_r+0x1ec>)
 8005856:	f000 fa41 	bl	8005cdc <memchr>
 800585a:	9a04      	ldr	r2, [sp, #16]
 800585c:	b9d8      	cbnz	r0, 8005896 <_svfiprintf_r+0xe6>
 800585e:	06d0      	lsls	r0, r2, #27
 8005860:	bf44      	itt	mi
 8005862:	2320      	movmi	r3, #32
 8005864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005868:	0711      	lsls	r1, r2, #28
 800586a:	bf44      	itt	mi
 800586c:	232b      	movmi	r3, #43	; 0x2b
 800586e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005872:	f89a 3000 	ldrb.w	r3, [sl]
 8005876:	2b2a      	cmp	r3, #42	; 0x2a
 8005878:	d015      	beq.n	80058a6 <_svfiprintf_r+0xf6>
 800587a:	4654      	mov	r4, sl
 800587c:	2000      	movs	r0, #0
 800587e:	f04f 0c0a 	mov.w	ip, #10
 8005882:	9a07      	ldr	r2, [sp, #28]
 8005884:	4621      	mov	r1, r4
 8005886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800588a:	3b30      	subs	r3, #48	; 0x30
 800588c:	2b09      	cmp	r3, #9
 800588e:	d94e      	bls.n	800592e <_svfiprintf_r+0x17e>
 8005890:	b1b0      	cbz	r0, 80058c0 <_svfiprintf_r+0x110>
 8005892:	9207      	str	r2, [sp, #28]
 8005894:	e014      	b.n	80058c0 <_svfiprintf_r+0x110>
 8005896:	eba0 0308 	sub.w	r3, r0, r8
 800589a:	fa09 f303 	lsl.w	r3, r9, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	46a2      	mov	sl, r4
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	e7d2      	b.n	800584c <_svfiprintf_r+0x9c>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	1d19      	adds	r1, r3, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	9103      	str	r1, [sp, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfbb      	ittet	lt
 80058b2:	425b      	neglt	r3, r3
 80058b4:	f042 0202 	orrlt.w	r2, r2, #2
 80058b8:	9307      	strge	r3, [sp, #28]
 80058ba:	9307      	strlt	r3, [sp, #28]
 80058bc:	bfb8      	it	lt
 80058be:	9204      	strlt	r2, [sp, #16]
 80058c0:	7823      	ldrb	r3, [r4, #0]
 80058c2:	2b2e      	cmp	r3, #46	; 0x2e
 80058c4:	d10c      	bne.n	80058e0 <_svfiprintf_r+0x130>
 80058c6:	7863      	ldrb	r3, [r4, #1]
 80058c8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ca:	d135      	bne.n	8005938 <_svfiprintf_r+0x188>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	3402      	adds	r4, #2
 80058d0:	1d1a      	adds	r2, r3, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	9203      	str	r2, [sp, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059ac <_svfiprintf_r+0x1fc>
 80058e4:	2203      	movs	r2, #3
 80058e6:	4650      	mov	r0, sl
 80058e8:	7821      	ldrb	r1, [r4, #0]
 80058ea:	f000 f9f7 	bl	8005cdc <memchr>
 80058ee:	b140      	cbz	r0, 8005902 <_svfiprintf_r+0x152>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	eba0 000a 	sub.w	r0, r0, sl
 80058f6:	fa03 f000 	lsl.w	r0, r3, r0
 80058fa:	9b04      	ldr	r3, [sp, #16]
 80058fc:	3401      	adds	r4, #1
 80058fe:	4303      	orrs	r3, r0
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005906:	2206      	movs	r2, #6
 8005908:	4825      	ldr	r0, [pc, #148]	; (80059a0 <_svfiprintf_r+0x1f0>)
 800590a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800590e:	f000 f9e5 	bl	8005cdc <memchr>
 8005912:	2800      	cmp	r0, #0
 8005914:	d038      	beq.n	8005988 <_svfiprintf_r+0x1d8>
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <_svfiprintf_r+0x1f4>)
 8005918:	bb1b      	cbnz	r3, 8005962 <_svfiprintf_r+0x1b2>
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	3307      	adds	r3, #7
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	3308      	adds	r3, #8
 8005924:	9303      	str	r3, [sp, #12]
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005928:	4433      	add	r3, r6
 800592a:	9309      	str	r3, [sp, #36]	; 0x24
 800592c:	e767      	b.n	80057fe <_svfiprintf_r+0x4e>
 800592e:	460c      	mov	r4, r1
 8005930:	2001      	movs	r0, #1
 8005932:	fb0c 3202 	mla	r2, ip, r2, r3
 8005936:	e7a5      	b.n	8005884 <_svfiprintf_r+0xd4>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 0c0a 	mov.w	ip, #10
 800593e:	4619      	mov	r1, r3
 8005940:	3401      	adds	r4, #1
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	4620      	mov	r0, r4
 8005946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594a:	3a30      	subs	r2, #48	; 0x30
 800594c:	2a09      	cmp	r2, #9
 800594e:	d903      	bls.n	8005958 <_svfiprintf_r+0x1a8>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0c5      	beq.n	80058e0 <_svfiprintf_r+0x130>
 8005954:	9105      	str	r1, [sp, #20]
 8005956:	e7c3      	b.n	80058e0 <_svfiprintf_r+0x130>
 8005958:	4604      	mov	r4, r0
 800595a:	2301      	movs	r3, #1
 800595c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005960:	e7f0      	b.n	8005944 <_svfiprintf_r+0x194>
 8005962:	ab03      	add	r3, sp, #12
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	462a      	mov	r2, r5
 8005968:	4638      	mov	r0, r7
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <_svfiprintf_r+0x1f8>)
 800596c:	a904      	add	r1, sp, #16
 800596e:	f3af 8000 	nop.w
 8005972:	1c42      	adds	r2, r0, #1
 8005974:	4606      	mov	r6, r0
 8005976:	d1d6      	bne.n	8005926 <_svfiprintf_r+0x176>
 8005978:	89ab      	ldrh	r3, [r5, #12]
 800597a:	065b      	lsls	r3, r3, #25
 800597c:	f53f af2c 	bmi.w	80057d8 <_svfiprintf_r+0x28>
 8005980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005982:	b01d      	add	sp, #116	; 0x74
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005988:	ab03      	add	r3, sp, #12
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	462a      	mov	r2, r5
 800598e:	4638      	mov	r0, r7
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <_svfiprintf_r+0x1f8>)
 8005992:	a904      	add	r1, sp, #16
 8005994:	f000 f87c 	bl	8005a90 <_printf_i>
 8005998:	e7eb      	b.n	8005972 <_svfiprintf_r+0x1c2>
 800599a:	bf00      	nop
 800599c:	08006250 	.word	0x08006250
 80059a0:	0800625a 	.word	0x0800625a
 80059a4:	00000000 	.word	0x00000000
 80059a8:	080056f9 	.word	0x080056f9
 80059ac:	08006256 	.word	0x08006256

080059b0 <_printf_common>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	4699      	mov	r9, r3
 80059b8:	688a      	ldr	r2, [r1, #8]
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	4607      	mov	r7, r0
 80059be:	4293      	cmp	r3, r2
 80059c0:	bfb8      	it	lt
 80059c2:	4613      	movlt	r3, r2
 80059c4:	6033      	str	r3, [r6, #0]
 80059c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ca:	460c      	mov	r4, r1
 80059cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d0:	b10a      	cbz	r2, 80059d6 <_printf_common+0x26>
 80059d2:	3301      	adds	r3, #1
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	6833      	ldrmi	r3, [r6, #0]
 80059de:	3302      	addmi	r3, #2
 80059e0:	6033      	strmi	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	f015 0506 	ands.w	r5, r5, #6
 80059e8:	d106      	bne.n	80059f8 <_printf_common+0x48>
 80059ea:	f104 0a19 	add.w	sl, r4, #25
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	6832      	ldr	r2, [r6, #0]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc28      	bgt.n	8005a4a <_printf_common+0x9a>
 80059f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059fc:	1e13      	subs	r3, r2, #0
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	bf18      	it	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	0692      	lsls	r2, r2, #26
 8005a06:	d42d      	bmi.n	8005a64 <_printf_common+0xb4>
 8005a08:	4649      	mov	r1, r9
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a10:	47c0      	blx	r8
 8005a12:	3001      	adds	r0, #1
 8005a14:	d020      	beq.n	8005a58 <_printf_common+0xa8>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	68e5      	ldr	r5, [r4, #12]
 8005a1a:	f003 0306 	and.w	r3, r3, #6
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	bf18      	it	ne
 8005a22:	2500      	movne	r5, #0
 8005a24:	6832      	ldr	r2, [r6, #0]
 8005a26:	f04f 0600 	mov.w	r6, #0
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	bf08      	it	eq
 8005a2e:	1aad      	subeq	r5, r5, r2
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	bf08      	it	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	bfc4      	itt	gt
 8005a3c:	1a9b      	subgt	r3, r3, r2
 8005a3e:	18ed      	addgt	r5, r5, r3
 8005a40:	341a      	adds	r4, #26
 8005a42:	42b5      	cmp	r5, r6
 8005a44:	d11a      	bne.n	8005a7c <_printf_common+0xcc>
 8005a46:	2000      	movs	r0, #0
 8005a48:	e008      	b.n	8005a5c <_printf_common+0xac>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4652      	mov	r2, sl
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4638      	mov	r0, r7
 8005a52:	47c0      	blx	r8
 8005a54:	3001      	adds	r0, #1
 8005a56:	d103      	bne.n	8005a60 <_printf_common+0xb0>
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a60:	3501      	adds	r5, #1
 8005a62:	e7c4      	b.n	80059ee <_printf_common+0x3e>
 8005a64:	2030      	movs	r0, #48	; 0x30
 8005a66:	18e1      	adds	r1, r4, r3
 8005a68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a72:	4422      	add	r2, r4
 8005a74:	3302      	adds	r3, #2
 8005a76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a7a:	e7c5      	b.n	8005a08 <_printf_common+0x58>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	4622      	mov	r2, r4
 8005a80:	4649      	mov	r1, r9
 8005a82:	4638      	mov	r0, r7
 8005a84:	47c0      	blx	r8
 8005a86:	3001      	adds	r0, #1
 8005a88:	d0e6      	beq.n	8005a58 <_printf_common+0xa8>
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7d9      	b.n	8005a42 <_printf_common+0x92>
	...

08005a90 <_printf_i>:
 8005a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	460c      	mov	r4, r1
 8005a96:	7e27      	ldrb	r7, [r4, #24]
 8005a98:	4691      	mov	r9, r2
 8005a9a:	2f78      	cmp	r7, #120	; 0x78
 8005a9c:	4680      	mov	r8, r0
 8005a9e:	469a      	mov	sl, r3
 8005aa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa6:	d807      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aa8:	2f62      	cmp	r7, #98	; 0x62
 8005aaa:	d80a      	bhi.n	8005ac2 <_printf_i+0x32>
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	f000 80d9 	beq.w	8005c64 <_printf_i+0x1d4>
 8005ab2:	2f58      	cmp	r7, #88	; 0x58
 8005ab4:	f000 80a4 	beq.w	8005c00 <_printf_i+0x170>
 8005ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ac0:	e03a      	b.n	8005b38 <_printf_i+0xa8>
 8005ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ac6:	2b15      	cmp	r3, #21
 8005ac8:	d8f6      	bhi.n	8005ab8 <_printf_i+0x28>
 8005aca:	a001      	add	r0, pc, #4	; (adr r0, 8005ad0 <_printf_i+0x40>)
 8005acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005ab9 	.word	0x08005ab9
 8005adc:	08005ab9 	.word	0x08005ab9
 8005ae0:	08005ab9 	.word	0x08005ab9
 8005ae4:	08005ab9 	.word	0x08005ab9
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005ab9 	.word	0x08005ab9
 8005af0:	08005ab9 	.word	0x08005ab9
 8005af4:	08005ab9 	.word	0x08005ab9
 8005af8:	08005ab9 	.word	0x08005ab9
 8005afc:	08005c4b 	.word	0x08005c4b
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005c2d 	.word	0x08005c2d
 8005b08:	08005ab9 	.word	0x08005ab9
 8005b0c:	08005ab9 	.word	0x08005ab9
 8005b10:	08005c6d 	.word	0x08005c6d
 8005b14:	08005ab9 	.word	0x08005ab9
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005ab9 	.word	0x08005ab9
 8005b20:	08005ab9 	.word	0x08005ab9
 8005b24:	08005c35 	.word	0x08005c35
 8005b28:	680b      	ldr	r3, [r1, #0]
 8005b2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b2e:	1d1a      	adds	r2, r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	600a      	str	r2, [r1, #0]
 8005b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0a4      	b.n	8005c86 <_printf_i+0x1f6>
 8005b3c:	6825      	ldr	r5, [r4, #0]
 8005b3e:	6808      	ldr	r0, [r1, #0]
 8005b40:	062e      	lsls	r6, r5, #24
 8005b42:	f100 0304 	add.w	r3, r0, #4
 8005b46:	d50a      	bpl.n	8005b5e <_printf_i+0xce>
 8005b48:	6805      	ldr	r5, [r0, #0]
 8005b4a:	600b      	str	r3, [r1, #0]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	da03      	bge.n	8005b58 <_printf_i+0xc8>
 8005b50:	232d      	movs	r3, #45	; 0x2d
 8005b52:	426d      	negs	r5, r5
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b58:	230a      	movs	r3, #10
 8005b5a:	485e      	ldr	r0, [pc, #376]	; (8005cd4 <_printf_i+0x244>)
 8005b5c:	e019      	b.n	8005b92 <_printf_i+0x102>
 8005b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b62:	6805      	ldr	r5, [r0, #0]
 8005b64:	600b      	str	r3, [r1, #0]
 8005b66:	bf18      	it	ne
 8005b68:	b22d      	sxthne	r5, r5
 8005b6a:	e7ef      	b.n	8005b4c <_printf_i+0xbc>
 8005b6c:	680b      	ldr	r3, [r1, #0]
 8005b6e:	6825      	ldr	r5, [r4, #0]
 8005b70:	1d18      	adds	r0, r3, #4
 8005b72:	6008      	str	r0, [r1, #0]
 8005b74:	0628      	lsls	r0, r5, #24
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0xec>
 8005b78:	681d      	ldr	r5, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0xf2>
 8005b7c:	0669      	lsls	r1, r5, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0xe8>
 8005b80:	881d      	ldrh	r5, [r3, #0]
 8005b82:	2f6f      	cmp	r7, #111	; 0x6f
 8005b84:	bf0c      	ite	eq
 8005b86:	2308      	moveq	r3, #8
 8005b88:	230a      	movne	r3, #10
 8005b8a:	4852      	ldr	r0, [pc, #328]	; (8005cd4 <_printf_i+0x244>)
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b92:	6866      	ldr	r6, [r4, #4]
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	bfa8      	it	ge
 8005b98:	6821      	ldrge	r1, [r4, #0]
 8005b9a:	60a6      	str	r6, [r4, #8]
 8005b9c:	bfa4      	itt	ge
 8005b9e:	f021 0104 	bicge.w	r1, r1, #4
 8005ba2:	6021      	strge	r1, [r4, #0]
 8005ba4:	b90d      	cbnz	r5, 8005baa <_printf_i+0x11a>
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	d04d      	beq.n	8005c46 <_printf_i+0x1b6>
 8005baa:	4616      	mov	r6, r2
 8005bac:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bb0:	fb03 5711 	mls	r7, r3, r1, r5
 8005bb4:	5dc7      	ldrb	r7, [r0, r7]
 8005bb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bba:	462f      	mov	r7, r5
 8005bbc:	42bb      	cmp	r3, r7
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	d9f4      	bls.n	8005bac <_printf_i+0x11c>
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d10b      	bne.n	8005bde <_printf_i+0x14e>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	07df      	lsls	r7, r3, #31
 8005bca:	d508      	bpl.n	8005bde <_printf_i+0x14e>
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	6861      	ldr	r1, [r4, #4]
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	bfde      	ittt	le
 8005bd4:	2330      	movle	r3, #48	; 0x30
 8005bd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bda:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005bde:	1b92      	subs	r2, r2, r6
 8005be0:	6122      	str	r2, [r4, #16]
 8005be2:	464b      	mov	r3, r9
 8005be4:	4621      	mov	r1, r4
 8005be6:	4640      	mov	r0, r8
 8005be8:	f8cd a000 	str.w	sl, [sp]
 8005bec:	aa03      	add	r2, sp, #12
 8005bee:	f7ff fedf 	bl	80059b0 <_printf_common>
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d14c      	bne.n	8005c90 <_printf_i+0x200>
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bfa:	b004      	add	sp, #16
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	4834      	ldr	r0, [pc, #208]	; (8005cd4 <_printf_i+0x244>)
 8005c02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c06:	680e      	ldr	r6, [r1, #0]
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c0e:	061f      	lsls	r7, r3, #24
 8005c10:	600e      	str	r6, [r1, #0]
 8005c12:	d514      	bpl.n	8005c3e <_printf_i+0x1ae>
 8005c14:	07d9      	lsls	r1, r3, #31
 8005c16:	bf44      	itt	mi
 8005c18:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1c:	6023      	strmi	r3, [r4, #0]
 8005c1e:	b91d      	cbnz	r5, 8005c28 <_printf_i+0x198>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	f023 0320 	bic.w	r3, r3, #32
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	2310      	movs	r3, #16
 8005c2a:	e7af      	b.n	8005b8c <_printf_i+0xfc>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	2378      	movs	r3, #120	; 0x78
 8005c36:	4828      	ldr	r0, [pc, #160]	; (8005cd8 <_printf_i+0x248>)
 8005c38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c3c:	e7e3      	b.n	8005c06 <_printf_i+0x176>
 8005c3e:	065e      	lsls	r6, r3, #25
 8005c40:	bf48      	it	mi
 8005c42:	b2ad      	uxthmi	r5, r5
 8005c44:	e7e6      	b.n	8005c14 <_printf_i+0x184>
 8005c46:	4616      	mov	r6, r2
 8005c48:	e7bb      	b.n	8005bc2 <_printf_i+0x132>
 8005c4a:	680b      	ldr	r3, [r1, #0]
 8005c4c:	6826      	ldr	r6, [r4, #0]
 8005c4e:	1d1d      	adds	r5, r3, #4
 8005c50:	6960      	ldr	r0, [r4, #20]
 8005c52:	600d      	str	r5, [r1, #0]
 8005c54:	0635      	lsls	r5, r6, #24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0x1ce>
 8005c5a:	6018      	str	r0, [r3, #0]
 8005c5c:	e002      	b.n	8005c64 <_printf_i+0x1d4>
 8005c5e:	0671      	lsls	r1, r6, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0x1ca>
 8005c62:	8018      	strh	r0, [r3, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	4616      	mov	r6, r2
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	e7ba      	b.n	8005be2 <_printf_i+0x152>
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	600a      	str	r2, [r1, #0]
 8005c72:	681e      	ldr	r6, [r3, #0]
 8005c74:	2100      	movs	r1, #0
 8005c76:	4630      	mov	r0, r6
 8005c78:	6862      	ldr	r2, [r4, #4]
 8005c7a:	f000 f82f 	bl	8005cdc <memchr>
 8005c7e:	b108      	cbz	r0, 8005c84 <_printf_i+0x1f4>
 8005c80:	1b80      	subs	r0, r0, r6
 8005c82:	6060      	str	r0, [r4, #4]
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8e:	e7a8      	b.n	8005be2 <_printf_i+0x152>
 8005c90:	4632      	mov	r2, r6
 8005c92:	4649      	mov	r1, r9
 8005c94:	4640      	mov	r0, r8
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	47d0      	blx	sl
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d0ab      	beq.n	8005bf6 <_printf_i+0x166>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	079b      	lsls	r3, r3, #30
 8005ca2:	d413      	bmi.n	8005ccc <_printf_i+0x23c>
 8005ca4:	68e0      	ldr	r0, [r4, #12]
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	4298      	cmp	r0, r3
 8005caa:	bfb8      	it	lt
 8005cac:	4618      	movlt	r0, r3
 8005cae:	e7a4      	b.n	8005bfa <_printf_i+0x16a>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4632      	mov	r2, r6
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	47d0      	blx	sl
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d09b      	beq.n	8005bf6 <_printf_i+0x166>
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	68e3      	ldr	r3, [r4, #12]
 8005cc2:	9903      	ldr	r1, [sp, #12]
 8005cc4:	1a5b      	subs	r3, r3, r1
 8005cc6:	42ab      	cmp	r3, r5
 8005cc8:	dcf2      	bgt.n	8005cb0 <_printf_i+0x220>
 8005cca:	e7eb      	b.n	8005ca4 <_printf_i+0x214>
 8005ccc:	2500      	movs	r5, #0
 8005cce:	f104 0619 	add.w	r6, r4, #25
 8005cd2:	e7f5      	b.n	8005cc0 <_printf_i+0x230>
 8005cd4:	08006261 	.word	0x08006261
 8005cd8:	08006272 	.word	0x08006272

08005cdc <memchr>:
 8005cdc:	4603      	mov	r3, r0
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	b2c9      	uxtb	r1, r1
 8005ce2:	4402      	add	r2, r0
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	d101      	bne.n	8005cee <memchr+0x12>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e003      	b.n	8005cf6 <memchr+0x1a>
 8005cee:	7804      	ldrb	r4, [r0, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	428c      	cmp	r4, r1
 8005cf4:	d1f6      	bne.n	8005ce4 <memchr+0x8>
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <memcpy>:
 8005cf8:	440a      	add	r2, r1
 8005cfa:	4291      	cmp	r1, r2
 8005cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d00:	d100      	bne.n	8005d04 <memcpy+0xc>
 8005d02:	4770      	bx	lr
 8005d04:	b510      	push	{r4, lr}
 8005d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d10:	d1f9      	bne.n	8005d06 <memcpy+0xe>
 8005d12:	bd10      	pop	{r4, pc}

08005d14 <memmove>:
 8005d14:	4288      	cmp	r0, r1
 8005d16:	b510      	push	{r4, lr}
 8005d18:	eb01 0402 	add.w	r4, r1, r2
 8005d1c:	d902      	bls.n	8005d24 <memmove+0x10>
 8005d1e:	4284      	cmp	r4, r0
 8005d20:	4623      	mov	r3, r4
 8005d22:	d807      	bhi.n	8005d34 <memmove+0x20>
 8005d24:	1e43      	subs	r3, r0, #1
 8005d26:	42a1      	cmp	r1, r4
 8005d28:	d008      	beq.n	8005d3c <memmove+0x28>
 8005d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d32:	e7f8      	b.n	8005d26 <memmove+0x12>
 8005d34:	4601      	mov	r1, r0
 8005d36:	4402      	add	r2, r0
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	d100      	bne.n	8005d3e <memmove+0x2a>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d46:	e7f7      	b.n	8005d38 <memmove+0x24>

08005d48 <_free_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d043      	beq.n	8005dd8 <_free_r+0x90>
 8005d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d54:	1f0c      	subs	r4, r1, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfb8      	it	lt
 8005d5a:	18e4      	addlt	r4, r4, r3
 8005d5c:	f000 f8d0 	bl	8005f00 <__malloc_lock>
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <_free_r+0x94>)
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	4610      	mov	r0, r2
 8005d66:	b933      	cbnz	r3, 8005d76 <_free_r+0x2e>
 8005d68:	6063      	str	r3, [r4, #4]
 8005d6a:	6014      	str	r4, [r2, #0]
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d72:	f000 b8cb 	b.w	8005f0c <__malloc_unlock>
 8005d76:	42a3      	cmp	r3, r4
 8005d78:	d90a      	bls.n	8005d90 <_free_r+0x48>
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	1862      	adds	r2, r4, r1
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	bf01      	itttt	eq
 8005d82:	681a      	ldreq	r2, [r3, #0]
 8005d84:	685b      	ldreq	r3, [r3, #4]
 8005d86:	1852      	addeq	r2, r2, r1
 8005d88:	6022      	streq	r2, [r4, #0]
 8005d8a:	6063      	str	r3, [r4, #4]
 8005d8c:	6004      	str	r4, [r0, #0]
 8005d8e:	e7ed      	b.n	8005d6c <_free_r+0x24>
 8005d90:	461a      	mov	r2, r3
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	b10b      	cbz	r3, 8005d9a <_free_r+0x52>
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	d9fa      	bls.n	8005d90 <_free_r+0x48>
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	1850      	adds	r0, r2, r1
 8005d9e:	42a0      	cmp	r0, r4
 8005da0:	d10b      	bne.n	8005dba <_free_r+0x72>
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	4401      	add	r1, r0
 8005da6:	1850      	adds	r0, r2, r1
 8005da8:	4283      	cmp	r3, r0
 8005daa:	6011      	str	r1, [r2, #0]
 8005dac:	d1de      	bne.n	8005d6c <_free_r+0x24>
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4401      	add	r1, r0
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	6053      	str	r3, [r2, #4]
 8005db8:	e7d8      	b.n	8005d6c <_free_r+0x24>
 8005dba:	d902      	bls.n	8005dc2 <_free_r+0x7a>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	e7d4      	b.n	8005d6c <_free_r+0x24>
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	1821      	adds	r1, r4, r0
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	bf01      	itttt	eq
 8005dca:	6819      	ldreq	r1, [r3, #0]
 8005dcc:	685b      	ldreq	r3, [r3, #4]
 8005dce:	1809      	addeq	r1, r1, r0
 8005dd0:	6021      	streq	r1, [r4, #0]
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	6054      	str	r4, [r2, #4]
 8005dd6:	e7c9      	b.n	8005d6c <_free_r+0x24>
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000104 	.word	0x20000104

08005de0 <_malloc_r>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	1ccd      	adds	r5, r1, #3
 8005de4:	f025 0503 	bic.w	r5, r5, #3
 8005de8:	3508      	adds	r5, #8
 8005dea:	2d0c      	cmp	r5, #12
 8005dec:	bf38      	it	cc
 8005dee:	250c      	movcc	r5, #12
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	4606      	mov	r6, r0
 8005df4:	db01      	blt.n	8005dfa <_malloc_r+0x1a>
 8005df6:	42a9      	cmp	r1, r5
 8005df8:	d903      	bls.n	8005e02 <_malloc_r+0x22>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	2000      	movs	r0, #0
 8005e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e02:	f000 f87d 	bl	8005f00 <__malloc_lock>
 8005e06:	4921      	ldr	r1, [pc, #132]	; (8005e8c <_malloc_r+0xac>)
 8005e08:	680a      	ldr	r2, [r1, #0]
 8005e0a:	4614      	mov	r4, r2
 8005e0c:	b99c      	cbnz	r4, 8005e36 <_malloc_r+0x56>
 8005e0e:	4f20      	ldr	r7, [pc, #128]	; (8005e90 <_malloc_r+0xb0>)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b923      	cbnz	r3, 8005e1e <_malloc_r+0x3e>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4630      	mov	r0, r6
 8005e18:	f000 f862 	bl	8005ee0 <_sbrk_r>
 8005e1c:	6038      	str	r0, [r7, #0]
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4630      	mov	r0, r6
 8005e22:	f000 f85d 	bl	8005ee0 <_sbrk_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d123      	bne.n	8005e72 <_malloc_r+0x92>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	f000 f86c 	bl	8005f0c <__malloc_unlock>
 8005e34:	e7e3      	b.n	8005dfe <_malloc_r+0x1e>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	1b5b      	subs	r3, r3, r5
 8005e3a:	d417      	bmi.n	8005e6c <_malloc_r+0x8c>
 8005e3c:	2b0b      	cmp	r3, #11
 8005e3e:	d903      	bls.n	8005e48 <_malloc_r+0x68>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	441c      	add	r4, r3
 8005e44:	6025      	str	r5, [r4, #0]
 8005e46:	e004      	b.n	8005e52 <_malloc_r+0x72>
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	42a2      	cmp	r2, r4
 8005e4c:	bf0c      	ite	eq
 8005e4e:	600b      	streq	r3, [r1, #0]
 8005e50:	6053      	strne	r3, [r2, #4]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f85a 	bl	8005f0c <__malloc_unlock>
 8005e58:	f104 000b 	add.w	r0, r4, #11
 8005e5c:	1d23      	adds	r3, r4, #4
 8005e5e:	f020 0007 	bic.w	r0, r0, #7
 8005e62:	1ac2      	subs	r2, r0, r3
 8005e64:	d0cc      	beq.n	8005e00 <_malloc_r+0x20>
 8005e66:	1a1b      	subs	r3, r3, r0
 8005e68:	50a3      	str	r3, [r4, r2]
 8005e6a:	e7c9      	b.n	8005e00 <_malloc_r+0x20>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	6864      	ldr	r4, [r4, #4]
 8005e70:	e7cc      	b.n	8005e0c <_malloc_r+0x2c>
 8005e72:	1cc4      	adds	r4, r0, #3
 8005e74:	f024 0403 	bic.w	r4, r4, #3
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	d0e3      	beq.n	8005e44 <_malloc_r+0x64>
 8005e7c:	1a21      	subs	r1, r4, r0
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f000 f82e 	bl	8005ee0 <_sbrk_r>
 8005e84:	3001      	adds	r0, #1
 8005e86:	d1dd      	bne.n	8005e44 <_malloc_r+0x64>
 8005e88:	e7cf      	b.n	8005e2a <_malloc_r+0x4a>
 8005e8a:	bf00      	nop
 8005e8c:	20000104 	.word	0x20000104
 8005e90:	20000108 	.word	0x20000108

08005e94 <_realloc_r>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	4607      	mov	r7, r0
 8005e98:	4614      	mov	r4, r2
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	b921      	cbnz	r1, 8005ea8 <_realloc_r+0x14>
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ea4:	f7ff bf9c 	b.w	8005de0 <_malloc_r>
 8005ea8:	b922      	cbnz	r2, 8005eb4 <_realloc_r+0x20>
 8005eaa:	f7ff ff4d 	bl	8005d48 <_free_r>
 8005eae:	4625      	mov	r5, r4
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb4:	f000 f830 	bl	8005f18 <_malloc_usable_size_r>
 8005eb8:	42a0      	cmp	r0, r4
 8005eba:	d20f      	bcs.n	8005edc <_realloc_r+0x48>
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ff8e 	bl	8005de0 <_malloc_r>
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d0f2      	beq.n	8005eb0 <_realloc_r+0x1c>
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4622      	mov	r2, r4
 8005ece:	f7ff ff13 	bl	8005cf8 <memcpy>
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff ff37 	bl	8005d48 <_free_r>
 8005eda:	e7e9      	b.n	8005eb0 <_realloc_r+0x1c>
 8005edc:	4635      	mov	r5, r6
 8005ede:	e7e7      	b.n	8005eb0 <_realloc_r+0x1c>

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	4d05      	ldr	r5, [pc, #20]	; (8005efc <_sbrk_r+0x1c>)
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fc f8ce 	bl	800208c <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000294 	.word	0x20000294

08005f00 <__malloc_lock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__malloc_lock+0x8>)
 8005f02:	f000 b811 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	2000029c 	.word	0x2000029c

08005f0c <__malloc_unlock>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__malloc_unlock+0x8>)
 8005f0e:	f000 b80c 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	2000029c 	.word	0x2000029c

08005f18 <_malloc_usable_size_r>:
 8005f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1c:	1f18      	subs	r0, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfbc      	itt	lt
 8005f22:	580b      	ldrlt	r3, [r1, r0]
 8005f24:	18c0      	addlt	r0, r0, r3
 8005f26:	4770      	bx	lr

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <_init>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr

08005f38 <_fini>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr
